{"ast":null,"code":"var _jsxFileName = \"/home/amax/Autoro/cabana/src/components/GithubDbcList.js\";\nimport React, { Component } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport OpenDbc from '../api/OpenDbc';\nexport default class GithubDbcList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      paths: [],\n      selectedPath: null,\n      pathQuery: ''\n    };\n    this.updatePathQuery = this.updatePathQuery.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.openDbcClient.list(this.props.repo).then(paths => {\n      paths = paths.filter(path => path.indexOf('.dbc') !== -1);\n      this.setState({\n        paths\n      });\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.repo !== this.props.repo) {\n      this.props.openDbcClient.list(this.props.repo).then(paths => {\n        this.setState({\n          paths,\n          selectedPath: null\n        });\n      });\n    }\n  }\n\n  updatePathQuery(e) {\n    this.setState({\n      pathQuery: e.target.value\n    });\n  }\n\n  selectPath(path) {\n    this.setState({\n      selectedPath: path\n    });\n    this.props.openDbcClient.getDbcContents(path, this.props.repo).then(dbcContents => {\n      this.props.onDbcLoaded(path, dbcContents);\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cabana-dbc-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cabana-dbc-list-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: `https://github.com/${this.props.repo}`,\n      target: \"_blank\",\n      rel: \"noopener noreferrer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-github\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 13\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 13\n      }\n    }, this.props.repo)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-field form-field--small\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"input\", {\n      type: \"text\",\n      placeholder: \"Search DBC Files\",\n      onChange: this.updatePathQuery,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cabana-dbc-list-files\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }\n    }, this.state.paths.filter(p => this.state.pathQuery === '' | p.includes(this.state.pathQuery)).map(path => /*#__PURE__*/React.createElement(\"div\", {\n      className: cx('cabana-dbc-list-file', {\n        'is-selected': this.state.selectedPath === path\n      }),\n      onClick: () => {\n        this.selectPath(path);\n      },\n      key: path,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 17\n      }\n    }, path)))));\n  }\n\n}\nGithubDbcList.propTypes = {\n  onDbcLoaded: PropTypes.func.isRequired,\n  repo: PropTypes.string.isRequired,\n  openDbcClient: PropTypes.instanceOf(OpenDbc).isRequired\n};","map":{"version":3,"sources":["/home/amax/Autoro/cabana/src/components/GithubDbcList.js"],"names":["React","Component","cx","PropTypes","OpenDbc","GithubDbcList","constructor","props","state","paths","selectedPath","pathQuery","updatePathQuery","bind","componentDidMount","openDbcClient","list","repo","then","filter","path","indexOf","setState","componentDidUpdate","prevProps","e","target","value","selectPath","getDbcContents","dbcContents","onDbcLoaded","render","p","includes","map","propTypes","func","isRequired","string","instanceOf"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\n\nimport OpenDbc from '../api/OpenDbc';\n\nexport default class GithubDbcList extends Component {\n  static propTypes = {\n    onDbcLoaded: PropTypes.func.isRequired,\n    repo: PropTypes.string.isRequired,\n    openDbcClient: PropTypes.instanceOf(OpenDbc).isRequired\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      paths: [],\n      selectedPath: null,\n      pathQuery: ''\n    };\n\n    this.updatePathQuery = this.updatePathQuery.bind(this);\n  }\n\n  componentDidMount() {\n    this.props.openDbcClient.list(this.props.repo).then((paths) => {\n      paths = paths.filter((path) => path.indexOf('.dbc') !== -1);\n      this.setState({ paths });\n    });\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.repo !== this.props.repo) {\n      this.props.openDbcClient.list(this.props.repo).then((paths) => {\n        this.setState({ paths, selectedPath: null });\n      });\n    }\n  }\n\n  updatePathQuery(e) {\n    this.setState({\n      pathQuery: e.target.value\n    });\n  }\n\n  selectPath(path) {\n    this.setState({ selectedPath: path });\n    this.props.openDbcClient\n      .getDbcContents(path, this.props.repo)\n      .then((dbcContents) => {\n        this.props.onDbcLoaded(path, dbcContents);\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"cabana-dbc-list\">\n        <div className=\"cabana-dbc-list-header\">\n          <a href={`https://github.com/${this.props.repo}`} target=\"_blank\" rel=\"noopener noreferrer\">\n            <i className=\"fa fa-github\" />\n            <span>{this.props.repo}</span>\n          </a>\n          <div className=\"form-field form-field--small\">\n            <input\n              type=\"text\"\n              placeholder=\"Search DBC Files\"\n              onChange={this.updatePathQuery}\n            />\n          </div>\n        </div>\n        <div className=\"cabana-dbc-list-files\">\n          {this.state.paths\n            .filter(\n              (p) => (this.state.pathQuery === '') | p.includes(this.state.pathQuery)\n            )\n            .map((path) => (\n              <div\n                className={cx('cabana-dbc-list-file', {\n                  'is-selected': this.state.selectedPath === path\n                })}\n                onClick={() => {\n                  this.selectPath(path);\n                }}\n                key={path}\n              >\n                <span>{path}</span>\n              </div>\n            ))}\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}