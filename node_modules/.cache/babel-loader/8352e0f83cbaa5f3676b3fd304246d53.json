{"ast":null,"code":"'use strict';\n/* @flow */\n\n/* globals Map: false */\n\n/**\n * The [mode](http://bit.ly/W5K4Yt) is the number that appears in a list the highest number of times.\n * There can be multiple modes in a list: in the event of a tie, this\n * algorithm will return the most recently seen mode.\n *\n * modeFast uses a Map object to keep track of the mode, instead of the approach\n * used with `mode`, a sorted array. As a result, it is faster\n * than `mode` and supports any data type that can be compared with `==`.\n * It also requires a\n * [JavaScript environment with support for Map](https://kangax.github.io/compat-table/es6/#test-Map),\n * and will throw an error if Map is not available.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * @param {Array<*>} x a sample of one or more data points\n * @returns {?*} mode\n * @throws {ReferenceError} if the JavaScript environment doesn't support Map\n * @throws {Error} if x is empty\n * @example\n * modeFast(['rabbits', 'rabbits', 'squirrels']); // => 'rabbits'\n */\n\nfunction modeFast\n/*::<T>*/\n(x\n/*: Array<T> */\n)\n/*: ?T */\n{\n  // This index will reflect the incidence of different values, indexing\n  // them like\n  // { value: count }\n  var index = new Map(); // A running `mode` and the number of times it has been encountered.\n\n  var mode;\n  var modeCount = 0;\n\n  for (var i = 0; i < x.length; i++) {\n    var newCount = index.get(x[i]);\n\n    if (newCount === undefined) {\n      newCount = 1;\n    } else {\n      newCount++;\n    }\n\n    if (newCount > modeCount) {\n      mode = x[i];\n      modeCount = newCount;\n    }\n\n    index.set(x[i], newCount);\n  }\n\n  if (modeCount === 0) {\n    throw new Error('mode requires at last one data point');\n  }\n\n  return mode;\n}\n\nmodule.exports = modeFast;","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/simple-statistics/src/mode_fast.js"],"names":["modeFast","x","index","Map","mode","modeCount","i","length","newCount","get","undefined","set","Error","module","exports"],"mappings":"AAAA;AACA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA;AAAQ;AAAjB,CAA2BC;AAAE;AAA7B;AAA6C;AAAU;AAEnD;AACA;AACA;AACA,MAAIC,KAAK,GAAG,IAAIC,GAAJ,EAAZ,CALmD,CAOnD;;AACA,MAAIC,IAAJ;AACA,MAAIC,SAAS,GAAG,CAAhB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,CAAC,CAACM,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AAC/B,QAAIE,QAAQ,GAAGN,KAAK,CAACO,GAAN,CAAUR,CAAC,CAACK,CAAD,CAAX,CAAf;;AACA,QAAIE,QAAQ,KAAKE,SAAjB,EAA4B;AACxBF,MAAAA,QAAQ,GAAG,CAAX;AACH,KAFD,MAEO;AACHA,MAAAA,QAAQ;AACX;;AACD,QAAIA,QAAQ,GAAGH,SAAf,EAA0B;AACtBD,MAAAA,IAAI,GAAGH,CAAC,CAACK,CAAD,CAAR;AACAD,MAAAA,SAAS,GAAGG,QAAZ;AACH;;AACDN,IAAAA,KAAK,CAACS,GAAN,CAAUV,CAAC,CAACK,CAAD,CAAX,EAAgBE,QAAhB;AACH;;AAED,MAAIH,SAAS,KAAK,CAAlB,EAAqB;AACjB,UAAM,IAAIO,KAAJ,CAAU,sCAAV,CAAN;AACH;;AAED,SAAOR,IAAP;AACH;;AAEDS,MAAM,CAACC,OAAP,GAAiBd,QAAjB","sourcesContent":["'use strict';\n/* @flow */\n/* globals Map: false */\n\n/**\n * The [mode](http://bit.ly/W5K4Yt) is the number that appears in a list the highest number of times.\n * There can be multiple modes in a list: in the event of a tie, this\n * algorithm will return the most recently seen mode.\n *\n * modeFast uses a Map object to keep track of the mode, instead of the approach\n * used with `mode`, a sorted array. As a result, it is faster\n * than `mode` and supports any data type that can be compared with `==`.\n * It also requires a\n * [JavaScript environment with support for Map](https://kangax.github.io/compat-table/es6/#test-Map),\n * and will throw an error if Map is not available.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * @param {Array<*>} x a sample of one or more data points\n * @returns {?*} mode\n * @throws {ReferenceError} if the JavaScript environment doesn't support Map\n * @throws {Error} if x is empty\n * @example\n * modeFast(['rabbits', 'rabbits', 'squirrels']); // => 'rabbits'\n */\nfunction modeFast/*::<T>*/(x /*: Array<T> */)/*: ?T */ {\n\n    // This index will reflect the incidence of different values, indexing\n    // them like\n    // { value: count }\n    var index = new Map();\n\n    // A running `mode` and the number of times it has been encountered.\n    var mode;\n    var modeCount = 0;\n\n    for (var i = 0; i < x.length; i++) {\n        var newCount = index.get(x[i]);\n        if (newCount === undefined) {\n            newCount = 1;\n        } else {\n            newCount++;\n        }\n        if (newCount > modeCount) {\n            mode = x[i];\n            modeCount = newCount;\n        }\n        index.set(x[i], newCount);\n    }\n\n    if (modeCount === 0) {\n        throw new Error('mode requires at last one data point');\n    }\n\n    return mode;\n}\n\nmodule.exports = modeFast;\n"]},"metadata":{},"sourceType":"script"}