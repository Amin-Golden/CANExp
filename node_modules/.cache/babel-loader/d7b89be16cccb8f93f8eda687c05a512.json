{"ast":null,"code":"/* @flow */\n'use strict';\n/**\n * Implementation of Combinations\n * Combinations are unique subsets of a collection - in this case, k x from a collection at a time.\n * https://en.wikipedia.org/wiki/Combination\n * @param {Array} x any type of data\n * @param {int} k the number of objects in each group (without replacement)\n * @returns {Array<Array>} array of permutations\n * @example\n * combinations([1, 2, 3], 2); // => [[1,2], [1,3], [2,3]]\n */\n\nfunction combinations(x\n/*: Array<any> */\n, k\n/*: number */\n) {\n  var i;\n  var subI;\n  var combinationList = [];\n  var subsetCombinations;\n  var next;\n\n  for (i = 0; i < x.length; i++) {\n    if (k === 1) {\n      combinationList.push([x[i]]);\n    } else {\n      subsetCombinations = combinations(x.slice(i + 1, x.length), k - 1);\n\n      for (subI = 0; subI < subsetCombinations.length; subI++) {\n        next = subsetCombinations[subI];\n        next.unshift(x[i]);\n        combinationList.push(next);\n      }\n    }\n  }\n\n  return combinationList;\n}\n\nmodule.exports = combinations;","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/simple-statistics/src/combinations.js"],"names":["combinations","x","k","i","subI","combinationList","subsetCombinations","next","length","push","slice","unshift","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASA,YAAT,CAAsBC;AAAE;AAAxB,EAA2CC;AAAC;AAA5C,EAA2D;AACvD,MAAIC,CAAJ;AACA,MAAIC,IAAJ;AACA,MAAIC,eAAe,GAAG,EAAtB;AACA,MAAIC,kBAAJ;AACA,MAAIC,IAAJ;;AAEA,OAAKJ,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGF,CAAC,CAACO,MAAlB,EAA0BL,CAAC,EAA3B,EAA+B;AAC3B,QAAID,CAAC,KAAK,CAAV,EAAa;AACTG,MAAAA,eAAe,CAACI,IAAhB,CAAqB,CAACR,CAAC,CAACE,CAAD,CAAF,CAArB;AACH,KAFD,MAEO;AACHG,MAAAA,kBAAkB,GAAGN,YAAY,CAACC,CAAC,CAACS,KAAF,CAASP,CAAC,GAAG,CAAb,EAAgBF,CAAC,CAACO,MAAlB,CAAD,EAA6BN,CAAC,GAAG,CAAjC,CAAjC;;AACA,WAAKE,IAAI,GAAG,CAAZ,EAAeA,IAAI,GAAGE,kBAAkB,CAACE,MAAzC,EAAiDJ,IAAI,EAArD,EAAyD;AACrDG,QAAAA,IAAI,GAAGD,kBAAkB,CAACF,IAAD,CAAzB;AACAG,QAAAA,IAAI,CAACI,OAAL,CAAaV,CAAC,CAACE,CAAD,CAAd;AACAE,QAAAA,eAAe,CAACI,IAAhB,CAAqBF,IAArB;AACH;AACJ;AACJ;;AACD,SAAOF,eAAP;AACH;;AAEDO,MAAM,CAACC,OAAP,GAAiBb,YAAjB","sourcesContent":["/* @flow */\n'use strict';\n/**\n * Implementation of Combinations\n * Combinations are unique subsets of a collection - in this case, k x from a collection at a time.\n * https://en.wikipedia.org/wiki/Combination\n * @param {Array} x any type of data\n * @param {int} k the number of objects in each group (without replacement)\n * @returns {Array<Array>} array of permutations\n * @example\n * combinations([1, 2, 3], 2); // => [[1,2], [1,3], [2,3]]\n */\n\nfunction combinations(x /*: Array<any> */, k/*: number */) {\n    var i;\n    var subI;\n    var combinationList = [];\n    var subsetCombinations;\n    var next;\n\n    for (i = 0; i < x.length; i++) {\n        if (k === 1) {\n            combinationList.push([x[i]])\n        } else {\n            subsetCombinations = combinations(x.slice( i + 1, x.length ), k - 1);\n            for (subI = 0; subI < subsetCombinations.length; subI++) {\n                next = subsetCombinations[subI];\n                next.unshift(x[i]);\n                combinationList.push(next);\n            }\n        }\n    }\n    return combinationList;\n}\n\nmodule.exports = combinations;\n"]},"metadata":{},"sourceType":"script"}