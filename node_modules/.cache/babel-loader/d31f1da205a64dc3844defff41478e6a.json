{"ast":null,"code":"/* @flow */\n'use strict';\n/**\n * Implementation of [Heap's Algorithm](https://en.wikipedia.org/wiki/Heap%27s_algorithm)\n * for generating permutations.\n *\n * @param {Array} elements any type of data\n * @returns {Array<Array>} array of permutations\n */\n\nfunction permutationsHeap\n/*:: <T> */\n(elements\n/*: Array<T> */\n)\n/*: Array<Array<T>> */\n{\n  var indexes = new Array(elements.length);\n  var permutations = [elements.slice()];\n\n  for (var i = 0; i < elements.length; i++) {\n    indexes[i] = 0;\n  }\n\n  for (i = 0; i < elements.length;) {\n    if (indexes[i] < i) {\n      // At odd indexes, swap from indexes[i] instead\n      // of from the beginning of the array\n      var swapFrom = 0;\n\n      if (i % 2 !== 0) {\n        swapFrom = indexes[i];\n      } // swap between swapFrom and i, using\n      // a temporary variable as storage.\n\n\n      var temp = elements[swapFrom];\n      elements[swapFrom] = elements[i];\n      elements[i] = temp;\n      permutations.push(elements.slice());\n      indexes[i]++;\n      i = 0;\n    } else {\n      indexes[i] = 0;\n      i++;\n    }\n  }\n\n  return permutations;\n}\n\nmodule.exports = permutationsHeap;","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/simple-statistics/src/permutations_heap.js"],"names":["permutationsHeap","elements","indexes","Array","length","permutations","slice","i","swapFrom","temp","push","module","exports"],"mappings":"AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA;AAAgB;AAAzB,CAAqCC;AAAS;AAA9C;AAA8D;AAAuB;AACjF,MAAIC,OAAO,GAAG,IAAIC,KAAJ,CAAUF,QAAQ,CAACG,MAAnB,CAAd;AACA,MAAIC,YAAY,GAAG,CAACJ,QAAQ,CAACK,KAAT,EAAD,CAAnB;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,QAAQ,CAACG,MAA7B,EAAqCG,CAAC,EAAtC,EAA0C;AACtCL,IAAAA,OAAO,CAACK,CAAD,CAAP,GAAa,CAAb;AACH;;AAED,OAAKA,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGN,QAAQ,CAACG,MAAzB,GAAkC;AAC9B,QAAIF,OAAO,CAACK,CAAD,CAAP,GAAaA,CAAjB,EAAoB;AAEhB;AACA;AACA,UAAIC,QAAQ,GAAG,CAAf;;AACA,UAAID,CAAC,GAAG,CAAJ,KAAU,CAAd,EAAiB;AACbC,QAAAA,QAAQ,GAAGN,OAAO,CAACK,CAAD,CAAlB;AACH,OAPe,CAShB;AACA;;;AACA,UAAIE,IAAI,GAAGR,QAAQ,CAACO,QAAD,CAAnB;AACAP,MAAAA,QAAQ,CAACO,QAAD,CAAR,GAAqBP,QAAQ,CAACM,CAAD,CAA7B;AACAN,MAAAA,QAAQ,CAACM,CAAD,CAAR,GAAcE,IAAd;AAEAJ,MAAAA,YAAY,CAACK,IAAb,CAAkBT,QAAQ,CAACK,KAAT,EAAlB;AACAJ,MAAAA,OAAO,CAACK,CAAD,CAAP;AACAA,MAAAA,CAAC,GAAG,CAAJ;AAEH,KAnBD,MAmBO;AACHL,MAAAA,OAAO,CAACK,CAAD,CAAP,GAAa,CAAb;AACAA,MAAAA,CAAC;AACJ;AACJ;;AAED,SAAOF,YAAP;AACH;;AAEDM,MAAM,CAACC,OAAP,GAAiBZ,gBAAjB","sourcesContent":["/* @flow */\n\n'use strict';\n\n/**\n * Implementation of [Heap's Algorithm](https://en.wikipedia.org/wiki/Heap%27s_algorithm)\n * for generating permutations.\n *\n * @param {Array} elements any type of data\n * @returns {Array<Array>} array of permutations\n */\nfunction permutationsHeap/*:: <T> */(elements /*: Array<T> */)/*: Array<Array<T>> */ {\n    var indexes = new Array(elements.length);\n    var permutations = [elements.slice()];\n\n    for (var i = 0; i < elements.length; i++) {\n        indexes[i] = 0;\n    }\n\n    for (i = 0; i < elements.length;) {\n        if (indexes[i] < i) {\n\n            // At odd indexes, swap from indexes[i] instead\n            // of from the beginning of the array\n            var swapFrom = 0;\n            if (i % 2 !== 0) {\n                swapFrom = indexes[i];\n            }\n\n            // swap between swapFrom and i, using\n            // a temporary variable as storage.\n            var temp = elements[swapFrom];\n            elements[swapFrom] = elements[i];\n            elements[i] = temp;\n\n            permutations.push(elements.slice());\n            indexes[i]++;\n            i = 0;\n\n        } else {\n            indexes[i] = 0;\n            i++;\n        }\n    }\n\n    return permutations;\n}\n\nmodule.exports = permutationsHeap;\n"]},"metadata":{},"sourceType":"script"}