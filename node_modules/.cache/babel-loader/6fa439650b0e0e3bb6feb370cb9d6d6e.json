{"ast":null,"code":"import GitHub from 'github-api';\nimport { OPENDBC_SOURCE_REPO } from '../config';\nexport default class OpenDBC {\n  constructor(token) {\n    this.token = token;\n    this.github = new GitHub({\n      token\n    });\n    this.sourceRepo = this.github.getRepo('commaai', 'opendbc');\n    this.githubUsername = null;\n  }\n\n  hasAuth() {\n    return this.token !== null;\n  }\n\n  async getGithubUsername() {\n    if (this.githubUsername) {\n      return this.githubUsername;\n    }\n\n    const githubUsername = await this.fetchGithubUsername();\n\n    if (githubUsername) {\n      return githubUsername;\n    }\n  }\n\n  async fetchGithubUsername() {\n    try {\n      const user = await this.github.getUser();\n\n      if (user) {\n        const profile = await user.getProfile();\n\n        if (profile) {\n          return profile.data.login;\n        }\n      }\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async list(repoFullName) {\n    /*\n    Lists files in a github repository.\n    If no argument provided, assumes OpenDBC source repo\n    (commaai/opendbc)\n    */\n    let repo;\n\n    if (repoFullName === undefined) {\n      repo = this.sourceRepo;\n    } else {\n      const [username, repoName] = repoFullName.split('/');\n      repo = this.github.getRepo(username, repoName);\n    }\n\n    try {\n      const response = await repo.getContents('master', '');\n      return response.data.map(content => content.path);\n    } catch (e) {\n      return [];\n    }\n  }\n\n  async getDbcContents(dbcPath, repoFullName) {\n    let repo;\n\n    if (repoFullName === undefined) {\n      repo = this.sourceRepo;\n    } else {\n      const [username, repoName] = repoFullName.split('/');\n      repo = this.github.getRepo(username, repoName);\n    }\n\n    const fileContents = await repo.getContents('master', dbcPath);\n    const rawContentsUrl = fileContents.data.download_url;\n    const resp = await fetch(rawContentsUrl, {\n      cache: 'no-cache'\n    });\n    return resp.text();\n  }\n\n  repoSourceIsOpenDbc(repoDetails) {\n    return repoDetails.source && repoDetails.source.full_name === OPENDBC_SOURCE_REPO;\n  }\n\n  async getUserOpenDbcFork() {\n    const githubUsername = await this.getGithubUsername();\n    if (!githubUsername) return null;\n    const openDbcFork = this.github.getRepo(githubUsername, 'opendbc');\n    const repoDetailResp = await openDbcFork.getDetails();\n    const repoDetails = repoDetailResp.data;\n\n    if (this.repoSourceIsOpenDbc(repoDetails)) {\n      return repoDetails.full_name;\n    }\n\n    return null;\n  }\n\n  async fork() {\n    const forkResponse = await this.sourceRepo.fork();\n\n    if (forkResponse.status === 202) {\n      return true;\n    }\n\n    return false;\n  }\n\n  async commitFile(repoFullName, path, contents, commitMessage) {\n    /*\n      repo is of format username/reponame\n      authenciated user must have write access to repo\n      */\n    const [user, repoName] = repoFullName.split('/');\n    const repo = this.github.getRepo(user, repoName); // get HEAD reference\n\n    const refResp = await repo.getRef('heads/master');\n    const ref = refResp.data; // get HEAD commit sha\n\n    const headCommitResp = await repo.getCommit(ref.object.sha);\n    const headCommit = headCommitResp.data; // get HEAD tree\n\n    const headTreeResp = await repo.getTree(headCommit.tree.sha);\n    const headTree = headTreeResp.data; // create new tree\n\n    const tree = [{\n      mode: '100644',\n      path,\n      type: 'blob',\n      content: contents\n    }];\n    const createTreeResp = await repo.createTree(tree, headTree.sha);\n    const createdTree = createTreeResp.data; // commit\n\n    const commitResp = await repo.commit(headCommit.sha, createdTree.sha, commitMessage || 'OpenDBC updates');\n    const commit = commitResp.data; // update HEAD\n\n    const updateHeadResp = await repo.updateHead('heads/master', commit.sha, false);\n    return updateHeadResp.status === 200;\n  }\n\n}","map":{"version":3,"sources":["/home/amax/Autoro/cabana/src/api/OpenDbc.js"],"names":["GitHub","OPENDBC_SOURCE_REPO","OpenDBC","constructor","token","github","sourceRepo","getRepo","githubUsername","hasAuth","getGithubUsername","fetchGithubUsername","user","getUser","profile","getProfile","data","login","e","list","repoFullName","repo","undefined","username","repoName","split","response","getContents","map","content","path","getDbcContents","dbcPath","fileContents","rawContentsUrl","download_url","resp","fetch","cache","text","repoSourceIsOpenDbc","repoDetails","source","full_name","getUserOpenDbcFork","openDbcFork","repoDetailResp","getDetails","fork","forkResponse","status","commitFile","contents","commitMessage","refResp","getRef","ref","headCommitResp","getCommit","object","sha","headCommit","headTreeResp","getTree","tree","headTree","mode","type","createTreeResp","createTree","createdTree","commitResp","commit","updateHeadResp","updateHead"],"mappings":"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","sourcesContent":["import GitHub from 'github-api';\n\nimport { OPENDBC_SOURCE_REPO } from '../config';\n\nexport default class OpenDBC {\n  constructor(token) {\n    this.token = token;\n    this.github = new GitHub({ token });\n    this.sourceRepo = this.github.getRepo('commaai', 'opendbc');\n    this.githubUsername = null;\n  }\n\n  hasAuth() {\n    return this.token !== null;\n  }\n\n  async getGithubUsername() {\n    if (this.githubUsername) {\n      return this.githubUsername;\n    }\n    const githubUsername = await this.fetchGithubUsername();\n    if (githubUsername) {\n      return githubUsername;\n    }\n  }\n\n  async fetchGithubUsername() {\n    try {\n      const user = await this.github.getUser();\n      if (user) {\n        const profile = await user.getProfile();\n        if (profile) {\n          return profile.data.login;\n        }\n      }\n    } catch (e) {\n      return null;\n    }\n  }\n\n  async list(repoFullName) {\n    /*\n    Lists files in a github repository.\n    If no argument provided, assumes OpenDBC source repo\n    (commaai/opendbc)\n    */\n\n    let repo;\n    if (repoFullName === undefined) {\n      repo = this.sourceRepo;\n    } else {\n      const [username, repoName] = repoFullName.split('/');\n      repo = this.github.getRepo(username, repoName);\n    }\n    try {\n      const response = await repo.getContents('master', '');\n\n      return response.data.map((content) => content.path);\n    } catch (e) {\n      return [];\n    }\n  }\n\n  async getDbcContents(dbcPath, repoFullName) {\n    let repo;\n    if (repoFullName === undefined) {\n      repo = this.sourceRepo;\n    } else {\n      const [username, repoName] = repoFullName.split('/');\n      repo = this.github.getRepo(username, repoName);\n    }\n\n    const fileContents = await repo.getContents('master', dbcPath);\n\n    const rawContentsUrl = fileContents.data.download_url;\n\n    const resp = await fetch(rawContentsUrl, { cache: 'no-cache' });\n\n    return resp.text();\n  }\n\n  repoSourceIsOpenDbc(repoDetails) {\n    return (\n      repoDetails.source && repoDetails.source.full_name === OPENDBC_SOURCE_REPO\n    );\n  }\n\n  async getUserOpenDbcFork() {\n    const githubUsername = await this.getGithubUsername();\n    if (!githubUsername) return null;\n\n    const openDbcFork = this.github.getRepo(githubUsername, 'opendbc');\n    const repoDetailResp = await openDbcFork.getDetails();\n    const repoDetails = repoDetailResp.data;\n\n    if (this.repoSourceIsOpenDbc(repoDetails)) {\n      return repoDetails.full_name;\n    }\n    return null;\n  }\n\n  async fork() {\n    const forkResponse = await this.sourceRepo.fork();\n    if (forkResponse.status === 202) {\n      return true;\n    }\n    return false;\n  }\n\n  async commitFile(repoFullName, path, contents, commitMessage) {\n    /*\n      repo is of format username/reponame\n      authenciated user must have write access to repo\n      */\n    const [user, repoName] = repoFullName.split('/');\n    const repo = this.github.getRepo(user, repoName);\n\n    // get HEAD reference\n    const refResp = await repo.getRef('heads/master');\n    const ref = refResp.data;\n\n    // get HEAD commit sha\n    const headCommitResp = await repo.getCommit(ref.object.sha);\n    const headCommit = headCommitResp.data;\n\n    // get HEAD tree\n    const headTreeResp = await repo.getTree(headCommit.tree.sha);\n    const headTree = headTreeResp.data;\n\n    // create new tree\n    const tree = [\n      {\n        mode: '100644',\n        path,\n        type: 'blob',\n        content: contents\n      }\n    ];\n\n    const createTreeResp = await repo.createTree(tree, headTree.sha);\n    const createdTree = createTreeResp.data;\n\n    // commit\n    const commitResp = await repo.commit(\n      headCommit.sha,\n      createdTree.sha,\n      commitMessage || 'OpenDBC updates'\n    );\n    const commit = commitResp.data;\n\n    // update HEAD\n    const updateHeadResp = await repo.updateHead(\n      'heads/master',\n      commit.sha,\n      false\n    );\n\n    return updateHeadResp.status === 200;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}