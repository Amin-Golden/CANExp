{"ast":null,"code":"'use strict';\n/* @flow */\n\n/**\n * Split an array into chunks of a specified size. This function\n * has the same behavior as [PHP's array_chunk](http://php.net/manual/en/function.array-chunk.php)\n * function, and thus will insert smaller-sized chunks at the end if\n * the input size is not divisible by the chunk size.\n *\n * `x` is expected to be an array, and `chunkSize` a number.\n * The `x` array can contain any kind of data.\n *\n * @param {Array} x a sample\n * @param {number} chunkSize size of each output array. must be a positive integer\n * @returns {Array<Array>} a chunked array\n * @throws {Error} if chunk size is less than 1 or not an integer\n * @example\n * chunk([1, 2, 3, 4, 5, 6], 2);\n * // => [[1, 2], [3, 4], [5, 6]]\n */\n\nfunction chunk(x\n/*:Array<any>*/\n, chunkSize\n/*:number*/\n)\n/*:?Array<Array<any>>*/\n{\n  // a list of result chunks, as arrays in an array\n  var output = []; // `chunkSize` must be zero or higher - otherwise the loop below,\n  // in which we call `start += chunkSize`, will loop infinitely.\n  // So, we'll detect and throw in that case to indicate\n  // invalid input.\n\n  if (chunkSize < 1) {\n    throw new Error('chunk size must be a positive number');\n  }\n\n  if (Math.floor(chunkSize) !== chunkSize) {\n    throw new Error('chunk size must be an integer');\n  } // `start` is the index at which `.slice` will start selecting\n  // new array elements\n\n\n  for (var start = 0; start < x.length; start += chunkSize) {\n    // for each chunk, slice that part of the array and add it\n    // to the output. The `.slice` function does not change\n    // the original array.\n    output.push(x.slice(start, start + chunkSize));\n  }\n\n  return output;\n}\n\nmodule.exports = chunk;","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/simple-statistics/src/chunk.js"],"names":["chunk","x","chunkSize","output","Error","Math","floor","start","length","push","slice","module","exports"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,KAAT,CAAeC;AAAC;AAAhB,EAAiCC;AAAS;AAA1C;AAAsD;AAAwB;AAE1E;AACA,MAAIC,MAAM,GAAG,EAAb,CAH0E,CAK1E;AACA;AACA;AACA;;AACA,MAAID,SAAS,GAAG,CAAhB,EAAmB;AACf,UAAM,IAAIE,KAAJ,CAAU,sCAAV,CAAN;AACH;;AAED,MAAIC,IAAI,CAACC,KAAL,CAAWJ,SAAX,MAA0BA,SAA9B,EAAyC;AACrC,UAAM,IAAIE,KAAJ,CAAU,+BAAV,CAAN;AACH,GAfyE,CAiB1E;AACA;;;AACA,OAAK,IAAIG,KAAK,GAAG,CAAjB,EAAoBA,KAAK,GAAGN,CAAC,CAACO,MAA9B,EAAsCD,KAAK,IAAIL,SAA/C,EAA0D;AAEtD;AACA;AACA;AACAC,IAAAA,MAAM,CAACM,IAAP,CAAYR,CAAC,CAACS,KAAF,CAAQH,KAAR,EAAeA,KAAK,GAAGL,SAAvB,CAAZ;AACH;;AACD,SAAOC,MAAP;AACH;;AAEDQ,MAAM,CAACC,OAAP,GAAiBZ,KAAjB","sourcesContent":["'use strict';\n/* @flow */\n\n/**\n * Split an array into chunks of a specified size. This function\n * has the same behavior as [PHP's array_chunk](http://php.net/manual/en/function.array-chunk.php)\n * function, and thus will insert smaller-sized chunks at the end if\n * the input size is not divisible by the chunk size.\n *\n * `x` is expected to be an array, and `chunkSize` a number.\n * The `x` array can contain any kind of data.\n *\n * @param {Array} x a sample\n * @param {number} chunkSize size of each output array. must be a positive integer\n * @returns {Array<Array>} a chunked array\n * @throws {Error} if chunk size is less than 1 or not an integer\n * @example\n * chunk([1, 2, 3, 4, 5, 6], 2);\n * // => [[1, 2], [3, 4], [5, 6]]\n */\nfunction chunk(x/*:Array<any>*/, chunkSize/*:number*/)/*:?Array<Array<any>>*/ {\n\n    // a list of result chunks, as arrays in an array\n    var output = [];\n\n    // `chunkSize` must be zero or higher - otherwise the loop below,\n    // in which we call `start += chunkSize`, will loop infinitely.\n    // So, we'll detect and throw in that case to indicate\n    // invalid input.\n    if (chunkSize < 1) {\n        throw new Error('chunk size must be a positive number');\n    }\n\n    if (Math.floor(chunkSize) !== chunkSize) {\n        throw new Error('chunk size must be an integer');\n    }\n\n    // `start` is the index at which `.slice` will start selecting\n    // new array elements\n    for (var start = 0; start < x.length; start += chunkSize) {\n\n        // for each chunk, slice that part of the array and add it\n        // to the output. The `.slice` function does not change\n        // the original array.\n        output.push(x.slice(start, start + chunkSize));\n    }\n    return output;\n}\n\nmodule.exports = chunk;\n"]},"metadata":{},"sourceType":"script"}