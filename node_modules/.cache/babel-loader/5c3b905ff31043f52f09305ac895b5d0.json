{"ast":null,"code":"import { raw as RawDataApi, request as Request } from '@commaai/comma-api';\nimport CommaAuth from '@commaai/my-comma-auth';\nimport request from 'simple-get';\nconst urlStore = {};\nlet initPromise;\n\nfunction ensureInit() {\n  if (!initPromise) {\n    initPromise = CommaAuth.init().then(token => {\n      Request.configure(token);\n      return Promise.resolve();\n    });\n  }\n\n  return initPromise;\n}\n\nexport async function getLogPart(logUrl) {\n  return new Promise(async (resolve, reject) => {\n    request(logUrl, (err, res) => {\n      if (err) {\n        return reject(err);\n      }\n\n      resolve(res);\n    });\n  });\n}","map":{"version":3,"sources":["/home/amax/Autoro/cabana/src/api/rlog.js"],"names":["raw","RawDataApi","request","Request","CommaAuth","urlStore","initPromise","ensureInit","init","then","token","configure","Promise","resolve","getLogPart","logUrl","reject","err","res"],"mappings":"AAAA,SAASA,GAAG,IAAIC,UAAhB,EAA4BC,OAAO,IAAIC,OAAvC,QAAsD,oBAAtD;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOF,OAAP,MAAoB,YAApB;AAEA,MAAMG,QAAQ,GAAG,EAAjB;AAEA,IAAIC,WAAJ;;AACA,SAASC,UAAT,GAAsB;AACpB,MAAI,CAACD,WAAL,EAAkB;AAChBA,IAAAA,WAAW,GAAGF,SAAS,CAACI,IAAV,GAAiBC,IAAjB,CAAuBC,KAAD,IAAW;AAC7CP,MAAAA,OAAO,CAACQ,SAAR,CAAkBD,KAAlB;AACA,aAAOE,OAAO,CAACC,OAAR,EAAP;AACD,KAHa,CAAd;AAID;;AACD,SAAOP,WAAP;AACD;;AAED,OAAO,eAAeQ,UAAf,CAA0BC,MAA1B,EAAkC;AACvC,SAAO,IAAIH,OAAJ,CAAY,OAAOC,OAAP,EAAgBG,MAAhB,KAA2B;AAC5Cd,IAAAA,OAAO,CAACa,MAAD,EAAS,CAACE,GAAD,EAAMC,GAAN,KAAc;AAC5B,UAAID,GAAJ,EAAS;AACP,eAAOD,MAAM,CAACC,GAAD,CAAb;AACD;;AACDJ,MAAAA,OAAO,CAACK,GAAD,CAAP;AACD,KALM,CAAP;AAMD,GAPM,CAAP;AAQD","sourcesContent":["import { raw as RawDataApi, request as Request } from '@commaai/comma-api';\nimport CommaAuth from '@commaai/my-comma-auth';\nimport request from 'simple-get';\n\nconst urlStore = {};\n\nlet initPromise;\nfunction ensureInit() {\n  if (!initPromise) {\n    initPromise = CommaAuth.init().then((token) => {\n      Request.configure(token);\n      return Promise.resolve();\n    });\n  }\n  return initPromise;\n}\n\nexport async function getLogPart(logUrl) {\n  return new Promise(async (resolve, reject) => {\n    request(logUrl, (err, res) => {\n      if (err) {\n        return reject(err);\n      }\n      resolve(res);\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}