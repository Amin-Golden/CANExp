{"ast":null,"code":"'use strict';\n/* @flow */\n\nvar numericSort = require('./numeric_sort'),\n    modeSorted = require('./mode_sorted');\n/**\n * The [mode](http://bit.ly/W5K4Yt) is the number that appears in a list the highest number of times.\n * There can be multiple modes in a list: in the event of a tie, this\n * algorithm will return the most recently seen mode.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs on `O(nlog(n))` because it needs to sort the array internally\n * before running an `O(n)` search to find the mode.\n *\n * @param {Array<number>} x input\n * @returns {number} mode\n * @example\n * mode([0, 0, 1]); // => 0\n */\n\n\nfunction mode(x\n/*: Array<number> */\n)\n/*:number*/\n{\n  // Sorting the array lets us iterate through it below and be sure\n  // that every time we see a new number it's new and we'll never\n  // see the same number twice\n  return modeSorted(numericSort(x));\n}\n\nmodule.exports = mode;","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/simple-statistics/src/mode.js"],"names":["numericSort","require","modeSorted","mode","x","module","exports"],"mappings":"AAAA;AACA;;AAEA,IAAIA,WAAW,GAAGC,OAAO,CAAC,gBAAD,CAAzB;AAAA,IACIC,UAAU,GAAGD,OAAO,CAAC,eAAD,CADxB;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,IAAT,CAAcC;AAAE;AAAhB;AAAqC;AAAY;AAC7C;AACA;AACA;AACA,SAAOF,UAAU,CAACF,WAAW,CAACI,CAAD,CAAZ,CAAjB;AACH;;AAEDC,MAAM,CAACC,OAAP,GAAiBH,IAAjB","sourcesContent":["'use strict';\n/* @flow */\n\nvar numericSort = require('./numeric_sort'),\n    modeSorted = require('./mode_sorted');\n\n/**\n * The [mode](http://bit.ly/W5K4Yt) is the number that appears in a list the highest number of times.\n * There can be multiple modes in a list: in the event of a tie, this\n * algorithm will return the most recently seen mode.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs on `O(nlog(n))` because it needs to sort the array internally\n * before running an `O(n)` search to find the mode.\n *\n * @param {Array<number>} x input\n * @returns {number} mode\n * @example\n * mode([0, 0, 1]); // => 0\n */\nfunction mode(x /*: Array<number> */)/*:number*/ {\n    // Sorting the array lets us iterate through it below and be sure\n    // that every time we see a new number it's new and we'll never\n    // see the same number twice\n    return modeSorted(numericSort(x));\n}\n\nmodule.exports = mode;\n"]},"metadata":{},"sourceType":"script"}