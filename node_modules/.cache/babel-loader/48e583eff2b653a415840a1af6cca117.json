{"ast":null,"code":"var _jsxFileName = \"/home/amax/Autoro/cabana/src/components/SignalLegendEntry/MapField.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Field from './Field';\nexport default class MapField extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      valid: true,\n      mapString: ''\n    };\n    this.onChange = this.onChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.componentDidUpdate({}, {});\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.isExpanded !== this.props.isExpanded) {\n      const entryPairs = Array.from(this.props.signalEdited.entries());\n      const mapString = entryPairs.reduce((str, _ref) => {\n        let [value, desc] = _ref;\n        return `${str + value} \"${desc}\" `;\n      }, '').trim();\n      this.setState({\n        mapString\n      });\n    }\n  }\n\n  onChange(ev) {\n    const mapString = ev.target.value;\n    this.setState({\n      mapString\n    });\n\n    if ((mapString.split('\"').length - 1) % 2 !== 0) {\n      this.setState({\n        valid: false\n      });\n      return;\n    }\n\n    let splitted = Array.from(mapString.matchAll(/[^\\s\"]+|\"([^\"]*)\"/g));\n\n    if (splitted.length % 2 !== 0) {\n      this.setState({\n        valid: false\n      });\n      return;\n    }\n\n    splitted = splitted.map(_ref2 => {\n      let [match, group] = _ref2;\n      return group || match;\n    });\n    const res = new Map();\n\n    for (let i = 0; i < splitted.length; i += 2) {\n      res.set(splitted[i], splitted[i + 1]);\n    }\n\n    this.setState({\n      valid: true\n    });\n    this.props.updateField(this.props.fieldSpec, res);\n  }\n\n  render() {\n    const {\n      fieldSpec,\n      signal,\n      isExpanded\n    } = this.props;\n    const htmlFor = `${signal.name}_${fieldSpec.field}`;\n    let valueCol;\n\n    if (isExpanded) {\n      valueCol = /*#__PURE__*/React.createElement(\"input\", {\n        id: htmlFor,\n        type: \"text\",\n        value: this.state.mapString,\n        onChange: this.onChange,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 18\n        }\n      });\n    } else {\n      valueCol = /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 18\n        }\n      }, signal[fieldSpec.field]);\n    }\n\n    return /*#__PURE__*/React.createElement(Field, {\n      title: typeof fieldSpec.title === 'function' ? fieldSpec.title(signal) : fieldSpec.title,\n      htmlFor: htmlFor,\n      valid: this.props.valid && this.state.valid,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 7\n      }\n    }, valueCol);\n  }\n\n}\nMapField.propTypes = {\n  fieldSpec: PropTypes.any,\n  signal: PropTypes.any,\n  isExpanded: PropTypes.any,\n  signalEdited: PropTypes.any,\n  updateField: PropTypes.any,\n  valid: PropTypes.any\n};","map":{"version":3,"sources":["/home/amax/Autoro/cabana/src/components/SignalLegendEntry/MapField.js"],"names":["React","Component","PropTypes","Field","MapField","constructor","props","state","valid","mapString","onChange","bind","componentDidMount","componentDidUpdate","prevProps","isExpanded","entryPairs","Array","from","signalEdited","entries","reduce","str","value","desc","trim","setState","ev","target","split","length","splitted","matchAll","map","match","group","res","Map","i","set","updateField","fieldSpec","render","signal","htmlFor","name","field","valueCol","title","propTypes","any"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Field from './Field';\n\nexport default class MapField extends Component {\n  static propTypes = {\n    fieldSpec: PropTypes.any,\n    signal: PropTypes.any,\n    isExpanded: PropTypes.any,\n    signalEdited: PropTypes.any,\n    updateField: PropTypes.any,\n    valid: PropTypes.any,\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      valid: true,\n      mapString: '',\n    };\n\n    this.onChange = this.onChange.bind(this);\n  }\n\n  componentDidMount() {\n    this.componentDidUpdate({}, {});\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.isExpanded !== this.props.isExpanded) {\n      const entryPairs = Array.from(this.props.signalEdited.entries());\n      const mapString = entryPairs.reduce((str, [value, desc]) => `${str + value} \"${desc}\" `, '').trim();\n      this.setState({ mapString });\n    }\n  }\n\n  onChange(ev) {\n    const mapString = ev.target.value;\n    this.setState({ mapString });\n\n    if ((mapString.split('\"').length - 1) % 2 !== 0) {\n      this.setState({ valid: false });\n      return;\n    }\n    let splitted = Array.from(mapString.matchAll(/[^\\s\"]+|\"([^\"]*)\"/g));\n    if (splitted.length % 2 !== 0) {\n      this.setState({ valid: false });\n      return;\n    }\n\n    splitted = splitted.map(([match, group]) => group || match);\n    const res = new Map();\n    for (let i = 0; i < splitted.length; i += 2) {\n      res.set(splitted[i], splitted[i+1]);\n    }\n\n    this.setState({ valid: true });\n    this.props.updateField(this.props.fieldSpec, res);\n  }\n\n  render() {\n    const { fieldSpec, signal, isExpanded } = this.props;\n\n    const htmlFor = `${signal.name}_${fieldSpec.field}`;\n    let valueCol;\n\n    if (isExpanded) {\n      valueCol = <input id={htmlFor} type=\"text\" value={this.state.mapString} onChange={this.onChange} />;\n    } else {\n      valueCol = <span>{signal[fieldSpec.field]}</span>;\n    }\n\n    return (\n      <Field title={typeof fieldSpec.title === 'function' ? fieldSpec.title(signal) : fieldSpec.title}\n        htmlFor={htmlFor} valid={this.props.valid && this.state.valid}>\n        {valueCol}\n      </Field>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}