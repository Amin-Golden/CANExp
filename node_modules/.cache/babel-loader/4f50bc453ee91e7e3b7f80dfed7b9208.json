{"ast":null,"code":"'use strict';\n/* @flow */\n\n/**\n * A [Factorial](https://en.wikipedia.org/wiki/Factorial), usually written n!, is the product of all positive\n * integers less than or equal to n. Often factorial is implemented\n * recursively, but this iterative approach is significantly faster\n * and simpler.\n *\n * @param {number} n input, must be an integer number 1 or greater\n * @returns {number} factorial: n!\n * @throws {Error} if n is less than 0 or not an integer\n * @example\n * factorial(5); // => 120\n */\n\nfunction factorial(n\n/*: number */\n)\n/*: number */\n{\n  // factorial is mathematically undefined for negative numbers\n  if (n < 0) {\n    throw new Error('factorial requires a non-negative value');\n  }\n\n  if (Math.floor(n) !== n) {\n    throw new Error('factorial requires an integer input');\n  } // typically you'll expand the factorial function going down, like\n  // 5! = 5 * 4 * 3 * 2 * 1. This is going in the opposite direction,\n  // counting from 2 up to the number in question, and since anything\n  // multiplied by 1 is itself, the loop only needs to start at 2.\n\n\n  var accumulator = 1;\n\n  for (var i = 2; i <= n; i++) {\n    // for each number up to and including the number `n`, multiply\n    // the accumulator my that number.\n    accumulator *= i;\n  }\n\n  return accumulator;\n}\n\nmodule.exports = factorial;","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/simple-statistics/src/factorial.js"],"names":["factorial","n","Error","Math","floor","accumulator","i","module","exports"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,SAAT,CAAmBC;AAAE;AAArB;AAAmC;AAAc;AAE7C;AACA,MAAIA,CAAC,GAAG,CAAR,EAAW;AACP,UAAM,IAAIC,KAAJ,CAAU,yCAAV,CAAN;AACH;;AAED,MAAIC,IAAI,CAACC,KAAL,CAAWH,CAAX,MAAkBA,CAAtB,EAAyB;AACrB,UAAM,IAAIC,KAAJ,CAAU,qCAAV,CAAN;AACH,GAT4C,CAW7C;AACA;AACA;AACA;;;AACA,MAAIG,WAAW,GAAG,CAAlB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,IAAIL,CAArB,EAAwBK,CAAC,EAAzB,EAA6B;AACzB;AACA;AACAD,IAAAA,WAAW,IAAIC,CAAf;AACH;;AACD,SAAOD,WAAP;AACH;;AAEDE,MAAM,CAACC,OAAP,GAAiBR,SAAjB","sourcesContent":["'use strict';\n/* @flow */\n\n/**\n * A [Factorial](https://en.wikipedia.org/wiki/Factorial), usually written n!, is the product of all positive\n * integers less than or equal to n. Often factorial is implemented\n * recursively, but this iterative approach is significantly faster\n * and simpler.\n *\n * @param {number} n input, must be an integer number 1 or greater\n * @returns {number} factorial: n!\n * @throws {Error} if n is less than 0 or not an integer\n * @example\n * factorial(5); // => 120\n */\nfunction factorial(n /*: number */)/*: number */ {\n\n    // factorial is mathematically undefined for negative numbers\n    if (n < 0) {\n        throw new Error('factorial requires a non-negative value');\n    }\n\n    if (Math.floor(n) !== n) {\n        throw new Error('factorial requires an integer input');\n    }\n\n    // typically you'll expand the factorial function going down, like\n    // 5! = 5 * 4 * 3 * 2 * 1. This is going in the opposite direction,\n    // counting from 2 up to the number in question, and since anything\n    // multiplied by 1 is itself, the loop only needs to start at 2.\n    var accumulator = 1;\n    for (var i = 2; i <= n; i++) {\n        // for each number up to and including the number `n`, multiply\n        // the accumulator my that number.\n        accumulator *= i;\n    }\n    return accumulator;\n}\n\nmodule.exports = factorial;\n"]},"metadata":{},"sourceType":"script"}