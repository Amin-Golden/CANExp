{"ast":null,"code":"/* @flow */\n'use strict'; // # simple-statistics\n//\n// A simple, literate statistics system.\n\nvar ss = module.exports = {}; // Linear Regression\n\nss.linearRegression = require('./src/linear_regression');\nss.linearRegressionLine = require('./src/linear_regression_line');\nss.standardDeviation = require('./src/standard_deviation');\nss.rSquared = require('./src/r_squared');\nss.mode = require('./src/mode');\nss.modeFast = require('./src/mode_fast');\nss.modeSorted = require('./src/mode_sorted');\nss.min = require('./src/min');\nss.max = require('./src/max');\nss.minSorted = require('./src/min_sorted');\nss.maxSorted = require('./src/max_sorted');\nss.sum = require('./src/sum');\nss.sumSimple = require('./src/sum_simple');\nss.product = require('./src/product');\nss.quantile = require('./src/quantile');\nss.quantileSorted = require('./src/quantile_sorted');\nss.interquartileRange = ss.iqr = require('./src/interquartile_range');\nss.medianAbsoluteDeviation = ss.mad = require('./src/median_absolute_deviation');\nss.chunk = require('./src/chunk');\nss.sampleWithReplacement = require('./src/sample_with_replacement');\nss.shuffle = require('./src/shuffle');\nss.shuffleInPlace = require('./src/shuffle_in_place');\nss.sample = require('./src/sample');\nss.ckmeans = require('./src/ckmeans');\nss.uniqueCountSorted = require('./src/unique_count_sorted');\nss.sumNthPowerDeviations = require('./src/sum_nth_power_deviations');\nss.equalIntervalBreaks = require('./src/equal_interval_breaks'); // sample statistics\n\nss.sampleCovariance = require('./src/sample_covariance');\nss.sampleCorrelation = require('./src/sample_correlation');\nss.sampleVariance = require('./src/sample_variance');\nss.sampleStandardDeviation = require('./src/sample_standard_deviation');\nss.sampleSkewness = require('./src/sample_skewness');\nss.sampleKurtosis = require('./src/sample_kurtosis'); // combinatorics\n\nss.permutationsHeap = require('./src/permutations_heap');\nss.combinations = require('./src/combinations');\nss.combinationsReplacement = require('./src/combinations_replacement'); // measures of centrality\n\nss.addToMean = require('./src/add_to_mean');\nss.combineMeans = require('./src/combine_means');\nss.combineVariances = require('./src/combine_variances');\nss.geometricMean = require('./src/geometric_mean');\nss.harmonicMean = require('./src/harmonic_mean');\nss.mean = ss.average = require('./src/mean');\nss.median = require('./src/median');\nss.medianSorted = require('./src/median_sorted');\nss.subtractFromMean = require('./src/subtract_from_mean');\nss.rootMeanSquare = ss.rms = require('./src/root_mean_square');\nss.variance = require('./src/variance');\nss.tTest = require('./src/t_test');\nss.tTestTwoSample = require('./src/t_test_two_sample'); // ss.jenks = require('./src/jenks');\n// Classifiers\n\nss.BayesianClassifier = ss.bayesian = require('./src/bayesian_classifier');\nss.PerceptronModel = ss.perceptron = require('./src/perceptron'); // Distribution-related methods\n\nss.epsilon = require('./src/epsilon'); // We make Îµ available to the test suite.\n\nss.factorial = require('./src/factorial');\nss.bernoulliDistribution = require('./src/bernoulli_distribution');\nss.binomialDistribution = require('./src/binomial_distribution');\nss.poissonDistribution = require('./src/poisson_distribution');\nss.chiSquaredGoodnessOfFit = require('./src/chi_squared_goodness_of_fit'); // Normal distribution\n\nss.zScore = require('./src/z_score');\nss.cumulativeStdNormalProbability = require('./src/cumulative_std_normal_probability');\nss.standardNormalTable = require('./src/standard_normal_table');\nss.errorFunction = ss.erf = require('./src/error_function');\nss.inverseErrorFunction = require('./src/inverse_error_function');\nss.probit = require('./src/probit'); // Root-finding methods\n\nss.bisect = require('./src/bisect');","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/simple-statistics/index.js"],"names":["ss","module","exports","linearRegression","require","linearRegressionLine","standardDeviation","rSquared","mode","modeFast","modeSorted","min","max","minSorted","maxSorted","sum","sumSimple","product","quantile","quantileSorted","interquartileRange","iqr","medianAbsoluteDeviation","mad","chunk","sampleWithReplacement","shuffle","shuffleInPlace","sample","ckmeans","uniqueCountSorted","sumNthPowerDeviations","equalIntervalBreaks","sampleCovariance","sampleCorrelation","sampleVariance","sampleStandardDeviation","sampleSkewness","sampleKurtosis","permutationsHeap","combinations","combinationsReplacement","addToMean","combineMeans","combineVariances","geometricMean","harmonicMean","mean","average","median","medianSorted","subtractFromMean","rootMeanSquare","rms","variance","tTest","tTestTwoSample","BayesianClassifier","bayesian","PerceptronModel","perceptron","epsilon","factorial","bernoulliDistribution","binomialDistribution","poissonDistribution","chiSquaredGoodnessOfFit","zScore","cumulativeStdNormalProbability","standardNormalTable","errorFunction","erf","inverseErrorFunction","probit","bisect"],"mappings":"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","sourcesContent":["/* @flow */\n'use strict';\n\n// # simple-statistics\n//\n// A simple, literate statistics system.\n\nvar ss = module.exports = {};\n\n// Linear Regression\nss.linearRegression = require('./src/linear_regression');\nss.linearRegressionLine = require('./src/linear_regression_line');\nss.standardDeviation = require('./src/standard_deviation');\nss.rSquared = require('./src/r_squared');\nss.mode = require('./src/mode');\nss.modeFast = require('./src/mode_fast');\nss.modeSorted = require('./src/mode_sorted');\nss.min = require('./src/min');\nss.max = require('./src/max');\nss.minSorted = require('./src/min_sorted');\nss.maxSorted = require('./src/max_sorted');\nss.sum = require('./src/sum');\nss.sumSimple = require('./src/sum_simple');\nss.product = require('./src/product');\nss.quantile = require('./src/quantile');\nss.quantileSorted = require('./src/quantile_sorted');\nss.interquartileRange = ss.iqr = require('./src/interquartile_range');\nss.medianAbsoluteDeviation = ss.mad = require('./src/median_absolute_deviation');\nss.chunk = require('./src/chunk');\nss.sampleWithReplacement = require('./src/sample_with_replacement');\nss.shuffle = require('./src/shuffle');\nss.shuffleInPlace = require('./src/shuffle_in_place');\nss.sample = require('./src/sample');\nss.ckmeans = require('./src/ckmeans');\nss.uniqueCountSorted = require('./src/unique_count_sorted');\nss.sumNthPowerDeviations = require('./src/sum_nth_power_deviations');\nss.equalIntervalBreaks = require('./src/equal_interval_breaks');\n\n// sample statistics\nss.sampleCovariance = require('./src/sample_covariance');\nss.sampleCorrelation = require('./src/sample_correlation');\nss.sampleVariance = require('./src/sample_variance');\nss.sampleStandardDeviation = require('./src/sample_standard_deviation');\nss.sampleSkewness = require('./src/sample_skewness');\nss.sampleKurtosis = require('./src/sample_kurtosis');\n\n// combinatorics\nss.permutationsHeap = require('./src/permutations_heap');\nss.combinations = require('./src/combinations');\nss.combinationsReplacement = require('./src/combinations_replacement');\n\n// measures of centrality\nss.addToMean = require('./src/add_to_mean');\nss.combineMeans = require('./src/combine_means');\nss.combineVariances = require('./src/combine_variances');\nss.geometricMean = require('./src/geometric_mean');\nss.harmonicMean = require('./src/harmonic_mean');\nss.mean = ss.average = require('./src/mean');\nss.median = require('./src/median');\nss.medianSorted = require('./src/median_sorted');\nss.subtractFromMean = require('./src/subtract_from_mean');\n\nss.rootMeanSquare = ss.rms = require('./src/root_mean_square');\nss.variance = require('./src/variance');\nss.tTest = require('./src/t_test');\nss.tTestTwoSample = require('./src/t_test_two_sample');\n// ss.jenks = require('./src/jenks');\n\n// Classifiers\nss.BayesianClassifier = ss.bayesian = require('./src/bayesian_classifier');\nss.PerceptronModel = ss.perceptron = require('./src/perceptron');\n\n// Distribution-related methods\nss.epsilon = require('./src/epsilon'); // We make Îµ available to the test suite.\nss.factorial = require('./src/factorial');\nss.bernoulliDistribution = require('./src/bernoulli_distribution');\nss.binomialDistribution = require('./src/binomial_distribution');\nss.poissonDistribution = require('./src/poisson_distribution');\nss.chiSquaredGoodnessOfFit = require('./src/chi_squared_goodness_of_fit');\n\n// Normal distribution\nss.zScore = require('./src/z_score');\nss.cumulativeStdNormalProbability = require('./src/cumulative_std_normal_probability');\nss.standardNormalTable = require('./src/standard_normal_table');\nss.errorFunction = ss.erf = require('./src/error_function');\nss.inverseErrorFunction = require('./src/inverse_error_function');\nss.probit = require('./src/probit');\n\n// Root-finding methods\nss.bisect = require('./src/bisect');\n"]},"metadata":{},"sourceType":"script"}