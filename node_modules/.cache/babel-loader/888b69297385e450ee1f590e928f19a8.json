{"ast":null,"code":"'use strict';\n/* @flow */\n\nvar sign = require('./sign');\n/**\n * [Bisection method](https://en.wikipedia.org/wiki/Bisection_method) is a root-finding \n * method that repeatedly bisects an interval to find the root.\n * \n * This function returns a numerical approximation to the exact value.\n * \n * @param {Function} func input function\n * @param {Number} start - start of interval\n * @param {Number} end - end of interval\n * @param {Number} maxIterations - the maximum number of iterations\n * @param {Number} errorTolerance - the error tolerance\n * @returns {Number} estimated root value\n * @throws {TypeError} Argument func must be a function\n * \n * @example\n * bisect(Math.cos,0,4,100,0.003); // => 1.572265625\n */\n\n\nfunction bisect(func\n/*: (x: any) => number */\n, start\n/*: number */\n, end\n/*: number */\n, maxIterations\n/*: number */\n, errorTolerance\n/*: number */\n)\n/*:number*/\n{\n  if (typeof func !== 'function') throw new TypeError('func must be a function');\n\n  for (var i = 0; i < maxIterations; i++) {\n    var output = (start + end) / 2;\n\n    if (func(output) === 0 || Math.abs((end - start) / 2) < errorTolerance) {\n      return output;\n    }\n\n    if (sign(func(output)) === sign(func(start))) {\n      start = output;\n    } else {\n      end = output;\n    }\n  }\n\n  throw new Error('maximum number of iterations exceeded');\n}\n\nmodule.exports = bisect;","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/simple-statistics/src/bisect.js"],"names":["sign","require","bisect","func","start","end","maxIterations","errorTolerance","TypeError","i","output","Math","abs","Error","module","exports"],"mappings":"AAAA;AACA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,MAAT,CACIC;AAAI;AADR,EAEIC;AAAK;AAFT,EAGIC;AAAG;AAHP,EAIIC;AAAa;AAJjB,EAKIC;AAAc;AALlB;AAKgC;AAAY;AAExC,MAAI,OAAOJ,IAAP,KAAgB,UAApB,EAAgC,MAAM,IAAIK,SAAJ,CAAc,yBAAd,CAAN;;AAEhC,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,aAApB,EAAmCG,CAAC,EAApC,EAAwC;AACpC,QAAIC,MAAM,GAAG,CAACN,KAAK,GAAGC,GAAT,IAAgB,CAA7B;;AAEA,QAAIF,IAAI,CAACO,MAAD,CAAJ,KAAiB,CAAjB,IAAsBC,IAAI,CAACC,GAAL,CAAS,CAACP,GAAG,GAAGD,KAAP,IAAgB,CAAzB,IAA8BG,cAAxD,EAAwE;AACpE,aAAOG,MAAP;AACH;;AAED,QAAIV,IAAI,CAACG,IAAI,CAACO,MAAD,CAAL,CAAJ,KAAuBV,IAAI,CAACG,IAAI,CAACC,KAAD,CAAL,CAA/B,EAA8C;AAC1CA,MAAAA,KAAK,GAAGM,MAAR;AACH,KAFD,MAEO;AACHL,MAAAA,GAAG,GAAGK,MAAN;AACH;AACJ;;AAED,QAAM,IAAIG,KAAJ,CAAU,uCAAV,CAAN;AACH;;AAEDC,MAAM,CAACC,OAAP,GAAiBb,MAAjB","sourcesContent":["'use strict';\n/* @flow */\n\nvar sign = require('./sign');\n/**\n * [Bisection method](https://en.wikipedia.org/wiki/Bisection_method) is a root-finding \n * method that repeatedly bisects an interval to find the root.\n * \n * This function returns a numerical approximation to the exact value.\n * \n * @param {Function} func input function\n * @param {Number} start - start of interval\n * @param {Number} end - end of interval\n * @param {Number} maxIterations - the maximum number of iterations\n * @param {Number} errorTolerance - the error tolerance\n * @returns {Number} estimated root value\n * @throws {TypeError} Argument func must be a function\n * \n * @example\n * bisect(Math.cos,0,4,100,0.003); // => 1.572265625\n */\nfunction bisect(\n    func/*: (x: any) => number */,\n    start/*: number */,\n    end/*: number */,\n    maxIterations/*: number */,\n    errorTolerance/*: number */)/*:number*/ {\n\n    if (typeof func !== 'function') throw new TypeError('func must be a function');\n    \n    for (var i = 0; i < maxIterations; i++) {\n        var output = (start + end) / 2;\n\n        if (func(output) === 0 || Math.abs((end - start) / 2) < errorTolerance) {\n            return output;\n        }\n\n        if (sign(func(output)) === sign(func(start))) {\n            start = output;\n        } else {\n            end = output;\n        }\n    }\n    \n    throw new Error('maximum number of iterations exceeded');\n}\n\nmodule.exports = bisect;\n"]},"metadata":{},"sourceType":"script"}