{"ast":null,"code":"var is = require('./is');\n\nvar delegate = require('delegate');\n/**\n * Validates all params and calls the right\n * listener function based on its target type.\n *\n * @param {String|HTMLElement|HTMLCollection|NodeList} target\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\n\n\nfunction listen(target, type, callback) {\n  if (!target && !type && !callback) {\n    throw new Error('Missing required arguments');\n  }\n\n  if (!is.string(type)) {\n    throw new TypeError('Second argument must be a String');\n  }\n\n  if (!is.fn(callback)) {\n    throw new TypeError('Third argument must be a Function');\n  }\n\n  if (is.node(target)) {\n    return listenNode(target, type, callback);\n  } else if (is.nodeList(target)) {\n    return listenNodeList(target, type, callback);\n  } else if (is.string(target)) {\n    return listenSelector(target, type, callback);\n  } else {\n    throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');\n  }\n}\n/**\n * Adds an event listener to a HTML element\n * and returns a remove listener function.\n *\n * @param {HTMLElement} node\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\n\n\nfunction listenNode(node, type, callback) {\n  node.addEventListener(type, callback);\n  return {\n    destroy: function () {\n      node.removeEventListener(type, callback);\n    }\n  };\n}\n/**\n * Add an event listener to a list of HTML elements\n * and returns a remove listener function.\n *\n * @param {NodeList|HTMLCollection} nodeList\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\n\n\nfunction listenNodeList(nodeList, type, callback) {\n  Array.prototype.forEach.call(nodeList, function (node) {\n    node.addEventListener(type, callback);\n  });\n  return {\n    destroy: function () {\n      Array.prototype.forEach.call(nodeList, function (node) {\n        node.removeEventListener(type, callback);\n      });\n    }\n  };\n}\n/**\n * Add an event listener to a selector\n * and returns a remove listener function.\n *\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\n\n\nfunction listenSelector(selector, type, callback) {\n  return delegate(document.body, selector, type, callback);\n}\n\nmodule.exports = listen;","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/good-listener/src/listen.js"],"names":["is","require","delegate","listen","target","type","callback","Error","string","TypeError","fn","node","listenNode","nodeList","listenNodeList","listenSelector","addEventListener","destroy","removeEventListener","Array","prototype","forEach","call","selector","document","body","module","exports"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,MAAD,CAAhB;;AACA,IAAIC,QAAQ,GAAGD,OAAO,CAAC,UAAD,CAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,MAAT,CAAgBC,MAAhB,EAAwBC,IAAxB,EAA8BC,QAA9B,EAAwC;AACpC,MAAI,CAACF,MAAD,IAAW,CAACC,IAAZ,IAAoB,CAACC,QAAzB,EAAmC;AAC/B,UAAM,IAAIC,KAAJ,CAAU,4BAAV,CAAN;AACH;;AAED,MAAI,CAACP,EAAE,CAACQ,MAAH,CAAUH,IAAV,CAAL,EAAsB;AAClB,UAAM,IAAII,SAAJ,CAAc,kCAAd,CAAN;AACH;;AAED,MAAI,CAACT,EAAE,CAACU,EAAH,CAAMJ,QAAN,CAAL,EAAsB;AAClB,UAAM,IAAIG,SAAJ,CAAc,mCAAd,CAAN;AACH;;AAED,MAAIT,EAAE,CAACW,IAAH,CAAQP,MAAR,CAAJ,EAAqB;AACjB,WAAOQ,UAAU,CAACR,MAAD,EAASC,IAAT,EAAeC,QAAf,CAAjB;AACH,GAFD,MAGK,IAAIN,EAAE,CAACa,QAAH,CAAYT,MAAZ,CAAJ,EAAyB;AAC1B,WAAOU,cAAc,CAACV,MAAD,EAASC,IAAT,EAAeC,QAAf,CAArB;AACH,GAFI,MAGA,IAAIN,EAAE,CAACQ,MAAH,CAAUJ,MAAV,CAAJ,EAAuB;AACxB,WAAOW,cAAc,CAACX,MAAD,EAASC,IAAT,EAAeC,QAAf,CAArB;AACH,GAFI,MAGA;AACD,UAAM,IAAIG,SAAJ,CAAc,2EAAd,CAAN;AACH;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,UAAT,CAAoBD,IAApB,EAA0BN,IAA1B,EAAgCC,QAAhC,EAA0C;AACtCK,EAAAA,IAAI,CAACK,gBAAL,CAAsBX,IAAtB,EAA4BC,QAA5B;AAEA,SAAO;AACHW,IAAAA,OAAO,EAAE,YAAW;AAChBN,MAAAA,IAAI,CAACO,mBAAL,CAAyBb,IAAzB,EAA+BC,QAA/B;AACH;AAHE,GAAP;AAKH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASQ,cAAT,CAAwBD,QAAxB,EAAkCR,IAAlC,EAAwCC,QAAxC,EAAkD;AAC9Ca,EAAAA,KAAK,CAACC,SAAN,CAAgBC,OAAhB,CAAwBC,IAAxB,CAA6BT,QAA7B,EAAuC,UAASF,IAAT,EAAe;AAClDA,IAAAA,IAAI,CAACK,gBAAL,CAAsBX,IAAtB,EAA4BC,QAA5B;AACH,GAFD;AAIA,SAAO;AACHW,IAAAA,OAAO,EAAE,YAAW;AAChBE,MAAAA,KAAK,CAACC,SAAN,CAAgBC,OAAhB,CAAwBC,IAAxB,CAA6BT,QAA7B,EAAuC,UAASF,IAAT,EAAe;AAClDA,QAAAA,IAAI,CAACO,mBAAL,CAAyBb,IAAzB,EAA+BC,QAA/B;AACH,OAFD;AAGH;AALE,GAAP;AAOH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASS,cAAT,CAAwBQ,QAAxB,EAAkClB,IAAlC,EAAwCC,QAAxC,EAAkD;AAC9C,SAAOJ,QAAQ,CAACsB,QAAQ,CAACC,IAAV,EAAgBF,QAAhB,EAA0BlB,IAA1B,EAAgCC,QAAhC,CAAf;AACH;;AAEDoB,MAAM,CAACC,OAAP,GAAiBxB,MAAjB","sourcesContent":["var is = require('./is');\nvar delegate = require('delegate');\n\n/**\n * Validates all params and calls the right\n * listener function based on its target type.\n *\n * @param {String|HTMLElement|HTMLCollection|NodeList} target\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listen(target, type, callback) {\n    if (!target && !type && !callback) {\n        throw new Error('Missing required arguments');\n    }\n\n    if (!is.string(type)) {\n        throw new TypeError('Second argument must be a String');\n    }\n\n    if (!is.fn(callback)) {\n        throw new TypeError('Third argument must be a Function');\n    }\n\n    if (is.node(target)) {\n        return listenNode(target, type, callback);\n    }\n    else if (is.nodeList(target)) {\n        return listenNodeList(target, type, callback);\n    }\n    else if (is.string(target)) {\n        return listenSelector(target, type, callback);\n    }\n    else {\n        throw new TypeError('First argument must be a String, HTMLElement, HTMLCollection, or NodeList');\n    }\n}\n\n/**\n * Adds an event listener to a HTML element\n * and returns a remove listener function.\n *\n * @param {HTMLElement} node\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listenNode(node, type, callback) {\n    node.addEventListener(type, callback);\n\n    return {\n        destroy: function() {\n            node.removeEventListener(type, callback);\n        }\n    }\n}\n\n/**\n * Add an event listener to a list of HTML elements\n * and returns a remove listener function.\n *\n * @param {NodeList|HTMLCollection} nodeList\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listenNodeList(nodeList, type, callback) {\n    Array.prototype.forEach.call(nodeList, function(node) {\n        node.addEventListener(type, callback);\n    });\n\n    return {\n        destroy: function() {\n            Array.prototype.forEach.call(nodeList, function(node) {\n                node.removeEventListener(type, callback);\n            });\n        }\n    }\n}\n\n/**\n * Add an event listener to a selector\n * and returns a remove listener function.\n *\n * @param {String} selector\n * @param {String} type\n * @param {Function} callback\n * @return {Object}\n */\nfunction listenSelector(selector, type, callback) {\n    return delegate(document.body, selector, type, callback);\n}\n\nmodule.exports = listen;\n"]},"metadata":{},"sourceType":"script"}