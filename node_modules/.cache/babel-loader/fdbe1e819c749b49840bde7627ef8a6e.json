{"ast":null,"code":"var _jsxFileName = \"/home/amax/Autoro/cabana/src/components/SignalLegendEntry/index.js\";\n// SignalLegendEntry.js\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport Signal from '../../models/can/signal';\nimport SignalForm from './SignalForm';\nimport FIELDS from './FIELDS';\nexport default class SignalLegendEntry extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateField = (fieldSpec, value) => {\n      let {\n        signalEdited\n      } = this.state;\n      const {\n        signal\n      } = this.props;\n\n      if (fieldSpec.transform) {\n        signalEdited = fieldSpec.transform(value, signalEdited);\n      } else {\n        signalEdited[fieldSpec.field] = value;\n      } // Save entire signal while editing\n\n\n      this.setState({\n        signalEdited\n      });\n      const signalCopy = Object.assign(Object.create(signal), signal);\n      Object.entries(signalEdited).forEach(_ref => {\n        let [field, value] = _ref;\n        signalCopy[field] = value;\n      });\n      const updated = this.props.onSignalChange(signalCopy);\n      this.setState({\n        fieldError: !updated ? fieldSpec.field : null\n      });\n    };\n\n    this.toggleEditing = e => {\n      let {\n        signalEdited\n      } = this.state;\n      const {\n        signal,\n        isExpanded\n      } = this.props;\n      const signalCopy = Object.assign(Object.create(signal), signal);\n\n      if (isExpanded) {\n        // Finished editing, save changes & reset intermediate\n        // signalEdited state.\n        Object.entries(signalEdited).forEach(_ref2 => {\n          let [field, value] = _ref2;\n          const fieldSpec = SignalLegendEntry.fieldSpecForName(field);\n\n          if (fieldSpec && fieldSpec.type === 'number' && isNaN(parseInt(value, 10))) {\n            value = 0;\n          }\n\n          signalCopy[field] = value;\n        });\n        this.props.onSignalChange(signalCopy);\n      } else {\n        signalEdited = signalCopy;\n      } // Expand and enable signal editing\n\n\n      this.setState({\n        fieldError: null,\n        signalEdited\n      });\n      this.props.toggleExpandSignal(signal);\n      e.stopPropagation();\n    };\n\n    this.toggleSignalPlot = e => {\n      const {\n        signal,\n        isPlotted\n      } = this.props;\n      e.preventDefault();\n      this.props.onSignalPlotChange(!isPlotted, signal.uid);\n    };\n\n    this.getSignalEdited = field => this.state.signalEdited[field];\n\n    this.state = {\n      fieldError: null,\n      signalEdited: Object.assign(Object.create(props.signal), props.signal)\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!this.props.signal.equals(prevProps.signal)) {\n      this.setState({\n        fieldError: null,\n        signalEdited: Object.assign(Object.create(this.props.signal), this.props.signal)\n      });\n    }\n  }\n\n  render() {\n    const {\n      signal,\n      isHighlighted,\n      color,\n      isPlotted,\n      isExpanded\n    } = this.props;\n    const expandedEntryClass = isExpanded ? 'is-expanded' : null;\n    const plottedButtonClass = isPlotted ? 'button' : 'button--alpha';\n    const colorBarStyle = {\n      opacity: isHighlighted ? 0.5 : 0.3,\n      backgroundColor: color ? `rgb(${color.join(',')})` : null\n    };\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: cx('signals-legend-entry', expandedEntryClass),\n      onMouseEnter: () => this.props.onSignalHover(signal),\n      onMouseLeave: () => this.props.onSignalHoverEnd(signal),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"signals-legend-entry-colorbar\",\n      style: colorBarStyle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"signals-legend-entry-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"signals-legend-entry-header-name\",\n      onClick: this.toggleEditing,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 13\n      }\n    }, signal.name)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"signals-legend-entry-header-action\",\n      onClick: this.toggleSignalPlot,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: cx('button--tiny', plottedButtonClass),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }\n    }, isPlotted ? 'Hide Plot' : 'Show Plot'))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"signals-legend-entry-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }\n    }, isExpanded && /*#__PURE__*/React.createElement(SignalForm, {\n      signal: signal,\n      onSignalRemove: this.props.onSignalRemove,\n      isExpanded: isExpanded,\n      getSignalEdited: this.getSignalEdited,\n      fieldError: this.state.fieldError,\n      update: this.updateField,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 13\n      }\n    })));\n  }\n\n}\nSignalLegendEntry.propTypes = {\n  signal: PropTypes.instanceOf(Signal).isRequired,\n  isHighlighted: PropTypes.bool,\n  onSignalHover: PropTypes.func,\n  onSignalHoverEnd: PropTypes.func,\n  onTentativeSignalChange: PropTypes.func,\n  onSignalChange: PropTypes.func,\n  onSignalRemove: PropTypes.func,\n  onSignalPlotChange: PropTypes.func,\n  toggleExpandSignal: PropTypes.func,\n  isPlotted: PropTypes.bool,\n  isExpanded: PropTypes.bool\n};\n\nSignalLegendEntry.fieldSpecForName = name => FIELDS.find(field => field.field === name);","map":{"version":3,"sources":["/home/amax/Autoro/cabana/src/components/SignalLegendEntry/index.js"],"names":["React","Component","PropTypes","cx","Signal","SignalForm","FIELDS","SignalLegendEntry","constructor","props","updateField","fieldSpec","value","signalEdited","state","signal","transform","field","setState","signalCopy","Object","assign","create","entries","forEach","updated","onSignalChange","fieldError","toggleEditing","e","isExpanded","fieldSpecForName","type","isNaN","parseInt","toggleExpandSignal","stopPropagation","toggleSignalPlot","isPlotted","preventDefault","onSignalPlotChange","uid","getSignalEdited","componentDidUpdate","prevProps","equals","render","isHighlighted","color","expandedEntryClass","plottedButtonClass","colorBarStyle","opacity","backgroundColor","join","onSignalHover","onSignalHoverEnd","name","onSignalRemove","propTypes","instanceOf","isRequired","bool","func","onTentativeSignalChange","find"],"mappings":";AAAA;AAEA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,EAAP,MAAe,YAAf;AAEA,OAAOC,MAAP,MAAmB,yBAAnB;AACA,OAAOC,UAAP,MAAuB,cAAvB;AACA,OAAOC,MAAP,MAAmB,UAAnB;AAEA,eAAe,MAAMC,iBAAN,SAAgCN,SAAhC,CAA0C;AAiBvDO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAoBnBC,WApBmB,GAoBL,CAACC,SAAD,EAAYC,KAAZ,KAAsB;AAClC,UAAI;AAAEC,QAAAA;AAAF,UAAmB,KAAKC,KAA5B;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAa,KAAKN,KAAxB;;AAEA,UAAIE,SAAS,CAACK,SAAd,EAAyB;AACvBH,QAAAA,YAAY,GAAGF,SAAS,CAACK,SAAV,CAAoBJ,KAApB,EAA2BC,YAA3B,CAAf;AACD,OAFD,MAEO;AACLA,QAAAA,YAAY,CAACF,SAAS,CAACM,KAAX,CAAZ,GAAgCL,KAAhC;AACD,OARiC,CAUlC;;;AACA,WAAKM,QAAL,CAAc;AAAEL,QAAAA;AAAF,OAAd;AACA,YAAMM,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACE,MAAP,CAAcP,MAAd,CAAd,EAAqCA,MAArC,CAAnB;AACAK,MAAAA,MAAM,CAACG,OAAP,CAAeV,YAAf,EAA6BW,OAA7B,CAAqC,QAAoB;AAAA,YAAnB,CAACP,KAAD,EAAQL,KAAR,CAAmB;AACvDO,QAAAA,UAAU,CAACF,KAAD,CAAV,GAAoBL,KAApB;AACD,OAFD;AAIA,YAAMa,OAAO,GAAG,KAAKhB,KAAL,CAAWiB,cAAX,CAA0BP,UAA1B,CAAhB;AACA,WAAKD,QAAL,CAAc;AAAES,QAAAA,UAAU,EAAE,CAACF,OAAD,GAAWd,SAAS,CAACM,KAArB,GAA6B;AAA3C,OAAd;AACD,KAvCkB;;AAAA,SAyCnBW,aAzCmB,GAyCFC,CAAD,IAAO;AACrB,UAAI;AAAEhB,QAAAA;AAAF,UAAmB,KAAKC,KAA5B;AACA,YAAM;AAAEC,QAAAA,MAAF;AAAUe,QAAAA;AAAV,UAAyB,KAAKrB,KAApC;AACA,YAAMU,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACE,MAAP,CAAcP,MAAd,CAAd,EAAqCA,MAArC,CAAnB;;AAEA,UAAIe,UAAJ,EAAgB;AACd;AACA;AACAV,QAAAA,MAAM,CAACG,OAAP,CAAeV,YAAf,EAA6BW,OAA7B,CAAqC,SAAoB;AAAA,cAAnB,CAACP,KAAD,EAAQL,KAAR,CAAmB;AACvD,gBAAMD,SAAS,GAAGJ,iBAAiB,CAACwB,gBAAlB,CAAmCd,KAAnC,CAAlB;;AAEA,cACEN,SAAS,IACNA,SAAS,CAACqB,IAAV,KAAmB,QADtB,IAEGC,KAAK,CAACC,QAAQ,CAACtB,KAAD,EAAQ,EAAR,CAAT,CAHV,EAIE;AACAA,YAAAA,KAAK,GAAG,CAAR;AACD;;AAEDO,UAAAA,UAAU,CAACF,KAAD,CAAV,GAAoBL,KAApB;AACD,SAZD;AAaA,aAAKH,KAAL,CAAWiB,cAAX,CAA0BP,UAA1B;AACD,OAjBD,MAiBO;AACLN,QAAAA,YAAY,GAAGM,UAAf;AACD,OAxBoB,CA0BrB;;;AACA,WAAKD,QAAL,CAAc;AACZS,QAAAA,UAAU,EAAE,IADA;AAEZd,QAAAA;AAFY,OAAd;AAIA,WAAKJ,KAAL,CAAW0B,kBAAX,CAA8BpB,MAA9B;AACAc,MAAAA,CAAC,CAACO,eAAF;AACD,KA1EkB;;AAAA,SA4EnBC,gBA5EmB,GA4ECR,CAAD,IAAO;AACxB,YAAM;AAAEd,QAAAA,MAAF;AAAUuB,QAAAA;AAAV,UAAwB,KAAK7B,KAAnC;AACAoB,MAAAA,CAAC,CAACU,cAAF;AACA,WAAK9B,KAAL,CAAW+B,kBAAX,CAA8B,CAACF,SAA/B,EAA0CvB,MAAM,CAAC0B,GAAjD;AACD,KAhFkB;;AAAA,SAkFnBC,eAlFmB,GAkFAzB,KAAD,IAAW,KAAKH,KAAL,CAAWD,YAAX,CAAwBI,KAAxB,CAlFV;;AAEjB,SAAKH,KAAL,GAAa;AACXa,MAAAA,UAAU,EAAE,IADD;AAEXd,MAAAA,YAAY,EAAEO,MAAM,CAACC,MAAP,CAAcD,MAAM,CAACE,MAAP,CAAcb,KAAK,CAACM,MAApB,CAAd,EAA2CN,KAAK,CAACM,MAAjD;AAFH,KAAb;AAID;;AAED4B,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,QAAI,CAAC,KAAKnC,KAAL,CAAWM,MAAX,CAAkB8B,MAAlB,CAAyBD,SAAS,CAAC7B,MAAnC,CAAL,EAAiD;AAC/C,WAAKG,QAAL,CAAc;AACZS,QAAAA,UAAU,EAAE,IADA;AAEZd,QAAAA,YAAY,EAAEO,MAAM,CAACC,MAAP,CACZD,MAAM,CAACE,MAAP,CAAc,KAAKb,KAAL,CAAWM,MAAzB,CADY,EAEZ,KAAKN,KAAL,CAAWM,MAFC;AAFF,OAAd;AAOD;AACF;;AAkED+B,EAAAA,MAAM,GAAG;AACP,UAAM;AACJ/B,MAAAA,MADI;AACIgC,MAAAA,aADJ;AACmBC,MAAAA,KADnB;AAC0BV,MAAAA,SAD1B;AACqCR,MAAAA;AADrC,QAEF,KAAKrB,KAFT;AAGA,UAAMwC,kBAAkB,GAAGnB,UAAU,GAAG,aAAH,GAAmB,IAAxD;AACA,UAAMoB,kBAAkB,GAAGZ,SAAS,GAAG,QAAH,GAAc,eAAlD;AACA,UAAMa,aAAa,GAAG;AACpBC,MAAAA,OAAO,EAAEL,aAAa,GAAG,GAAH,GAAS,GADX;AAEpBM,MAAAA,eAAe,EAAEL,KAAK,GAAI,OAAMA,KAAK,CAACM,IAAN,CAAW,GAAX,CAAgB,GAA1B,GAA+B;AAFjC,KAAtB;AAIA,wBACE;AACE,MAAA,SAAS,EAAEnD,EAAE,CAAC,sBAAD,EAAyB8C,kBAAzB,CADf;AAEE,MAAA,YAAY,EAAE,MAAM,KAAKxC,KAAL,CAAW8C,aAAX,CAAyBxC,MAAzB,CAFtB;AAGE,MAAA,YAAY,EAAE,MAAM,KAAKN,KAAL,CAAW+C,gBAAX,CAA4BzC,MAA5B,CAHtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAKE;AAAK,MAAA,SAAS,EAAC,+BAAf;AAA+C,MAAA,KAAK,EAAGoC,aAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALF,eAME;AAAK,MAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AACE,MAAA,SAAS,EAAC,kCADZ;AAEE,MAAA,OAAO,EAAE,KAAKvB,aAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAASb,MAAM,CAAC0C,IAAhB,CAJF,CADF,eAOE;AACE,MAAA,SAAS,EAAC,oCADZ;AAEE,MAAA,OAAO,EAAE,KAAKpB,gBAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIE;AAAQ,MAAA,SAAS,EAAElC,EAAE,CAAC,cAAD,EAAiB+C,kBAAjB,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGZ,SAAS,GAAG,WAAH,GAAiB,WAD7B,CAJF,CAPF,CANF,eAsBE;AAAK,MAAA,SAAS,EAAC,2BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGR,UAAU,iBACT,oBAAC,UAAD;AACE,MAAA,MAAM,EAAEf,MADV;AAEE,MAAA,cAAc,EAAE,KAAKN,KAAL,CAAWiD,cAF7B;AAGE,MAAA,UAAU,EAAE5B,UAHd;AAIE,MAAA,eAAe,EAAE,KAAKY,eAJxB;AAKE,MAAA,UAAU,EAAE,KAAK5B,KAAL,CAAWa,UALzB;AAME,MAAA,MAAM,EAAE,KAAKjB,WANf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAFJ,CAtBF,CADF;AAqCD;;AApJsD;AAApCH,iB,CACZoD,S,GAAY;AACjB5C,EAAAA,MAAM,EAAEb,SAAS,CAAC0D,UAAV,CAAqBxD,MAArB,EAA6ByD,UADpB;AAEjBd,EAAAA,aAAa,EAAE7C,SAAS,CAAC4D,IAFR;AAGjBP,EAAAA,aAAa,EAAErD,SAAS,CAAC6D,IAHR;AAIjBP,EAAAA,gBAAgB,EAAEtD,SAAS,CAAC6D,IAJX;AAKjBC,EAAAA,uBAAuB,EAAE9D,SAAS,CAAC6D,IALlB;AAMjBrC,EAAAA,cAAc,EAAExB,SAAS,CAAC6D,IANT;AAOjBL,EAAAA,cAAc,EAAExD,SAAS,CAAC6D,IAPT;AAQjBvB,EAAAA,kBAAkB,EAAEtC,SAAS,CAAC6D,IARb;AASjB5B,EAAAA,kBAAkB,EAAEjC,SAAS,CAAC6D,IATb;AAUjBzB,EAAAA,SAAS,EAAEpC,SAAS,CAAC4D,IAVJ;AAWjBhC,EAAAA,UAAU,EAAE5B,SAAS,CAAC4D;AAXL,C;;AADAvD,iB,CAeZwB,gB,GAAoB0B,IAAD,IAAUnD,MAAM,CAAC2D,IAAP,CAAahD,KAAD,IAAWA,KAAK,CAACA,KAAN,KAAgBwC,IAAvC,C","sourcesContent":["// SignalLegendEntry.js\n\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\n\nimport Signal from '../../models/can/signal';\nimport SignalForm from './SignalForm';\nimport FIELDS from './FIELDS';\n\nexport default class SignalLegendEntry extends Component {\n  static propTypes = {\n    signal: PropTypes.instanceOf(Signal).isRequired,\n    isHighlighted: PropTypes.bool,\n    onSignalHover: PropTypes.func,\n    onSignalHoverEnd: PropTypes.func,\n    onTentativeSignalChange: PropTypes.func,\n    onSignalChange: PropTypes.func,\n    onSignalRemove: PropTypes.func,\n    onSignalPlotChange: PropTypes.func,\n    toggleExpandSignal: PropTypes.func,\n    isPlotted: PropTypes.bool,\n    isExpanded: PropTypes.bool\n  };\n\n  static fieldSpecForName = (name) => FIELDS.find((field) => field.field === name);\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      fieldError: null,\n      signalEdited: Object.assign(Object.create(props.signal), props.signal)\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!this.props.signal.equals(prevProps.signal)) {\n      this.setState({\n        fieldError: null,\n        signalEdited: Object.assign(\n          Object.create(this.props.signal),\n          this.props.signal\n        )\n      });\n    }\n  }\n\n  updateField = (fieldSpec, value) => {\n    let { signalEdited } = this.state;\n    const { signal } = this.props;\n\n    if (fieldSpec.transform) {\n      signalEdited = fieldSpec.transform(value, signalEdited);\n    } else {\n      signalEdited[fieldSpec.field] = value;\n    }\n\n    // Save entire signal while editing\n    this.setState({ signalEdited });\n    const signalCopy = Object.assign(Object.create(signal), signal);\n    Object.entries(signalEdited).forEach(([field, value]) => {\n      signalCopy[field] = value;\n    });\n\n    const updated = this.props.onSignalChange(signalCopy);\n    this.setState({ fieldError: !updated ? fieldSpec.field : null });\n  };\n\n  toggleEditing = (e) => {\n    let { signalEdited } = this.state;\n    const { signal, isExpanded } = this.props;\n    const signalCopy = Object.assign(Object.create(signal), signal);\n\n    if (isExpanded) {\n      // Finished editing, save changes & reset intermediate\n      // signalEdited state.\n      Object.entries(signalEdited).forEach(([field, value]) => {\n        const fieldSpec = SignalLegendEntry.fieldSpecForName(field);\n\n        if (\n          fieldSpec\n          && fieldSpec.type === 'number'\n          && isNaN(parseInt(value, 10))\n        ) {\n          value = 0;\n        }\n\n        signalCopy[field] = value;\n      });\n      this.props.onSignalChange(signalCopy);\n    } else {\n      signalEdited = signalCopy;\n    }\n\n    // Expand and enable signal editing\n    this.setState({\n      fieldError: null,\n      signalEdited,\n    });\n    this.props.toggleExpandSignal(signal);\n    e.stopPropagation();\n  };\n\n  toggleSignalPlot = (e) => {\n    const { signal, isPlotted } = this.props;\n    e.preventDefault();\n    this.props.onSignalPlotChange(!isPlotted, signal.uid);\n  };\n\n  getSignalEdited = (field) => this.state.signalEdited[field];\n\n  render() {\n    const {\n      signal, isHighlighted, color, isPlotted, isExpanded\n    } = this.props;\n    const expandedEntryClass = isExpanded ? 'is-expanded' : null;\n    const plottedButtonClass = isPlotted ? 'button' : 'button--alpha';\n    const colorBarStyle = {\n      opacity: isHighlighted ? 0.5 : 0.3,\n      backgroundColor: color ? `rgb(${color.join(',')})` : null,\n    };\n    return (\n      <div\n        className={cx('signals-legend-entry', expandedEntryClass)}\n        onMouseEnter={() => this.props.onSignalHover(signal)}\n        onMouseLeave={() => this.props.onSignalHoverEnd(signal)}\n      >\n        <div className=\"signals-legend-entry-colorbar\" style={ colorBarStyle } />\n        <div className=\"signals-legend-entry-header\">\n          <div\n            className=\"signals-legend-entry-header-name\"\n            onClick={this.toggleEditing}\n          >\n            <strong>{signal.name}</strong>\n          </div>\n          <div\n            className=\"signals-legend-entry-header-action\"\n            onClick={this.toggleSignalPlot}\n          >\n            <button className={cx('button--tiny', plottedButtonClass)}>\n              {isPlotted ? 'Hide Plot' : 'Show Plot'}\n            </button>\n          </div>\n        </div>\n        <div className=\"signals-legend-entry-body\">\n          {isExpanded && (\n            <SignalForm\n              signal={signal}\n              onSignalRemove={this.props.onSignalRemove}\n              isExpanded={isExpanded}\n              getSignalEdited={this.getSignalEdited}\n              fieldError={this.state.fieldError}\n              update={this.updateField}\n            />\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}