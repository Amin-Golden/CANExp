{"ast":null,"code":"\"use strict\";\n\nmodule.exports = {\n  readMessage: readMessage,\n  readSize: readSize\n};\n\nfunction readSize(buf, offset) {\n  offset = offset || 0;\n\n  if (offset + 8 >= buf.byteLength) {\n    return null;\n  }\n\n  var localIndex = 0;\n  var segments = buf.readUInt32LE(offset) + 1;\n  localIndex = 0;\n  var sizeArr = [];\n\n  for (var i = 0; i < segments; ++i) {\n    localIndex += 4;\n    var segSize = buf.readUInt32LE(offset + localIndex);\n    sizeArr.push(segSize * 8);\n  }\n\n  var size = sizeArr.reduce(function (memo, val) {\n    return memo + val;\n  }, localIndex); // round size to the word boundary, that reduce statement already took into account header size\n\n  size += 8 - size % 8;\n  return size;\n}\n\nfunction readMessage(buf, offset) {\n  offset = offset || 0;\n  var size = readSize(buf, offset);\n  return buf.slice(offset, offset + size);\n}","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/capnp-split/dist/buffer.js"],"names":["module","exports","readMessage","readSize","buf","offset","byteLength","localIndex","segments","readUInt32LE","sizeArr","i","segSize","push","size","reduce","memo","val","slice"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,WAAW,EAAEA,WADE;AAEfC,EAAAA,QAAQ,EAAEA;AAFK,CAAjB;;AAKA,SAASA,QAAT,CAAkBC,GAAlB,EAAuBC,MAAvB,EAA+B;AAC7BA,EAAAA,MAAM,GAAGA,MAAM,IAAI,CAAnB;;AACA,MAAIA,MAAM,GAAG,CAAT,IAAcD,GAAG,CAACE,UAAtB,EAAkC;AAChC,WAAO,IAAP;AACD;;AACD,MAAIC,UAAU,GAAG,CAAjB;AAEA,MAAIC,QAAQ,GAAGJ,GAAG,CAACK,YAAJ,CAAiBJ,MAAjB,IAA2B,CAA1C;AACAE,EAAAA,UAAU,GAAG,CAAb;AACA,MAAIG,OAAO,GAAG,EAAd;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,QAApB,EAA8B,EAAEG,CAAhC,EAAmC;AACjCJ,IAAAA,UAAU,IAAI,CAAd;AACA,QAAIK,OAAO,GAAGR,GAAG,CAACK,YAAJ,CAAiBJ,MAAM,GAAGE,UAA1B,CAAd;AACAG,IAAAA,OAAO,CAACG,IAAR,CAAaD,OAAO,GAAG,CAAvB;AACD;;AAED,MAAIE,IAAI,GAAGJ,OAAO,CAACK,MAAR,CAAe,UAAUC,IAAV,EAAgBC,GAAhB,EAAqB;AAC7C,WAAOD,IAAI,GAAGC,GAAd;AACD,GAFU,EAERV,UAFQ,CAAX,CAhB6B,CAoB7B;;AACAO,EAAAA,IAAI,IAAI,IAAIA,IAAI,GAAG,CAAnB;AAEA,SAAOA,IAAP;AACD;;AAED,SAASZ,WAAT,CAAqBE,GAArB,EAA0BC,MAA1B,EAAkC;AAChCA,EAAAA,MAAM,GAAGA,MAAM,IAAI,CAAnB;AACA,MAAIS,IAAI,GAAGX,QAAQ,CAACC,GAAD,EAAMC,MAAN,CAAnB;AAEA,SAAOD,GAAG,CAACc,KAAJ,CAAUb,MAAV,EAAkBA,MAAM,GAAGS,IAA3B,CAAP;AACD","sourcesContent":["\"use strict\";\n\nmodule.exports = {\n  readMessage: readMessage,\n  readSize: readSize\n};\n\nfunction readSize(buf, offset) {\n  offset = offset || 0;\n  if (offset + 8 >= buf.byteLength) {\n    return null;\n  }\n  var localIndex = 0;\n\n  var segments = buf.readUInt32LE(offset) + 1;\n  localIndex = 0;\n  var sizeArr = [];\n  for (var i = 0; i < segments; ++i) {\n    localIndex += 4;\n    var segSize = buf.readUInt32LE(offset + localIndex);\n    sizeArr.push(segSize * 8);\n  }\n\n  var size = sizeArr.reduce(function (memo, val) {\n    return memo + val;\n  }, localIndex);\n\n  // round size to the word boundary, that reduce statement already took into account header size\n  size += 8 - size % 8;\n\n  return size;\n}\n\nfunction readMessage(buf, offset) {\n  offset = offset || 0;\n  var size = readSize(buf, offset);\n\n  return buf.slice(offset, offset + size);\n}"]},"metadata":{},"sourceType":"script"}