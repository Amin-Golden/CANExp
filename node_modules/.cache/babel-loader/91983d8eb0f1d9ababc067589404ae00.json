{"ast":null,"code":"var _jsxFileName = \"/home/amax/Autoro/cabana/src/components/CanGraphList.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport CanGraph from './CanGraph';\nexport default class CanGraphList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      draggingSignal: {},\n      dragPos: null,\n      dragShift: null,\n      graphToReceiveDrop: null\n    };\n    this.plotListRef = React.createRef();\n    this.plotRefs = [];\n    this.renderSignalPlot = this.renderSignalPlot.bind(this);\n    this.onGraphDragStart = this.onGraphDragStart.bind(this);\n    this.onGraphDragEnd = this.onGraphDragEnd.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n  }\n\n  onGraphDragStart(messageId, signalUid, shiftX, shiftY) {\n    this.setState({\n      draggingSignal: {\n        messageId,\n        signalUid\n      },\n      dragShift: {\n        x: shiftX,\n        y: shiftY\n      }\n    });\n  }\n\n  determineDraggingGraph() {\n    const {\n      draggingSignal\n    } = this.state;\n    return this.plotRefs.find(_ref => {\n      let {\n        messageId,\n        signalUid\n      } = _ref;\n      return draggingSignal.messageId === messageId && draggingSignal.signalUid === signalUid;\n    });\n  }\n\n  onMouseMove(e) {\n    const {\n      dragShift\n    } = this.state;\n\n    if (dragShift === null) {\n      if (this.state.graphToReceiveDrop !== null) {\n        this.setState({\n          graphToReceiveDrop: null\n        });\n      }\n\n      return;\n    }\n\n    const rect = this.plotListRef.current.getBoundingClientRect();\n    const draggingGraph = this.determineDraggingGraph();\n\n    if (draggingGraph) {\n      draggingGraph.ref.hidden = true;\n      const ele = document.elementFromPoint(e.clientX, e.clientY);\n      draggingGraph.ref.hidden = false;\n      const closestPlot = ele.closest('.cabana-explorer-visuals-plot');\n      const closestPlotRef = this.plotRefs.find(_ref2 => {\n        let {\n          ref,\n          messageId,\n          signalUid\n        } = _ref2;\n        return !(messageId === draggingGraph.messageId && signalUid === draggingGraph.signalUid) && ref.isEqualNode(closestPlot);\n      });\n\n      if (closestPlotRef) {\n        this.setState({\n          graphToReceiveDrop: closestPlotRef\n        });\n      } else {\n        this.setState({\n          graphToReceiveDrop: null\n        });\n      }\n    }\n\n    const left = e.clientX - rect.left - dragShift.x;\n    const top = e.clientY - rect.top - dragShift.y;\n    this.setState({\n      dragPos: {\n        left,\n        top\n      }\n    });\n  }\n\n  onGraphDragEnd() {\n    if (this.state.graphToReceiveDrop !== null) {\n      this.props.mergePlots({\n        fromPlot: this.state.draggingSignal,\n        toPlot: this.state.graphToReceiveDrop\n      });\n    }\n\n    this.setState({\n      draggingSignal: {},\n      dragShift: null,\n      dragPos: null,\n      graphToReceiveDrop: null\n    });\n  }\n\n  addCanGraphRef(ref, messageId, signalUid) {\n    if (ref) {\n      let {\n        plotRefs\n      } = this;\n      plotRefs = plotRefs.filter(ref => !(ref.messageId === messageId && ref.signalUid === signalUid)).concat([{\n        messageId,\n        signalUid,\n        ref\n      }]);\n      this.plotRefs = plotRefs;\n    }\n  }\n\n  renderSignalPlot(plottedSignals, index) {\n    const {\n      draggingSignal,\n      graphToReceiveDrop\n    } = this.state;\n    const {\n      messageId,\n      signalUid\n    } = plottedSignals[0];\n    const msg = this.props.messages[messageId];\n\n    if (!this.plotListRef.current || !msg) {\n      return [];\n    }\n\n    const signal = Object.values(msg.frame.signals).find(s => s.uid === signalUid);\n\n    if (!signal) {\n      return null;\n    }\n\n    const isDragging = draggingSignal.signalUid === signalUid && draggingSignal.messageId === messageId;\n    const canReceiveGraphDrop = graphToReceiveDrop && graphToReceiveDrop.signalUid === signalUid && graphToReceiveDrop.messageId === messageId;\n    plottedSignals = plottedSignals.map(plottedSignal => ({\n      messageName: this.props.messages[plottedSignal.messageId].frame.name,\n      ...plottedSignal\n    }));\n    const key = plottedSignals.reduce((key, _ref3) => {\n      let {\n        messageId,\n        signalUid\n      } = _ref3;\n      return `${key + messageId}_${signalUid}`;\n    }, '');\n    return /*#__PURE__*/React.createElement(CanGraph, {\n      onGraphRefAvailable: ref => {\n        this.addCanGraphRef(ref, messageId, signalUid);\n      },\n      key: key,\n      unplot: this.props.onSignalUnplotPressed,\n      messages: this.props.messages,\n      messageId: messageId,\n      messageName: msg.frame ? msg.frame.name : null,\n      signalSpec: Object.assign(Object.create(signal), signal),\n      onSegmentChanged: this.props.onSegmentChanged,\n      segment: this.props.segment,\n      onRelativeTimeClick: this.props.onGraphTimeClick,\n      currentTime: this.props.seekTime,\n      onDragStart: this.onGraphDragStart,\n      onDragEnd: this.onGraphDragEnd,\n      container: this.plotListRef.current,\n      dragPos: isDragging ? this.state.dragPos : null,\n      canReceiveGraphDrop: canReceiveGraphDrop,\n      plottedSignals: plottedSignals,\n      live: this.props.live,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 7\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cabana-explorer-visuals-plots\",\n      ref: this.plotListRef,\n      onMouseMove: this.onMouseMove,\n      onMouseLeave: this.onGraphDragEnd,\n      onMouseUp: this.onGraphDragEnd,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 7\n      }\n    }, this.props.plottedSignals.map(this.renderSignalPlot));\n  }\n\n}\nCanGraphList.propTypes = {\n  plottedSignals: PropTypes.array.isRequired,\n  messages: PropTypes.object.isRequired,\n  onGraphTimeClick: PropTypes.func.isRequired,\n  seekTime: PropTypes.number.isRequired,\n  onSegmentChanged: PropTypes.func.isRequired,\n  onSignalUnplotPressed: PropTypes.func.isRequired,\n  segment: PropTypes.array.isRequired,\n  mergePlots: PropTypes.func.isRequired\n};","map":{"version":3,"sources":["/home/amax/Autoro/cabana/src/components/CanGraphList.js"],"names":["React","Component","PropTypes","CanGraph","CanGraphList","constructor","props","state","draggingSignal","dragPos","dragShift","graphToReceiveDrop","plotListRef","createRef","plotRefs","renderSignalPlot","bind","onGraphDragStart","onGraphDragEnd","onMouseMove","messageId","signalUid","shiftX","shiftY","setState","x","y","determineDraggingGraph","find","e","rect","current","getBoundingClientRect","draggingGraph","ref","hidden","ele","document","elementFromPoint","clientX","clientY","closestPlot","closest","closestPlotRef","isEqualNode","left","top","mergePlots","fromPlot","toPlot","addCanGraphRef","filter","concat","plottedSignals","index","msg","messages","signal","Object","values","frame","signals","s","uid","isDragging","canReceiveGraphDrop","map","plottedSignal","messageName","name","key","reduce","onSignalUnplotPressed","assign","create","onSegmentChanged","segment","onGraphTimeClick","seekTime","live","render","propTypes","array","isRequired","object","func","number"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport CanGraph from './CanGraph';\n\nexport default class CanGraphList extends Component {\n  static propTypes = {\n    plottedSignals: PropTypes.array.isRequired,\n    messages: PropTypes.object.isRequired,\n    onGraphTimeClick: PropTypes.func.isRequired,\n    seekTime: PropTypes.number.isRequired,\n    onSegmentChanged: PropTypes.func.isRequired,\n    onSignalUnplotPressed: PropTypes.func.isRequired,\n    segment: PropTypes.array.isRequired,\n    mergePlots: PropTypes.func.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      draggingSignal: {},\n      dragPos: null,\n      dragShift: null,\n      graphToReceiveDrop: null\n    };\n\n    this.plotListRef = React.createRef();\n    this.plotRefs = [];\n    this.renderSignalPlot = this.renderSignalPlot.bind(this);\n    this.onGraphDragStart = this.onGraphDragStart.bind(this);\n    this.onGraphDragEnd = this.onGraphDragEnd.bind(this);\n    this.onMouseMove = this.onMouseMove.bind(this);\n  }\n\n  onGraphDragStart(messageId, signalUid, shiftX, shiftY) {\n    this.setState({\n      draggingSignal: { messageId, signalUid },\n      dragShift: { x: shiftX, y: shiftY }\n    });\n  }\n\n  determineDraggingGraph() {\n    const { draggingSignal } = this.state;\n    return this.plotRefs.find(\n      ({ messageId, signalUid }) => draggingSignal.messageId === messageId\n        && draggingSignal.signalUid === signalUid\n    );\n  }\n\n  onMouseMove(e) {\n    const { dragShift } = this.state;\n    if (dragShift === null) {\n      if (this.state.graphToReceiveDrop !== null) {\n        this.setState({ graphToReceiveDrop: null });\n      }\n      return;\n    }\n    const rect = this.plotListRef.current.getBoundingClientRect();\n    const draggingGraph = this.determineDraggingGraph();\n    if (draggingGraph) {\n      draggingGraph.ref.hidden = true;\n      const ele = document.elementFromPoint(e.clientX, e.clientY);\n      draggingGraph.ref.hidden = false;\n      const closestPlot = ele.closest('.cabana-explorer-visuals-plot');\n      const closestPlotRef = this.plotRefs.find(\n        ({ ref, messageId, signalUid }) => !(\n          messageId === draggingGraph.messageId\n            && signalUid === draggingGraph.signalUid\n        ) && ref.isEqualNode(closestPlot)\n      );\n      if (closestPlotRef) {\n        this.setState({ graphToReceiveDrop: closestPlotRef });\n      } else {\n        this.setState({ graphToReceiveDrop: null });\n      }\n    }\n    const left = e.clientX - rect.left - dragShift.x;\n    const top = e.clientY - rect.top - dragShift.y;\n\n    this.setState({ dragPos: { left, top } });\n  }\n\n  onGraphDragEnd() {\n    if (this.state.graphToReceiveDrop !== null) {\n      this.props.mergePlots({\n        fromPlot: this.state.draggingSignal,\n        toPlot: this.state.graphToReceiveDrop\n      });\n    }\n\n    this.setState({\n      draggingSignal: {},\n      dragShift: null,\n      dragPos: null,\n      graphToReceiveDrop: null\n    });\n  }\n\n  addCanGraphRef(ref, messageId, signalUid) {\n    if (ref) {\n      let { plotRefs } = this;\n      plotRefs = plotRefs\n        .filter(\n          (ref) => !(ref.messageId === messageId && ref.signalUid === signalUid)\n        )\n        .concat([{ messageId, signalUid, ref }]);\n      this.plotRefs = plotRefs;\n    }\n  }\n\n  renderSignalPlot(plottedSignals, index) {\n    const { draggingSignal, graphToReceiveDrop } = this.state;\n    const { messageId, signalUid } = plottedSignals[0];\n    const msg = this.props.messages[messageId];\n    if (!this.plotListRef.current || !msg) {\n      return [];\n    }\n\n    const signal = Object.values(msg.frame.signals).find(\n      (s) => s.uid === signalUid\n    );\n\n    if (!signal) {\n      return null;\n    }\n\n    const isDragging = draggingSignal.signalUid === signalUid\n      && draggingSignal.messageId === messageId;\n    const canReceiveGraphDrop = graphToReceiveDrop\n      && graphToReceiveDrop.signalUid === signalUid\n      && graphToReceiveDrop.messageId === messageId;\n    plottedSignals = plottedSignals.map((plottedSignal) => ({\n      messageName: this.props.messages[plottedSignal.messageId].frame.name,\n      ...plottedSignal\n    }));\n    const key = plottedSignals.reduce(\n      (key, { messageId, signalUid }) => `${key + messageId}_${signalUid}`,\n      ''\n    );\n    return (\n      <CanGraph\n        onGraphRefAvailable={(ref) => {\n          this.addCanGraphRef(ref, messageId, signalUid);\n        }}\n        key={key}\n        unplot={this.props.onSignalUnplotPressed}\n        messages={this.props.messages}\n        messageId={messageId}\n        messageName={msg.frame ? msg.frame.name : null}\n        signalSpec={Object.assign(Object.create(signal), signal)}\n        onSegmentChanged={this.props.onSegmentChanged}\n        segment={this.props.segment}\n        onRelativeTimeClick={this.props.onGraphTimeClick}\n        currentTime={this.props.seekTime}\n        onDragStart={this.onGraphDragStart}\n        onDragEnd={this.onGraphDragEnd}\n        container={this.plotListRef.current}\n        dragPos={isDragging ? this.state.dragPos : null}\n        canReceiveGraphDrop={canReceiveGraphDrop}\n        plottedSignals={plottedSignals}\n        live={this.props.live}\n      />\n    );\n  }\n\n  render() {\n    return (\n      <div\n        className=\"cabana-explorer-visuals-plots\"\n        ref={ this.plotListRef }\n        onMouseMove={this.onMouseMove}\n        onMouseLeave={this.onGraphDragEnd}\n        onMouseUp={this.onGraphDragEnd}\n      >\n        {this.props.plottedSignals.map(this.renderSignalPlot)}\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}