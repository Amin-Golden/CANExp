{"ast":null,"code":"import LogEntries from './LogEntries';\nimport { LOGENTRIES_TOKEN } from '../config';\n\nclass CloudLog {\n  constructor() {\n    LogEntries.init({\n      token: LOGENTRIES_TOKEN,\n      no_format: true,\n      catchall: false\n    });\n    this.context = {};\n  }\n\n  bind(obj) {\n    this.context.update(obj);\n  }\n\n  emit(message) {\n    let level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'log';\n\n    if (typeof global.__JEST__ !== 'undefined') {\n      // Don't log in testing environment\n      return;\n    }\n\n    const entry = {\n      ctx: this.context,\n      created: new Date().getTime() / 1000,\n      msg: message,\n      src: 'JSCloudLog'\n    };\n\n    if (level === 'log') {\n      LogEntries.log(entry);\n    } else if (level === 'warn') {\n      LogEntries.warn(entry);\n    } else if (level === 'error') {\n      LogEntries.error(entry);\n    }\n  }\n\n  log(message) {\n    this.emit(message);\n  }\n\n  warn(message) {\n    this.emit(message, 'warn');\n  }\n\n  error(message) {\n    this.emit(message, 'error');\n  }\n\n}\n\nexport default new CloudLog();","map":{"version":3,"sources":["/home/amax/Autoro/cabana/src/logging/CloudLog.js"],"names":["LogEntries","LOGENTRIES_TOKEN","CloudLog","constructor","init","token","no_format","catchall","context","bind","obj","update","emit","message","level","global","__JEST__","entry","ctx","created","Date","getTime","msg","src","log","warn","error"],"mappings":"AAAA,OAAOA,UAAP,MAAuB,cAAvB;AACA,SAASC,gBAAT,QAAiC,WAAjC;;AAEA,MAAMC,QAAN,CAAe;AACbC,EAAAA,WAAW,GAAG;AACZH,IAAAA,UAAU,CAACI,IAAX,CAAgB;AACdC,MAAAA,KAAK,EAAEJ,gBADO;AAEdK,MAAAA,SAAS,EAAE,IAFG;AAGdC,MAAAA,QAAQ,EAAE;AAHI,KAAhB;AAKA,SAAKC,OAAL,GAAe,EAAf;AACD;;AAEDC,EAAAA,IAAI,CAACC,GAAD,EAAM;AACR,SAAKF,OAAL,CAAaG,MAAb,CAAoBD,GAApB;AACD;;AAEDE,EAAAA,IAAI,CAACC,OAAD,EAAyB;AAAA,QAAfC,KAAe,uEAAP,KAAO;;AAC3B,QAAI,OAAOC,MAAM,CAACC,QAAd,KAA2B,WAA/B,EAA4C;AAC1C;AACA;AACD;;AAED,UAAMC,KAAK,GAAG;AACZC,MAAAA,GAAG,EAAE,KAAKV,OADE;AAEZW,MAAAA,OAAO,EAAE,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAFpB;AAGZC,MAAAA,GAAG,EAAET,OAHO;AAIZU,MAAAA,GAAG,EAAE;AAJO,KAAd;;AAOA,QAAIT,KAAK,KAAK,KAAd,EAAqB;AACnBd,MAAAA,UAAU,CAACwB,GAAX,CAAeP,KAAf;AACD,KAFD,MAEO,IAAIH,KAAK,KAAK,MAAd,EAAsB;AAC3Bd,MAAAA,UAAU,CAACyB,IAAX,CAAgBR,KAAhB;AACD,KAFM,MAEA,IAAIH,KAAK,KAAK,OAAd,EAAuB;AAC5Bd,MAAAA,UAAU,CAAC0B,KAAX,CAAiBT,KAAjB;AACD;AACF;;AAEDO,EAAAA,GAAG,CAACX,OAAD,EAAU;AACX,SAAKD,IAAL,CAAUC,OAAV;AACD;;AAEDY,EAAAA,IAAI,CAACZ,OAAD,EAAU;AACZ,SAAKD,IAAL,CAAUC,OAAV,EAAmB,MAAnB;AACD;;AAEDa,EAAAA,KAAK,CAACb,OAAD,EAAU;AACb,SAAKD,IAAL,CAAUC,OAAV,EAAmB,OAAnB;AACD;;AA9CY;;AAiDf,eAAe,IAAIX,QAAJ,EAAf","sourcesContent":["import LogEntries from './LogEntries';\nimport { LOGENTRIES_TOKEN } from '../config';\n\nclass CloudLog {\n  constructor() {\n    LogEntries.init({\n      token: LOGENTRIES_TOKEN,\n      no_format: true,\n      catchall: false\n    });\n    this.context = {};\n  }\n\n  bind(obj) {\n    this.context.update(obj);\n  }\n\n  emit(message, level = 'log') {\n    if (typeof global.__JEST__ !== 'undefined') {\n      // Don't log in testing environment\n      return;\n    }\n\n    const entry = {\n      ctx: this.context,\n      created: new Date().getTime() / 1000,\n      msg: message,\n      src: 'JSCloudLog'\n    };\n\n    if (level === 'log') {\n      LogEntries.log(entry);\n    } else if (level === 'warn') {\n      LogEntries.warn(entry);\n    } else if (level === 'error') {\n      LogEntries.error(entry);\n    }\n  }\n\n  log(message) {\n    this.emit(message);\n  }\n\n  warn(message) {\n    this.emit(message, 'warn');\n  }\n\n  error(message) {\n    this.emit(message, 'error');\n  }\n}\n\nexport default new CloudLog();\n"]},"metadata":{},"sourceType":"module"}