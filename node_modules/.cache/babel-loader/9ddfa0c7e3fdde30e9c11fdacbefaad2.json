{"ast":null,"code":"var _jsxFileName = \"/home/amax/Autoro/cabana/src/components/MessageBytes.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport DbcUtils from '../utils/dbc';\nexport default class MessageBytes extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVisible: true,\n      lastMessageIndex: 0,\n      lastSeekTime: 0\n    };\n    this.onVisibilityChange = this.onVisibilityChange.bind(this);\n    this.onCanvasRefAvailable = this.onCanvasRefAvailable.bind(this);\n    this.updateCanvas = this.updateCanvas.bind(this);\n    this.canvasInView = this.canvasInView.bind(this);\n  }\n\n  componentDidMount() {\n    this.componentDidUpdate({}, {});\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.message !== this.props.message) {\n      let rowCount;\n\n      if (this.props.message.frame && this.props.message.frame.size) {\n        rowCount = Math.ceil(this.props.message.frame.size / 8);\n      } else {\n        rowCount = Math.ceil(DbcUtils.maxMessageSize(this.props.message, this.state.maxMessageBytes) / 8);\n      }\n\n      if (this.canvas) {\n        this.canvas.height = rowCount * 15;\n      }\n    }\n\n    if (prevProps.seekIndex !== this.props.seekIndex || Math.floor(prevProps.seekTime * 60) !== Math.floor(this.props.seekTime * 60)) {\n      this.updateCanvas();\n    }\n  }\n\n  canvasInView() {\n    return !window.visualViewport || !this.canvas || this.canvas.getBoundingClientRect().y >= 270 && window.visualViewport.height >= this.canvas.getBoundingClientRect().y;\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.live && nextProps.message.entries.length) {\n      const nextLastEntry = nextProps.message.entries[nextProps.message.entries.length - 1];\n      const curLastEntry = this.props.message.entries[this.props.message.entries.length - 1];\n      return !nextLastEntry || !curLastEntry || nextLastEntry.hexData !== curLastEntry.hexData;\n    }\n\n    return nextProps.seekTime !== this.props.seekTime;\n  }\n\n  findMostRecentMessage(seekTime) {\n    const {\n      message\n    } = this.props;\n    const {\n      lastMessageIndex,\n      lastSeekTime\n    } = this.state;\n    let mostRecentMessageIndex = null;\n\n    if (seekTime >= lastSeekTime) {\n      for (let i = lastMessageIndex; i < message.entries.length; ++i) {\n        const msg = message.entries[i];\n\n        if (msg && msg.relTime >= seekTime) {\n          mostRecentMessageIndex = i;\n          break;\n        }\n      }\n    }\n\n    if (!mostRecentMessageIndex) {\n      // TODO this can be faster with binary search, not currently a bottleneck though.\n      mostRecentMessageIndex = message.entries.findIndex(e => e.relTime >= seekTime);\n    }\n\n    if (mostRecentMessageIndex) {\n      this.setState({\n        lastMessageIndex: mostRecentMessageIndex,\n        lastSeekTime: seekTime\n      });\n      return message.entries[mostRecentMessageIndex];\n    }\n  }\n\n  updateCanvas() {\n    const {\n      message,\n      live,\n      seekTime\n    } = this.props;\n\n    if (!this.canvas || message.entries.length === 0 || !this.canvasInView()) {\n      return;\n    }\n\n    let mostRecentMsg = message.entries[message.entries.length - 1];\n\n    if (!live) {\n      mostRecentMsg = this.findMostRecentMessage(seekTime);\n\n      if (!mostRecentMsg) {\n        mostRecentMsg = message.entries[0];\n      }\n    }\n\n    const ctx = this.canvas.getContext('2d'); // ctx.clearRect(0, 0, 180, 15);\n\n    for (let i = 0; i < message.byteStateChangeCounts.length; ++i) {\n      const hexData = mostRecentMsg.hexData.substr(i * 2, 2);\n      const x = i % 8 * 20;\n      const y = Math.floor(i / 8) * 15;\n      ctx.fillStyle = message.byteColors[i];\n      ctx.fillRect(x, y, 20, 15);\n      ctx.font = '12px Courier';\n      ctx.fillStyle = 'white';\n      ctx.fillText(hexData ? hexData : '-', x + 2, y + 12);\n    }\n  }\n\n  onVisibilityChange(isVisible) {\n    if (isVisible !== this.state.isVisible) {\n      this.setState({\n        isVisible\n      });\n    }\n  }\n\n  onCanvasRefAvailable(ref) {\n    if (!ref) return;\n    this.canvas = ref;\n    this.canvas.width = 160;\n    let rowCount;\n\n    if (this.props.message.frame && this.props.message.frame.size) {\n      rowCount = Math.ceil(this.props.message.frame.size / 8);\n    } else {\n      rowCount = Math.ceil(DbcUtils.maxMessageSize(this.props.message, this.state.maxMessageBytes) / 8);\n    }\n\n    this.canvas.height = rowCount * 15;\n    const observer = new IntersectionObserver(this.updateCanvas);\n    observer.observe(this.canvas);\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"canvas\", {\n      ref: this.onCanvasRefAvailable,\n      className: \"cabana-meta-messages-list-item-bytes-canvas\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 7\n      }\n    });\n  }\n\n}\nMessageBytes.propTypes = {\n  seekTime: PropTypes.number.isRequired,\n  message: PropTypes.object.isRequired,\n  seekIndex: PropTypes.number,\n  live: PropTypes.bool.isRequired\n};","map":{"version":3,"sources":["/home/amax/Autoro/cabana/src/components/MessageBytes.js"],"names":["React","Component","PropTypes","DbcUtils","MessageBytes","constructor","props","state","isVisible","lastMessageIndex","lastSeekTime","onVisibilityChange","bind","onCanvasRefAvailable","updateCanvas","canvasInView","componentDidMount","componentDidUpdate","prevProps","message","rowCount","frame","size","Math","ceil","maxMessageSize","maxMessageBytes","canvas","height","seekIndex","floor","seekTime","window","visualViewport","getBoundingClientRect","y","shouldComponentUpdate","nextProps","nextState","live","entries","length","nextLastEntry","curLastEntry","hexData","findMostRecentMessage","mostRecentMessageIndex","i","msg","relTime","findIndex","e","setState","mostRecentMsg","ctx","getContext","byteStateChangeCounts","substr","x","fillStyle","byteColors","fillRect","font","fillText","ref","width","observer","IntersectionObserver","observe","render","propTypes","number","isRequired","object","bool"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport DbcUtils from '../utils/dbc';\n\nexport default class MessageBytes extends Component {\n  static propTypes = {\n    seekTime: PropTypes.number.isRequired,\n    message: PropTypes.object.isRequired,\n    seekIndex: PropTypes.number,\n    live: PropTypes.bool.isRequired\n  };\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      isVisible: true,\n      lastMessageIndex: 0,\n      lastSeekTime: 0,\n    };\n\n    this.onVisibilityChange = this.onVisibilityChange.bind(this);\n    this.onCanvasRefAvailable = this.onCanvasRefAvailable.bind(this);\n    this.updateCanvas = this.updateCanvas.bind(this);\n    this.canvasInView = this.canvasInView.bind(this);\n  }\n\n  componentDidMount() {\n    this.componentDidUpdate({}, {});\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps.message !== this.props.message) {\n      let rowCount;\n      if (this.props.message.frame && this.props.message.frame.size) {\n        rowCount = Math.ceil(this.props.message.frame.size / 8);\n      } else {\n        rowCount = Math.ceil(DbcUtils.maxMessageSize(this.props.message, this.state.maxMessageBytes) / 8);\n      }\n      if (this.canvas) {\n        this.canvas.height = rowCount * 15;\n      }\n    }\n\n    if (prevProps.seekIndex !== this.props.seekIndex ||\n      Math.floor(prevProps.seekTime * 60) !== Math.floor(this.props.seekTime * 60))\n    {\n      this.updateCanvas();\n    }\n  }\n\n  canvasInView() {\n    return (!window.visualViewport || !this.canvas || (this.canvas.getBoundingClientRect().y >= 270 &&\n      window.visualViewport.height >= this.canvas.getBoundingClientRect().y));\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.live && nextProps.message.entries.length) {\n      const nextLastEntry = nextProps.message.entries[nextProps.message.entries.length - 1];\n      const curLastEntry = this.props.message.entries[\n        this.props.message.entries.length - 1\n      ];\n\n      return !nextLastEntry || !curLastEntry || nextLastEntry.hexData !== curLastEntry.hexData;\n    }\n    return nextProps.seekTime !== this.props.seekTime;\n  }\n\n  findMostRecentMessage(seekTime) {\n    const { message } = this.props;\n    const { lastMessageIndex, lastSeekTime } = this.state;\n    let mostRecentMessageIndex = null;\n    if (seekTime >= lastSeekTime) {\n      for (let i = lastMessageIndex; i < message.entries.length; ++i) {\n        const msg = message.entries[i];\n        if (msg && msg.relTime >= seekTime) {\n          mostRecentMessageIndex = i;\n          break;\n        }\n      }\n    }\n\n    if (!mostRecentMessageIndex) {\n      // TODO this can be faster with binary search, not currently a bottleneck though.\n\n      mostRecentMessageIndex = message.entries.findIndex(\n        (e) => e.relTime >= seekTime\n      );\n    }\n\n    if (mostRecentMessageIndex) {\n      this.setState({\n        lastMessageIndex: mostRecentMessageIndex,\n        lastSeekTime: seekTime\n      });\n      return message.entries[mostRecentMessageIndex];\n    }\n  }\n\n  updateCanvas() {\n    const { message, live, seekTime } = this.props;\n    if (!this.canvas || message.entries.length === 0 || !this.canvasInView()) {\n      return;\n    }\n\n    let mostRecentMsg = message.entries[message.entries.length - 1];\n    if (!live) {\n      mostRecentMsg = this.findMostRecentMessage(seekTime);\n\n      if (!mostRecentMsg) {\n        mostRecentMsg = message.entries[0];\n      }\n    }\n\n    const ctx = this.canvas.getContext('2d');\n    // ctx.clearRect(0, 0, 180, 15);\n\n    for (let i = 0; i < message.byteStateChangeCounts.length; ++i) {\n      const hexData = mostRecentMsg.hexData.substr(i * 2, 2);\n\n      const x = (i % 8) * 20;\n      const y = Math.floor(i / 8) * 15;\n\n      ctx.fillStyle = message.byteColors[i];\n      ctx.fillRect(x, y, 20, 15);\n\n      ctx.font = '12px Courier';\n      ctx.fillStyle = 'white';\n      ctx.fillText(hexData ? hexData : '-', x + 2, y + 12);\n    }\n  }\n\n  onVisibilityChange(isVisible) {\n    if (isVisible !== this.state.isVisible) {\n      this.setState({ isVisible });\n    }\n  }\n\n  onCanvasRefAvailable(ref) {\n    if (!ref) return;\n\n    this.canvas = ref;\n    this.canvas.width = 160;\n    let rowCount;\n    if (this.props.message.frame && this.props.message.frame.size) {\n      rowCount = Math.ceil(this.props.message.frame.size / 8);\n    } else {\n      rowCount = Math.ceil(DbcUtils.maxMessageSize(this.props.message, this.state.maxMessageBytes) / 8);\n    }\n    this.canvas.height = rowCount * 15;\n\n    const observer = new IntersectionObserver(this.updateCanvas);\n    observer.observe(this.canvas);\n  }\n\n  render() {\n    return (\n      <canvas\n        ref={this.onCanvasRefAvailable}\n        className=\"cabana-meta-messages-list-item-bytes-canvas\"\n      />\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}