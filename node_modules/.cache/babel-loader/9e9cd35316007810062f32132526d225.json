{"ast":null,"code":"\"use strict\";\n/**\n * @author jdiaz5513\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar debug_1 = require(\"debug\");\n\nvar constants_1 = require(\"../../constants\");\n\nvar errors_1 = require(\"../../errors\");\n\nvar util_1 = require(\"../../util\");\n\nvar arena_allocation_result_1 = require(\"./arena-allocation-result\");\n\nvar arena_kind_1 = require(\"./arena-kind\");\n\nvar trace = debug_1.default('capnp:arena:multi');\ntrace('load');\n\nvar MultiSegmentArena =\n/** @class */\nfunction () {\n  function MultiSegmentArena(buffers) {\n    if (buffers === void 0) {\n      buffers = [];\n    }\n\n    this.kind = arena_kind_1.ArenaKind.MULTI_SEGMENT;\n    this.buffers = buffers;\n    trace('new %s', this);\n  }\n\n  MultiSegmentArena.prototype.toString = function () {\n    return util_1.format('MultiSegmentArena_segments:%d', getNumSegments(this));\n  };\n\n  MultiSegmentArena.allocate = allocate;\n  MultiSegmentArena.getBuffer = getBuffer;\n  MultiSegmentArena.getNumSegments = getNumSegments;\n  return MultiSegmentArena;\n}();\n\nexports.MultiSegmentArena = MultiSegmentArena;\n\nfunction allocate(minSize, m) {\n  var b = new ArrayBuffer(util_1.padToWord(Math.max(minSize, constants_1.DEFAULT_BUFFER_SIZE)));\n  m.buffers.push(b);\n  return new arena_allocation_result_1.ArenaAllocationResult(m.buffers.length - 1, b);\n}\n\nexports.allocate = allocate;\n\nfunction getBuffer(id, m) {\n  if (id < 0 || id >= m.buffers.length) throw new Error(util_1.format(errors_1.SEG_ID_OUT_OF_BOUNDS, id));\n  return m.buffers[id];\n}\n\nexports.getBuffer = getBuffer;\n\nfunction getNumSegments(m) {\n  return m.buffers.length;\n}\n\nexports.getNumSegments = getNumSegments;","map":{"version":3,"sources":["serialization/arena/multi-segment-arena.ts"],"names":[],"mappings":";AAAA;;AAEG;;;;;;AAEH,IAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AACA,IAAA,WAAA,GAAA,OAAA,CAAA,iBAAA,CAAA;;AACA,IAAA,QAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,IAAA,yBAAA,GAAA,OAAA,CAAA,2BAAA,CAAA;;AACA,IAAA,YAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AAEA,IAAM,KAAK,GAAG,OAAA,CAAA,OAAA,CAAU,mBAAV,CAAd;AACA,KAAK,CAAC,MAAD,CAAL;;AAEA,IAAA,iBAAA;AAAA;AAAA,YAAA;AASE,WAAA,iBAAA,CAAY,OAAZ,EAAuC;AAA3B,QAAA,OAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,OAAA,GAAA,EAAA;AAA2B;;AAF9B,SAAA,IAAA,GAAO,YAAA,CAAA,SAAA,CAAU,aAAjB;AAIP,SAAK,OAAL,GAAe,OAAf;AAEA,IAAA,KAAK,CAAC,QAAD,EAAW,IAAX,CAAL;AAED;;AAED,EAAA,iBAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AAAa,WAAO,MAAA,CAAA,MAAA,CAAO,+BAAP,EAAwC,cAAc,CAAC,IAAD,CAAtD,CAAP;AAAuE,GAApF;;AAfgB,EAAA,iBAAA,CAAA,QAAA,GAAW,QAAX;AACA,EAAA,iBAAA,CAAA,SAAA,GAAY,SAAZ;AACA,EAAA,iBAAA,CAAA,cAAA,GAAiB,cAAjB;AAelB,SAAA,iBAAA;AAAC,CAnBD,EAAA;;AAAa,OAAA,CAAA,iBAAA,GAAA,iBAAA;;AAqBb,SAAA,QAAA,CAAyB,OAAzB,EAA0C,CAA1C,EAA8D;AAE5D,MAAM,CAAC,GAAG,IAAI,WAAJ,CAAgB,MAAA,CAAA,SAAA,CAAU,IAAI,CAAC,GAAL,CAAS,OAAT,EAAkB,WAAA,CAAA,mBAAlB,CAAV,CAAhB,CAAV;AACA,EAAA,CAAC,CAAC,OAAF,CAAU,IAAV,CAAe,CAAf;AAEA,SAAO,IAAI,yBAAA,CAAA,qBAAJ,CAA0B,CAAC,CAAC,OAAF,CAAU,MAAV,GAAmB,CAA7C,EAAgD,CAAhD,CAAP;AAED;;AAPD,OAAA,CAAA,QAAA,GAAA,QAAA;;AASA,SAAA,SAAA,CAA0B,EAA1B,EAAsC,CAAtC,EAA0D;AAExD,MAAI,EAAE,GAAG,CAAL,IAAU,EAAE,IAAI,CAAC,CAAC,OAAF,CAAU,MAA9B,EAAsC,MAAM,IAAI,KAAJ,CAAU,MAAA,CAAA,MAAA,CAAO,QAAA,CAAA,oBAAP,EAA6B,EAA7B,CAAV,CAAN;AAEtC,SAAO,CAAC,CAAC,OAAF,CAAU,EAAV,CAAP;AAED;;AAND,OAAA,CAAA,SAAA,GAAA,SAAA;;AAQA,SAAA,cAAA,CAA+B,CAA/B,EAAmD;AAEjD,SAAO,CAAC,CAAC,OAAF,CAAU,MAAjB;AAED;;AAJD,OAAA,CAAA,cAAA,GAAA,cAAA","sourceRoot":"../../../src","sourcesContent":["\"use strict\";\n/**\n * @author jdiaz5513\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar debug_1 = require(\"debug\");\nvar constants_1 = require(\"../../constants\");\nvar errors_1 = require(\"../../errors\");\nvar util_1 = require(\"../../util\");\nvar arena_allocation_result_1 = require(\"./arena-allocation-result\");\nvar arena_kind_1 = require(\"./arena-kind\");\nvar trace = debug_1.default('capnp:arena:multi');\ntrace('load');\nvar MultiSegmentArena = /** @class */ (function () {\n    function MultiSegmentArena(buffers) {\n        if (buffers === void 0) { buffers = []; }\n        this.kind = arena_kind_1.ArenaKind.MULTI_SEGMENT;\n        this.buffers = buffers;\n        trace('new %s', this);\n    }\n    MultiSegmentArena.prototype.toString = function () { return util_1.format('MultiSegmentArena_segments:%d', getNumSegments(this)); };\n    MultiSegmentArena.allocate = allocate;\n    MultiSegmentArena.getBuffer = getBuffer;\n    MultiSegmentArena.getNumSegments = getNumSegments;\n    return MultiSegmentArena;\n}());\nexports.MultiSegmentArena = MultiSegmentArena;\nfunction allocate(minSize, m) {\n    var b = new ArrayBuffer(util_1.padToWord(Math.max(minSize, constants_1.DEFAULT_BUFFER_SIZE)));\n    m.buffers.push(b);\n    return new arena_allocation_result_1.ArenaAllocationResult(m.buffers.length - 1, b);\n}\nexports.allocate = allocate;\nfunction getBuffer(id, m) {\n    if (id < 0 || id >= m.buffers.length)\n        throw new Error(util_1.format(errors_1.SEG_ID_OUT_OF_BOUNDS, id));\n    return m.buffers[id];\n}\nexports.getBuffer = getBuffer;\nfunction getNumSegments(m) {\n    return m.buffers.length;\n}\nexports.getNumSegments = getNumSegments;\n\n//# sourceMappingURL=multi-segment-arena.js.map\n"]},"metadata":{},"sourceType":"script"}