{"ast":null,"code":"'use strict';\n/* @flow */\n\nvar quantileSorted = require('./quantile_sorted');\n\nvar quickselect = require('./quickselect');\n/**\n * The [quantile](https://en.wikipedia.org/wiki/Quantile):\n * this is a population quantile, since we assume to know the entire\n * dataset in this library. This is an implementation of the\n * [Quantiles of a Population](http://en.wikipedia.org/wiki/Quantile#Quantiles_of_a_population)\n * algorithm from wikipedia.\n *\n * Sample is a one-dimensional array of numbers,\n * and p is either a decimal number from 0 to 1 or an array of decimal\n * numbers from 0 to 1.\n * In terms of a k/q quantile, p = k/q - it's just dealing with fractions or dealing\n * with decimal values.\n * When p is an array, the result of the function is also an array containing the appropriate\n * quantiles in input order\n *\n * @param {Array<number>} x sample of one or more numbers\n * @param {number} p the desired quantile, as a number between 0 and 1\n * @returns {number} quantile\n * @example\n * quantile([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9\n */\n\n\nfunction quantile(x\n/*: Array<number> */\n, p\n/*: Array<number> | number */\n) {\n  var copy = x.slice();\n\n  if (Array.isArray(p)) {\n    // rearrange elements so that each element corresponding to a requested\n    // quantile is on a place it would be if the array was fully sorted\n    multiQuantileSelect(copy, p); // Initialize the result array\n\n    var results = []; // For each requested quantile\n\n    for (var i = 0; i < p.length; i++) {\n      results[i] = quantileSorted(copy, p[i]);\n    }\n\n    return results;\n  } else {\n    var idx = quantileIndex(copy.length, p);\n    quantileSelect(copy, idx, 0, copy.length - 1);\n    return quantileSorted(copy, p);\n  }\n}\n\nfunction quantileSelect(arr, k, left, right) {\n  if (k % 1 === 0) {\n    quickselect(arr, k, left, right);\n  } else {\n    k = Math.floor(k);\n    quickselect(arr, k, left, right);\n    quickselect(arr, k + 1, k + 1, right);\n  }\n}\n\nfunction multiQuantileSelect(arr, p) {\n  var indices = [0];\n\n  for (var i = 0; i < p.length; i++) {\n    indices.push(quantileIndex(arr.length, p[i]));\n  }\n\n  indices.push(arr.length - 1);\n  indices.sort(compare);\n  var stack = [0, indices.length - 1];\n\n  while (stack.length) {\n    var r = Math.ceil(stack.pop());\n    var l = Math.floor(stack.pop());\n    if (r - l <= 1) continue;\n    var m = Math.floor((l + r) / 2);\n    quantileSelect(arr, indices[m], indices[l], indices[r]);\n    stack.push(l, m, m, r);\n  }\n}\n\nfunction compare(a, b) {\n  return a - b;\n}\n\nfunction quantileIndex(len\n/*: number */\n, p\n/*: number */\n)\n/*:number*/\n{\n  var idx = len * p;\n\n  if (p === 1) {\n    // If p is 1, directly return the last index\n    return len - 1;\n  } else if (p === 0) {\n    // If p is 0, directly return the first index\n    return 0;\n  } else if (idx % 1 !== 0) {\n    // If index is not integer, return the next index in array\n    return Math.ceil(idx) - 1;\n  } else if (len % 2 === 0) {\n    // If the list has even-length, we'll return the middle of two indices\n    // around quantile to indicate that we need an average value of the two\n    return idx - 0.5;\n  } else {\n    // Finally, in the simple case of an integer index\n    // with an odd-length list, return the index\n    return idx;\n  }\n}\n\nmodule.exports = quantile;","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/simple-statistics/src/quantile.js"],"names":["quantileSorted","require","quickselect","quantile","x","p","copy","slice","Array","isArray","multiQuantileSelect","results","i","length","idx","quantileIndex","quantileSelect","arr","k","left","right","Math","floor","indices","push","sort","compare","stack","r","ceil","pop","l","m","a","b","len","module","exports"],"mappings":"AAAA;AACA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,mBAAD,CAA5B;;AACA,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAAzB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,QAAT,CAAkBC;AAAE;AAApB,EAA0CC;AAAE;AAA5C,EAA2E;AACvE,MAAIC,IAAI,GAAGF,CAAC,CAACG,KAAF,EAAX;;AAEA,MAAIC,KAAK,CAACC,OAAN,CAAcJ,CAAd,CAAJ,EAAsB;AAClB;AACA;AACAK,IAAAA,mBAAmB,CAACJ,IAAD,EAAOD,CAAP,CAAnB,CAHkB,CAIlB;;AACA,QAAIM,OAAO,GAAG,EAAd,CALkB,CAMlB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,CAAC,CAACQ,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AAC/BD,MAAAA,OAAO,CAACC,CAAD,CAAP,GAAaZ,cAAc,CAACM,IAAD,EAAOD,CAAC,CAACO,CAAD,CAAR,CAA3B;AACH;;AACD,WAAOD,OAAP;AACH,GAXD,MAWO;AACH,QAAIG,GAAG,GAAGC,aAAa,CAACT,IAAI,CAACO,MAAN,EAAcR,CAAd,CAAvB;AACAW,IAAAA,cAAc,CAACV,IAAD,EAAOQ,GAAP,EAAY,CAAZ,EAAeR,IAAI,CAACO,MAAL,GAAc,CAA7B,CAAd;AACA,WAAOb,cAAc,CAACM,IAAD,EAAOD,CAAP,CAArB;AACH;AACJ;;AAED,SAASW,cAAT,CAAwBC,GAAxB,EAA6BC,CAA7B,EAAgCC,IAAhC,EAAsCC,KAAtC,EAA6C;AACzC,MAAIF,CAAC,GAAG,CAAJ,KAAU,CAAd,EAAiB;AACbhB,IAAAA,WAAW,CAACe,GAAD,EAAMC,CAAN,EAASC,IAAT,EAAeC,KAAf,CAAX;AACH,GAFD,MAEO;AACHF,IAAAA,CAAC,GAAGG,IAAI,CAACC,KAAL,CAAWJ,CAAX,CAAJ;AACAhB,IAAAA,WAAW,CAACe,GAAD,EAAMC,CAAN,EAASC,IAAT,EAAeC,KAAf,CAAX;AACAlB,IAAAA,WAAW,CAACe,GAAD,EAAMC,CAAC,GAAG,CAAV,EAAaA,CAAC,GAAG,CAAjB,EAAoBE,KAApB,CAAX;AACH;AACJ;;AAED,SAASV,mBAAT,CAA6BO,GAA7B,EAAkCZ,CAAlC,EAAqC;AACjC,MAAIkB,OAAO,GAAG,CAAC,CAAD,CAAd;;AACA,OAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,CAAC,CAACQ,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AAC/BW,IAAAA,OAAO,CAACC,IAAR,CAAaT,aAAa,CAACE,GAAG,CAACJ,MAAL,EAAaR,CAAC,CAACO,CAAD,CAAd,CAA1B;AACH;;AACDW,EAAAA,OAAO,CAACC,IAAR,CAAaP,GAAG,CAACJ,MAAJ,GAAa,CAA1B;AACAU,EAAAA,OAAO,CAACE,IAAR,CAAaC,OAAb;AAEA,MAAIC,KAAK,GAAG,CAAC,CAAD,EAAIJ,OAAO,CAACV,MAAR,GAAiB,CAArB,CAAZ;;AAEA,SAAOc,KAAK,CAACd,MAAb,EAAqB;AACjB,QAAIe,CAAC,GAAGP,IAAI,CAACQ,IAAL,CAAUF,KAAK,CAACG,GAAN,EAAV,CAAR;AACA,QAAIC,CAAC,GAAGV,IAAI,CAACC,KAAL,CAAWK,KAAK,CAACG,GAAN,EAAX,CAAR;AACA,QAAIF,CAAC,GAAGG,CAAJ,IAAS,CAAb,EAAgB;AAEhB,QAAIC,CAAC,GAAGX,IAAI,CAACC,KAAL,CAAW,CAACS,CAAC,GAAGH,CAAL,IAAU,CAArB,CAAR;AACAZ,IAAAA,cAAc,CAACC,GAAD,EAAMM,OAAO,CAACS,CAAD,CAAb,EAAkBT,OAAO,CAACQ,CAAD,CAAzB,EAA8BR,OAAO,CAACK,CAAD,CAArC,CAAd;AAEAD,IAAAA,KAAK,CAACH,IAAN,CAAWO,CAAX,EAAcC,CAAd,EAAiBA,CAAjB,EAAoBJ,CAApB;AACH;AACJ;;AAED,SAASF,OAAT,CAAiBO,CAAjB,EAAoBC,CAApB,EAAuB;AACnB,SAAOD,CAAC,GAAGC,CAAX;AACH;;AAED,SAASnB,aAAT,CAAuBoB;AAAI;AAA3B,EAA0C9B;AAAE;AAA5C;AAA0D;AAAY;AAClE,MAAIS,GAAG,GAAGqB,GAAG,GAAG9B,CAAhB;;AACA,MAAIA,CAAC,KAAK,CAAV,EAAa;AACT;AACA,WAAO8B,GAAG,GAAG,CAAb;AACH,GAHD,MAGO,IAAI9B,CAAC,KAAK,CAAV,EAAa;AAChB;AACA,WAAO,CAAP;AACH,GAHM,MAGA,IAAIS,GAAG,GAAG,CAAN,KAAY,CAAhB,EAAmB;AACtB;AACA,WAAOO,IAAI,CAACQ,IAAL,CAAUf,GAAV,IAAiB,CAAxB;AACH,GAHM,MAGA,IAAIqB,GAAG,GAAG,CAAN,KAAY,CAAhB,EAAmB;AACtB;AACA;AACA,WAAOrB,GAAG,GAAG,GAAb;AACH,GAJM,MAIA;AACH;AACA;AACA,WAAOA,GAAP;AACH;AACJ;;AAEDsB,MAAM,CAACC,OAAP,GAAiBlC,QAAjB","sourcesContent":["'use strict';\n/* @flow */\n\nvar quantileSorted = require('./quantile_sorted');\nvar quickselect = require('./quickselect');\n\n/**\n * The [quantile](https://en.wikipedia.org/wiki/Quantile):\n * this is a population quantile, since we assume to know the entire\n * dataset in this library. This is an implementation of the\n * [Quantiles of a Population](http://en.wikipedia.org/wiki/Quantile#Quantiles_of_a_population)\n * algorithm from wikipedia.\n *\n * Sample is a one-dimensional array of numbers,\n * and p is either a decimal number from 0 to 1 or an array of decimal\n * numbers from 0 to 1.\n * In terms of a k/q quantile, p = k/q - it's just dealing with fractions or dealing\n * with decimal values.\n * When p is an array, the result of the function is also an array containing the appropriate\n * quantiles in input order\n *\n * @param {Array<number>} x sample of one or more numbers\n * @param {number} p the desired quantile, as a number between 0 and 1\n * @returns {number} quantile\n * @example\n * quantile([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9\n */\nfunction quantile(x /*: Array<number> */, p /*: Array<number> | number */) {\n    var copy = x.slice();\n\n    if (Array.isArray(p)) {\n        // rearrange elements so that each element corresponding to a requested\n        // quantile is on a place it would be if the array was fully sorted\n        multiQuantileSelect(copy, p);\n        // Initialize the result array\n        var results = [];\n        // For each requested quantile\n        for (var i = 0; i < p.length; i++) {\n            results[i] = quantileSorted(copy, p[i]);\n        }\n        return results;\n    } else {\n        var idx = quantileIndex(copy.length, p);\n        quantileSelect(copy, idx, 0, copy.length - 1);\n        return quantileSorted(copy, p);\n    }\n}\n\nfunction quantileSelect(arr, k, left, right) {\n    if (k % 1 === 0) {\n        quickselect(arr, k, left, right);\n    } else {\n        k = Math.floor(k);\n        quickselect(arr, k, left, right);\n        quickselect(arr, k + 1, k + 1, right);\n    }\n}\n\nfunction multiQuantileSelect(arr, p) {\n    var indices = [0];\n    for (var i = 0; i < p.length; i++) {\n        indices.push(quantileIndex(arr.length, p[i]));\n    }\n    indices.push(arr.length - 1);\n    indices.sort(compare);\n\n    var stack = [0, indices.length - 1];\n\n    while (stack.length) {\n        var r = Math.ceil(stack.pop());\n        var l = Math.floor(stack.pop());\n        if (r - l <= 1) continue;\n\n        var m = Math.floor((l + r) / 2);\n        quantileSelect(arr, indices[m], indices[l], indices[r]);\n\n        stack.push(l, m, m, r);\n    }\n}\n\nfunction compare(a, b) {\n    return a - b;\n}\n\nfunction quantileIndex(len /*: number */, p /*: number */)/*:number*/ {\n    var idx = len * p;\n    if (p === 1) {\n        // If p is 1, directly return the last index\n        return len - 1;\n    } else if (p === 0) {\n        // If p is 0, directly return the first index\n        return 0;\n    } else if (idx % 1 !== 0) {\n        // If index is not integer, return the next index in array\n        return Math.ceil(idx) - 1;\n    } else if (len % 2 === 0) {\n        // If the list has even-length, we'll return the middle of two indices\n        // around quantile to indicate that we need an average value of the two\n        return idx - 0.5;\n    } else {\n        // Finally, in the simple case of an integer index\n        // with an odd-length list, return the index\n        return idx;\n    }\n}\n\nmodule.exports = quantile;\n"]},"metadata":{},"sourceType":"script"}