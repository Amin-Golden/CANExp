{"ast":null,"code":"'use strict';\n/* @flow */\n\nvar mean = require('./mean');\n/**\n * The sum of deviations to the Nth power.\n * When n=2 it's the sum of squared deviations.\n * When n=3 it's the sum of cubed deviations.\n *\n * @param {Array<number>} x\n * @param {number} n power\n * @returns {number} sum of nth power deviations\n * @example\n * var input = [1, 2, 3];\n * // since the variance of a set is the mean squared\n * // deviations, we can calculate that with sumNthPowerDeviations:\n * var variance = sumNthPowerDeviations(input) / input.length;\n */\n\n\nfunction sumNthPowerDeviations(x\n/*: Array<number> */\n, n\n/*: number */\n)\n/*:number*/\n{\n  var meanValue = mean(x),\n      sum = 0,\n      tempValue,\n      i; // This is an optimization: when n is 2 (we're computing a number squared),\n  // multiplying the number by itself is significantly faster than using\n  // the Math.pow method.\n\n  if (n === 2) {\n    for (i = 0; i < x.length; i++) {\n      tempValue = x[i] - meanValue;\n      sum += tempValue * tempValue;\n    }\n  } else {\n    for (i = 0; i < x.length; i++) {\n      sum += Math.pow(x[i] - meanValue, n);\n    }\n  }\n\n  return sum;\n}\n\nmodule.exports = sumNthPowerDeviations;","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/simple-statistics/src/sum_nth_power_deviations.js"],"names":["mean","require","sumNthPowerDeviations","x","n","meanValue","sum","tempValue","i","length","Math","pow","module","exports"],"mappings":"AAAA;AACA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,qBAAT,CAA+BC;AAAC;AAAhC,EAAsDC;AAAC;AAAvD;AAAqE;AAAY;AAC7E,MAAIC,SAAS,GAAGL,IAAI,CAACG,CAAD,CAApB;AAAA,MACIG,GAAG,GAAG,CADV;AAAA,MAEIC,SAFJ;AAAA,MAGIC,CAHJ,CAD6E,CAM7E;AACA;AACA;;AACA,MAAIJ,CAAC,KAAK,CAAV,EAAa;AACT,SAAKI,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGL,CAAC,CAACM,MAAlB,EAA0BD,CAAC,EAA3B,EAA+B;AAC3BD,MAAAA,SAAS,GAAGJ,CAAC,CAACK,CAAD,CAAD,GAAOH,SAAnB;AACAC,MAAAA,GAAG,IAAIC,SAAS,GAAGA,SAAnB;AACH;AACJ,GALD,MAKO;AACH,SAAKC,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAGL,CAAC,CAACM,MAAlB,EAA0BD,CAAC,EAA3B,EAA+B;AAC3BF,MAAAA,GAAG,IAAII,IAAI,CAACC,GAAL,CAASR,CAAC,CAACK,CAAD,CAAD,GAAOH,SAAhB,EAA2BD,CAA3B,CAAP;AACH;AACJ;;AAED,SAAOE,GAAP;AACH;;AAEDM,MAAM,CAACC,OAAP,GAAiBX,qBAAjB","sourcesContent":["'use strict';\n/* @flow */\n\nvar mean = require('./mean');\n\n/**\n * The sum of deviations to the Nth power.\n * When n=2 it's the sum of squared deviations.\n * When n=3 it's the sum of cubed deviations.\n *\n * @param {Array<number>} x\n * @param {number} n power\n * @returns {number} sum of nth power deviations\n * @example\n * var input = [1, 2, 3];\n * // since the variance of a set is the mean squared\n * // deviations, we can calculate that with sumNthPowerDeviations:\n * var variance = sumNthPowerDeviations(input) / input.length;\n */\nfunction sumNthPowerDeviations(x/*: Array<number> */, n/*: number */)/*:number*/ {\n    var meanValue = mean(x),\n        sum = 0,\n        tempValue,\n        i;\n\n    // This is an optimization: when n is 2 (we're computing a number squared),\n    // multiplying the number by itself is significantly faster than using\n    // the Math.pow method.\n    if (n === 2) {\n        for (i = 0; i < x.length; i++) {\n            tempValue = x[i] - meanValue;\n            sum += tempValue * tempValue;\n        }\n    } else {\n        for (i = 0; i < x.length; i++) {\n            sum += Math.pow(x[i] - meanValue, n);\n        }\n    }\n\n    return sum;\n}\n\nmodule.exports = sumNthPowerDeviations;\n"]},"metadata":{},"sourceType":"script"}