{"ast":null,"code":"var _jsxFileName = \"/home/amax/Autoro/cabana/src/components/SignalLegend.js\";\n// SignalLegend.js\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport SignalLegendEntry from './SignalLegendEntry';\nexport default class SignalLegend extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      expandedSignals: []\n    };\n\n    this.toggleExpandSignal = s => {\n      const {\n        expandedSignals\n      } = this.state;\n\n      if (!expandedSignals.includes(s.uid)) {\n        const updatedExpandedSignals = [...expandedSignals, s.uid];\n        this.setState({\n          expandedSignals: updatedExpandedSignals\n        });\n      } else {\n        const updatedExpandedSignals = expandedSignals.filter(i => i !== s.uid);\n        this.setState({\n          expandedSignals: updatedExpandedSignals\n        });\n      }\n    };\n  }\n\n  checkExpandedSignal(s) {\n    return this.state.expandedSignals.includes(s);\n  }\n\n  render() {\n    const {\n      signals,\n      highlightedSignal,\n      selectedMessageKey\n    } = this.props;\n    const signalRowsNested = Object.entries(signals).sort((_ref, _ref2) => {\n      let [_, signal1] = _ref;\n      let [__, signal2] = _ref2;\n\n      if (signal1.startBit < signal2.startBit) {\n        return -1;\n      }\n\n      return 1;\n    }).map(_ref3 => {\n      let [signalName, signal] = _ref3;\n      const colors = signals[signalName].getColors(selectedMessageKey);\n      const isHighlighted = highlightedSignal === signalName;\n      return /*#__PURE__*/React.createElement(SignalLegendEntry, {\n        key: signal.uid,\n        signal: signal,\n        isHighlighted: isHighlighted,\n        color: colors,\n        onSignalHover: this.props.onSignalHover,\n        onSignalHoverEnd: this.props.onSignalHoverEnd,\n        onTentativeSignalChange: this.props.onTentativeSignalChange,\n        onSignalChange: this.props.onSignalChange,\n        onSignalRemove: this.props.onSignalRemove,\n        onSignalPlotChange: this.props.onSignalPlotChange,\n        toggleExpandSignal: this.toggleExpandSignal,\n        isPlotted: this.props.plottedSignalUids.indexOf(signal.uid) !== -1,\n        isExpanded: this.checkExpandedSignal(signal.uid),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 11\n        }\n      });\n    });\n    const signalRows = signalRowsNested.filter(row => row != null).reduce((a, b) => a.concat(b), []);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cabana-explorer-signals-legend\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 12\n      }\n    }, signalRows);\n  }\n\n}\nSignalLegend.propTypes = {\n  signals: PropTypes.object,\n  signalStyles: PropTypes.object,\n  highlightedSignal: PropTypes.string,\n  onSignalHover: PropTypes.func,\n  onSignalHoverEnd: PropTypes.func,\n  onTentativeSignalChange: PropTypes.func,\n  onSignalChange: PropTypes.func,\n  onSignalRemove: PropTypes.func,\n  onSignalPlotChange: PropTypes.func,\n  plottedSignalUids: PropTypes.array,\n  selectedMessageKey: PropTypes.string\n};","map":{"version":3,"sources":["/home/amax/Autoro/cabana/src/components/SignalLegend.js"],"names":["React","Component","PropTypes","SignalLegendEntry","SignalLegend","state","expandedSignals","toggleExpandSignal","s","includes","uid","updatedExpandedSignals","setState","filter","i","checkExpandedSignal","render","signals","highlightedSignal","selectedMessageKey","props","signalRowsNested","Object","entries","sort","_","signal1","__","signal2","startBit","map","signalName","signal","colors","getColors","isHighlighted","onSignalHover","onSignalHoverEnd","onTentativeSignalChange","onSignalChange","onSignalRemove","onSignalPlotChange","plottedSignalUids","indexOf","signalRows","row","reduce","a","b","concat","propTypes","object","signalStyles","string","func","array"],"mappings":"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","sourcesContent":["// SignalLegend.js\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport SignalLegendEntry from './SignalLegendEntry';\n\nexport default class SignalLegend extends Component {\n  static propTypes = {\n    signals: PropTypes.object,\n    signalStyles: PropTypes.object,\n    highlightedSignal: PropTypes.string,\n    onSignalHover: PropTypes.func,\n    onSignalHoverEnd: PropTypes.func,\n    onTentativeSignalChange: PropTypes.func,\n    onSignalChange: PropTypes.func,\n    onSignalRemove: PropTypes.func,\n    onSignalPlotChange: PropTypes.func,\n    plottedSignalUids: PropTypes.array,\n    selectedMessageKey: PropTypes.string\n  };\n\n  state = {\n    expandedSignals: []\n  };\n\n  toggleExpandSignal = (s) => {\n    const { expandedSignals } = this.state;\n    if (!expandedSignals.includes(s.uid)) {\n      const updatedExpandedSignals = [...expandedSignals, s.uid];\n      this.setState({ expandedSignals: updatedExpandedSignals });\n    } else {\n      const updatedExpandedSignals = expandedSignals.filter((i) => i !== s.uid);\n      this.setState({ expandedSignals: updatedExpandedSignals });\n    }\n  };\n\n  checkExpandedSignal(s) {\n    return this.state.expandedSignals.includes(s);\n  }\n\n  render() {\n    const { signals, highlightedSignal, selectedMessageKey } = this.props;\n    const signalRowsNested = Object.entries(signals)\n      .sort(([_, signal1], [__, signal2]) => {\n        if (signal1.startBit < signal2.startBit) {\n          return -1;\n        }\n        return 1;\n      })\n      .map(([signalName, signal]) => {\n        const colors = signals[signalName].getColors(selectedMessageKey);\n        const isHighlighted = highlightedSignal === signalName;\n\n        return (\n          <SignalLegendEntry\n            key={signal.uid}\n            signal={signal}\n            isHighlighted={isHighlighted}\n            color={colors}\n            onSignalHover={this.props.onSignalHover}\n            onSignalHoverEnd={this.props.onSignalHoverEnd}\n            onTentativeSignalChange={this.props.onTentativeSignalChange}\n            onSignalChange={this.props.onSignalChange}\n            onSignalRemove={this.props.onSignalRemove}\n            onSignalPlotChange={this.props.onSignalPlotChange}\n            toggleExpandSignal={this.toggleExpandSignal}\n            isPlotted={this.props.plottedSignalUids.indexOf(signal.uid) !== -1}\n            isExpanded={this.checkExpandedSignal(signal.uid)}\n          />\n        );\n      });\n\n    const signalRows = signalRowsNested\n      .filter((row) => row != null)\n      .reduce((a, b) => a.concat(b), []);\n\n    return <div className=\"cabana-explorer-signals-legend\">{signalRows}</div>;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}