{"ast":null,"code":"import qs from 'query-string';\nimport CommaAuth, { config as AuthConfig, storage as AuthStorage } from '@commaai/my-comma-auth';\nimport { auth as AuthApi, request as Request } from '@commaai/comma-api';\nimport Sentry from './logging/Sentry';\nimport { getUrlParameter, modifyQueryParameters } from './utils/url';\nimport { GITHUB_AUTH_TOKEN_KEY } from './config';\nimport { fetchPersistedDbc, fetchPersistedGithubAuthToken, persistGithubAuthToken } from './api/localstorage';\nimport { demoProps } from './demo';\n\nasync function authenticate() {\n  if (window.location && window.location.pathname === AuthConfig.AUTH_PATH) {\n    try {\n      const {\n        code,\n        provider\n      } = qs.parse(window.location.search);\n      const token = await AuthApi.refreshAccessToken(code, provider);\n\n      if (token) {\n        AuthStorage.setCommaAccessToken(token); // reset stored path\n\n        if (window.sessionStorage) {\n          const onboardingPath = window.sessionStorage.getItem('onboardingPath');\n\n          if (onboardingPath) {\n            window.sessionStorage.removeItem('onboardingPath');\n            window.location = onboardingPath;\n          }\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const token = await CommaAuth.init();\n\n  if (token) {\n    Request.configure(token);\n  }\n}\n\nexport default function init() {\n  Sentry.init();\n  const routeFullName = getUrlParameter('route');\n  const isDemo = !!getUrlParameter('demo');\n  let segments = getUrlParameter('segments');\n\n  if (segments && segments.length) {\n    segments = segments.split(',').map(Number);\n\n    if (segments.length !== 2) {\n      segments = undefined;\n    }\n  }\n\n  let props = {\n    autoplay: true,\n    startTime: Number(getUrlParameter('seekTime') || 0),\n    segments,\n    isDemo\n  };\n  let persistedDbc = null;\n\n  if (routeFullName) {\n    const [dongleId, route] = routeFullName.split('|');\n    props.dongleId = dongleId;\n    props.name = route;\n    persistedDbc = fetchPersistedDbc(routeFullName);\n    const max = getUrlParameter('max');\n    const url = getUrlParameter('url');\n    const exp = getUrlParameter('exp');\n    const sig = getUrlParameter('sig');\n\n    if (max) {\n      props.max = parseInt(max);\n    }\n\n    if (url) {\n      props.url = url;\n    }\n\n    if (exp) {\n      props.exp = exp;\n    }\n\n    if (sig) {\n      props.sig = sig;\n    }\n\n    props.isLegacyShare = max && url && !exp && !sig;\n    props.isShare = max && url && exp && sig;\n  } else if (isDemo) {\n    props = { ...props,\n      ...demoProps\n    };\n  }\n\n  if (persistedDbc) {\n    const {\n      dbcFilename,\n      dbc\n    } = persistedDbc;\n    props.dbc = dbc;\n    props.dbcFilename = dbcFilename;\n  }\n\n  const authTokenQueryParam = getUrlParameter(GITHUB_AUTH_TOKEN_KEY);\n\n  if (authTokenQueryParam !== null) {\n    props.githubAuthToken = authTokenQueryParam;\n    persistGithubAuthToken(authTokenQueryParam);\n    const urlNoAuthToken = modifyQueryParameters({\n      remove: [GITHUB_AUTH_TOKEN_KEY]\n    });\n    window.location.href = urlNoAuthToken;\n  } else {\n    props.githubAuthToken = fetchPersistedGithubAuthToken();\n  }\n\n  return new Promise(resolve => {\n    authenticate().then(() => {\n      resolve(props);\n    });\n  });\n}","map":{"version":3,"sources":["/home/amax/Autoro/cabana/src/init.js"],"names":["qs","CommaAuth","config","AuthConfig","storage","AuthStorage","auth","AuthApi","request","Request","Sentry","getUrlParameter","modifyQueryParameters","GITHUB_AUTH_TOKEN_KEY","fetchPersistedDbc","fetchPersistedGithubAuthToken","persistGithubAuthToken","demoProps","authenticate","window","location","pathname","AUTH_PATH","code","provider","parse","search","token","refreshAccessToken","setCommaAccessToken","sessionStorage","onboardingPath","getItem","removeItem","err","console","log","init","configure","routeFullName","isDemo","segments","length","split","map","Number","undefined","props","autoplay","startTime","persistedDbc","dongleId","route","name","max","url","exp","sig","parseInt","isLegacyShare","isShare","dbcFilename","dbc","authTokenQueryParam","githubAuthToken","urlNoAuthToken","remove","href","Promise","resolve","then"],"mappings":"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","sourcesContent":["import qs from 'query-string';\nimport CommaAuth, { config as AuthConfig, storage as AuthStorage } from '@commaai/my-comma-auth';\nimport { auth as AuthApi, request as Request } from '@commaai/comma-api';\nimport Sentry from './logging/Sentry';\nimport { getUrlParameter, modifyQueryParameters } from './utils/url';\nimport { GITHUB_AUTH_TOKEN_KEY } from './config';\nimport {\n  fetchPersistedDbc,\n  fetchPersistedGithubAuthToken,\n  persistGithubAuthToken\n} from './api/localstorage';\nimport { demoProps } from './demo';\n\nasync function authenticate() {\n  if (window.location && window.location.pathname === AuthConfig.AUTH_PATH) {\n    try {\n      const { code, provider } = qs.parse(window.location.search);\n      const token = await AuthApi.refreshAccessToken(code, provider);\n      if (token) {\n        AuthStorage.setCommaAccessToken(token);\n\n        // reset stored path\n        if (window.sessionStorage) {\n          const onboardingPath = window.sessionStorage.getItem('onboardingPath');\n          if (onboardingPath) {\n            window.sessionStorage.removeItem('onboardingPath');\n            window.location = onboardingPath;\n          }\n        }\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const token = await CommaAuth.init();\n  if (token) {\n    Request.configure(token);\n  }\n}\n\nexport default function init() {\n  Sentry.init();\n\n  const routeFullName = getUrlParameter('route');\n  const isDemo = !!getUrlParameter('demo');\n  let segments = getUrlParameter('segments');\n  if (segments && segments.length) {\n    segments = segments.split(',').map(Number);\n\n    if (segments.length !== 2) {\n      segments = undefined;\n    }\n  }\n\n  let props = {\n    autoplay: true,\n    startTime: Number(getUrlParameter('seekTime') || 0),\n    segments,\n    isDemo\n  };\n  let persistedDbc = null;\n\n  if (routeFullName) {\n    const [dongleId, route] = routeFullName.split('|');\n    props.dongleId = dongleId;\n    props.name = route;\n\n    persistedDbc = fetchPersistedDbc(routeFullName);\n\n    const max = getUrlParameter('max');\n    const url = getUrlParameter('url');\n    const exp = getUrlParameter('exp');\n    const sig = getUrlParameter('sig');\n\n    if (max) {\n      props.max = parseInt(max);\n    }\n    if (url) {\n      props.url = url;\n    }\n    if (exp) {\n      props.exp = exp;\n    }\n    if (sig) {\n      props.sig = sig;\n    }\n    props.isLegacyShare = max && url && !exp && !sig;\n    props.isShare = max && url && exp && sig;\n  } else if (isDemo) {\n    props = { ...props, ...demoProps };\n  }\n\n  if (persistedDbc) {\n    const { dbcFilename, dbc } = persistedDbc;\n    props.dbc = dbc;\n    props.dbcFilename = dbcFilename;\n  }\n\n  const authTokenQueryParam = getUrlParameter(GITHUB_AUTH_TOKEN_KEY);\n  if (authTokenQueryParam !== null) {\n    props.githubAuthToken = authTokenQueryParam;\n    persistGithubAuthToken(authTokenQueryParam);\n    const urlNoAuthToken = modifyQueryParameters({\n      remove: [GITHUB_AUTH_TOKEN_KEY]\n    });\n    window.location.href = urlNoAuthToken;\n  } else {\n    props.githubAuthToken = fetchPersistedGithubAuthToken();\n  }\n\n  return new Promise((resolve) => {\n    authenticate().then(() => {\n      resolve(props);\n    });\n  });\n}\n"]},"metadata":{},"sourceType":"module"}