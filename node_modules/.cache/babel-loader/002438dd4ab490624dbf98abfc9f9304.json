{"ast":null,"code":"\"use strict\";\n/**\n * @author jdiaz5513\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar debug_1 = require(\"debug\");\n\nvar errors_1 = require(\"../../errors\");\n\nvar util_1 = require(\"../../util\");\n\nvar list_element_size_1 = require(\"../list-element-size\");\n\nvar object_size_1 = require(\"../object-size\");\n\nvar pointer_1 = require(\"./pointer\");\n\nvar trace = debug_1.default('capnp:list');\ntrace('load');\n/**\n * A generic list class. Implements Filterable,\n */\n\nvar List =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(List, _super);\n\n  function List() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  List.toString = function () {\n    return this._capnp.displayName;\n  };\n\n  List.prototype.all = function (callbackfn) {\n    var length = this.getLength();\n\n    for (var i = 0; i < length; i++) {\n      if (!callbackfn(this.get(i), i)) return false;\n    }\n\n    return true;\n  };\n\n  List.prototype.any = function (callbackfn) {\n    var length = this.getLength();\n\n    for (var i = 0; i < length; i++) if (callbackfn(this.get(i), i)) return true;\n\n    return false;\n  };\n\n  List.prototype.ap = function (callbackfns) {\n    var _this = this;\n\n    var length = this.getLength();\n    var res = [];\n\n    var _loop_1 = function (i) {\n      res.push.apply(res, callbackfns.map(function (f) {\n        return f(_this.get(i), i);\n      }));\n    };\n\n    for (var i = 0; i < length; i++) {\n      _loop_1(i);\n    }\n\n    return res;\n  };\n\n  List.prototype.concat = function (other) {\n    var length = this.getLength();\n    var otherLength = other.getLength();\n    var res = new Array(length + otherLength);\n\n    for (var i = 0; i < length; i++) res[i] = this.get(i);\n\n    for (var i = 0; i < otherLength; i++) res[i + length] = other.get(i);\n\n    return res;\n  };\n\n  List.prototype.drop = function (n) {\n    var length = this.getLength();\n    var res = new Array(length);\n\n    for (var i = n; i < length; i++) res[i] = this.get(i);\n\n    return res;\n  };\n\n  List.prototype.dropWhile = function (callbackfn) {\n    var length = this.getLength();\n    var res = [];\n    var drop = true;\n\n    for (var i = 0; i < length; i++) {\n      var v = this.get(i);\n      if (drop) drop = callbackfn(v, i);\n      if (!drop) res.push(v);\n    }\n\n    return res;\n  };\n\n  List.prototype.empty = function () {\n    return [];\n  };\n\n  List.prototype.every = function (callbackfn) {\n    return this.all(callbackfn);\n  };\n\n  List.prototype.filter = function (callbackfn) {\n    var length = this.getLength();\n    var res = [];\n\n    for (var i = 0; i < length; i++) {\n      var value = this.get(i);\n      if (callbackfn(value, i)) res.push(value);\n    }\n\n    return res;\n  };\n\n  List.prototype.find = function (callbackfn) {\n    var length = this.getLength();\n\n    for (var i = 0; i < length; i++) {\n      var value = this.get(i);\n      if (callbackfn(value, i)) return value;\n    }\n\n    return undefined;\n  };\n\n  List.prototype.forEach = function (callbackfn) {\n    var length = this.getLength();\n\n    for (var i = 0; i < length; i++) callbackfn(this.get(i), i);\n  };\n\n  List.prototype.get = function (_index) {\n    throw new TypeError();\n  };\n  /**\n   * Get the length of this list.\n   *\n   * @returns {number} The number of elements in this list.\n   */\n\n\n  List.prototype.getLength = function () {\n    return pointer_1.getTargetListLength(this);\n  };\n\n  List.prototype.groupBy = function (callbackfn) {\n    var length = this.getLength();\n    var res = {};\n\n    for (var i = 0; i < length; i++) {\n      var v = this.get(i);\n      res[callbackfn(v, i)] = v;\n    }\n\n    return res;\n  };\n\n  List.prototype.intersperse = function (sep) {\n    var length = this.getLength();\n    var res = new Array(length);\n\n    for (var i = 0; i < length; i++) {\n      if (i > 0) res.push(sep);\n      res.push(this.get(i));\n    }\n\n    return res;\n  };\n\n  List.prototype.map = function (callbackfn) {\n    var length = this.getLength();\n    var res = new Array(length);\n\n    for (var i = 0; i < length; i++) res[i] = callbackfn(this.get(i), i);\n\n    return res;\n  };\n\n  List.prototype.reduce = function (callbackfn, initialValue) {\n    var i = 0;\n    var res;\n\n    if (initialValue === undefined) {\n      // LINT: It's okay, I know what I'm doing here.\n\n      /* tslint:disable-next-line:no-any */\n      res = this.get(0);\n      i++;\n    } else {\n      res = initialValue;\n    }\n\n    for (; i < this.getLength(); i++) res = callbackfn(res, this.get(i), i);\n\n    return res;\n  };\n\n  List.prototype.set = function (_index, _value) {\n    throw new TypeError();\n  };\n\n  List.prototype.slice = function (start, end) {\n    if (start === void 0) {\n      start = 0;\n    }\n\n    var length = end ? Math.min(this.getLength(), end) : this.getLength();\n    var res = new Array(length - start);\n\n    for (var i = start; i < length; i++) res[i] = this.get(i);\n\n    return res;\n  };\n\n  List.prototype.some = function (callbackfn) {\n    return this.any(callbackfn);\n  };\n\n  List.prototype.take = function (n) {\n    var length = Math.min(this.getLength(), n);\n    var res = new Array(length);\n\n    for (var i = 0; i < length; i++) res[i] = this.get(i);\n\n    return res;\n  };\n\n  List.prototype.takeWhile = function (callbackfn) {\n    var length = this.getLength();\n    var res = [];\n    var take;\n\n    for (var i = 0; i < length; i++) {\n      var v = this.get(i);\n      take = callbackfn(v, i);\n      if (!take) return res;\n      res.push(v);\n    }\n\n    return res;\n  };\n\n  List.prototype.toArray = function () {\n    return this.map(util_1.identity);\n  };\n\n  List.prototype.toString = function () {\n    return \"List_\" + _super.prototype.toString.call(this);\n  };\n\n  List._capnp = {\n    displayName: 'List<Generic>',\n    size: list_element_size_1.ListElementSize.VOID\n  };\n  List.initList = initList;\n  return List;\n}(pointer_1.Pointer);\n\nexports.List = List;\n/**\n * Initialize the list with the given element size and length. This will allocate new space for the list, ideally in\n * the same segment as this pointer.\n *\n * @param {ListElementSize} elementSize The size of each element in the list.\n * @param {number} length The number of elements in the list.\n * @param {List<T>} l The list to initialize.\n * @param {ObjectSize} [compositeSize] The size of each element in a composite list. This value is required for\n * composite lists.\n * @returns {void}\n */\n\nfunction initList(elementSize, length, l, compositeSize) {\n  var c;\n\n  switch (elementSize) {\n    case list_element_size_1.ListElementSize.BIT:\n      c = l.segment.allocate(Math.ceil(length / 8));\n      break;\n\n    case list_element_size_1.ListElementSize.BYTE:\n    case list_element_size_1.ListElementSize.BYTE_2:\n    case list_element_size_1.ListElementSize.BYTE_4:\n    case list_element_size_1.ListElementSize.BYTE_8:\n    case list_element_size_1.ListElementSize.POINTER:\n      c = l.segment.allocate(length * pointer_1.getListElementByteLength(elementSize));\n      break;\n\n    case list_element_size_1.ListElementSize.COMPOSITE:\n      if (compositeSize === undefined) throw new Error(util_1.format(errors_1.PTR_COMPOSITE_SIZE_UNDEFINED));\n      compositeSize = object_size_1.padToWord(compositeSize);\n      var byteLength = object_size_1.getByteLength(compositeSize) * length; // We need to allocate an extra 8 bytes for the tag word, then make sure we write the length to it. We advance\n      // the content pointer by 8 bytes so that it then points to the first list element as intended. Everything\n      // starts off zeroed out so these nested structs don't need to be initialized in any way.\n\n      c = l.segment.allocate(byteLength + 8);\n      pointer_1.setStructPointer(length, compositeSize, c);\n      trace('Wrote composite tag word %s for %s.', c, l);\n      break;\n\n    case list_element_size_1.ListElementSize.VOID:\n      // No need to allocate anything, we can write the list pointer right here.\n      pointer_1.setListPointer(0, elementSize, length, l);\n      return;\n\n    default:\n      throw new Error(util_1.format(errors_1.PTR_INVALID_LIST_SIZE, elementSize));\n  }\n\n  var res = pointer_1.initPointer(c.segment, c.byteOffset, l);\n  pointer_1.setListPointer(res.offsetWords, elementSize, length, res.pointer, compositeSize);\n}\n\nexports.initList = initList;","map":{"version":3,"sources":["serialization/pointers/list.ts"],"names":[],"mappings":";AAAA;;AAEG;;;;;;;;AAEH,IAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAEA,IAAA,QAAA,GAAA,OAAA,CAAA,cAAA,CAAA;;AACA,IAAA,MAAA,GAAA,OAAA,CAAA,YAAA,CAAA;;AACA,IAAA,mBAAA,GAAA,OAAA,CAAA,sBAAA,CAAA;;AACA,IAAA,aAAA,GAAA,OAAA,CAAA,gBAAA,CAAA;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAIA,IAAM,KAAK,GAAG,OAAA,CAAA,OAAA,CAAU,YAAV,CAAd;AACA,KAAK,CAAC,MAAD,CAAL;AAuBA;;AAEG;;AAEH,IAAA,IAAA;AAAA;AAAA,UAAA,MAAA,EAAA;AAA6B,EAAA,OAAA,CAAA,SAAA,CAAA,IAAA,EAAA,MAAA;;AAA7B,WAAA,IAAA,GAAA;;AAiSC;;AAzRQ,EAAA,IAAA,CAAA,QAAA,GAAP,YAAA;AAEE,WAAO,KAAK,MAAL,CAAY,WAAnB;AAED,GAJM;;AAMP,EAAA,IAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,UAAJ,EAAiC;AAE/B,QAAM,MAAM,GAAG,KAAK,SAAL,EAAf;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC;AAE/B,UAAI,CAAC,UAAU,CAAC,KAAK,GAAL,CAAS,CAAT,CAAD,EAAc,CAAd,CAAf,EAAiC,OAAO,KAAP;AAElC;;AAED,WAAO,IAAP;AAED,GAZD;;AAcA,EAAA,IAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,UAAJ,EAAiC;AAE/B,QAAM,MAAM,GAAG,KAAK,SAAL,EAAf;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC,IAAI,UAAU,CAAC,KAAK,GAAL,CAAS,CAAT,CAAD,EAAc,CAAd,CAAd,EAAgC,OAAO,IAAP;;AAEjE,WAAO,KAAP;AAED,GARD;;AAUA,EAAA,IAAA,CAAA,SAAA,CAAA,EAAA,GAAA,UAAM,WAAN,EAA+C;AAA/C,QAAA,KAAA,GAAA,IAAA;;AAEE,QAAM,MAAM,GAAG,KAAK,SAAL,EAAf;AACA,QAAM,GAAG,GAAQ,EAAjB;;4BAES,C,EAAC;AAAuB,MAAA,GAAG,CAAC,IAAJ,CAAQ,KAAR,CAAA,GAAA,EAAY,WAAW,CAAC,GAAZ,CAAgB,UAAC,CAAD,EAAE;AAAK,eAAA,CAAC,CAAC,KAAI,CAAC,GAAL,CAAS,CAAT,CAAD,EAAD,CAAC,CAAD;AAAiB,OAAxC,CAAZ;;;AAAjC,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAA+B;cAAtB,C;AAA+E;;AAExF,WAAO,GAAP;AAED,GATD;;AAWA,EAAA,IAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,KAAP,EAAqB;AAEnB,QAAM,MAAM,GAAG,KAAK,SAAL,EAAf;AACA,QAAM,WAAW,GAAG,KAAK,CAAC,SAAN,EAApB;AACA,QAAM,GAAG,GAAG,IAAI,KAAJ,CAAa,MAAM,GAAG,WAAtB,CAAZ;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC,GAAG,CAAC,CAAD,CAAH,GAAS,KAAK,GAAL,CAAS,CAAT,CAAT;;AAEjC,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,WAApB,EAAiC,CAAC,EAAlC,EAAsC,GAAG,CAAC,CAAC,GAAG,MAAL,CAAH,GAAkB,KAAK,CAAC,GAAN,CAAU,CAAV,CAAlB;;AAEtC,WAAO,GAAP;AAED,GAZD;;AAcA,EAAA,IAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,CAAL,EAAc;AAEZ,QAAM,MAAM,GAAG,KAAK,SAAL,EAAf;AACA,QAAM,GAAG,GAAQ,IAAI,KAAJ,CAAU,MAAV,CAAjB;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC,GAAG,CAAC,CAAD,CAAH,GAAS,KAAK,GAAL,CAAS,CAAT,CAAT;;AAEjC,WAAO,GAAP;AAED,GATD;;AAWA,EAAA,IAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,UAAV,EAAuC;AAErC,QAAM,MAAM,GAAG,KAAK,SAAL,EAAf;AACA,QAAM,GAAG,GAAQ,EAAjB;AACA,QAAI,IAAI,GAAG,IAAX;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC;AAE/B,UAAM,CAAC,GAAG,KAAK,GAAL,CAAS,CAAT,CAAV;AAEA,UAAI,IAAJ,EAAU,IAAI,GAAG,UAAU,CAAC,CAAD,EAAI,CAAJ,CAAjB;AAEV,UAAI,CAAC,IAAL,EAAW,GAAG,CAAC,IAAJ,CAAS,CAAT;AAEZ;;AAED,WAAO,GAAP;AAED,GAlBD;;AAoBA,EAAA,IAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AAAe,WAAO,EAAP;AAAmB,GAAlC;;AAEA,EAAA,IAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,UAAN,EAAmC;AAAa,WAAO,KAAK,GAAL,CAAS,UAAT,CAAP;AAA8B,GAA9E;;AAEA,EAAA,IAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAO,UAAP,EAAoC;AAElC,QAAM,MAAM,GAAG,KAAK,SAAL,EAAf;AACA,QAAM,GAAG,GAAQ,EAAjB;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC;AAE/B,UAAM,KAAK,GAAG,KAAK,GAAL,CAAS,CAAT,CAAd;AAEA,UAAI,UAAU,CAAC,KAAD,EAAQ,CAAR,CAAd,EAA0B,GAAG,CAAC,IAAJ,CAAS,KAAT;AAE3B;;AAED,WAAO,GAAP;AAED,GAfD;;AAiBA,EAAA,IAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,UAAL,EAAkC;AAEhC,QAAM,MAAM,GAAG,KAAK,SAAL,EAAf;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC;AAE/B,UAAM,KAAK,GAAG,KAAK,GAAL,CAAS,CAAT,CAAd;AAEA,UAAI,UAAU,CAAC,KAAD,EAAQ,CAAR,CAAd,EAA0B,OAAO,KAAP;AAE3B;;AAED,WAAO,SAAP;AAED,GAdD;;AAgBA,EAAA,IAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,UAAR,EAAiE;AAE/D,QAAM,MAAM,GAAG,KAAK,SAAL,EAAf;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC,UAAU,CAAC,KAAK,GAAL,CAAS,CAAT,CAAD,EAAc,CAAd,CAAV;AAElC,GAND;;AAQA,EAAA,IAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,MAAJ,EAAkB;AAEhB,UAAM,IAAI,SAAJ,EAAN;AAED,GAJD;AAMA;;;;AAIG;;;AAEH,EAAA,IAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AAEE,WAAO,SAAA,CAAA,mBAAA,CAAoB,IAApB,CAAP;AAED,GAJD;;AAMA,EAAA,IAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,UAAR,EAA8C;AAE5C,QAAM,MAAM,GAAG,KAAK,SAAL,EAAf;AACA,QAAM,GAAG,GAAa,EAAtB;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC;AAE/B,UAAM,CAAC,GAAG,KAAK,GAAL,CAAS,CAAT,CAAV;AACA,MAAA,GAAG,CAAC,UAAU,CAAC,CAAD,EAAI,CAAJ,CAAX,CAAH,GAAwB,CAAxB;AAED;;AAED,WAAO,GAAP;AAED,GAdD;;AAgBA,EAAA,IAAA,CAAA,SAAA,CAAA,WAAA,GAAA,UAAY,GAAZ,EAAkB;AAEhB,QAAM,MAAM,GAAG,KAAK,SAAL,EAAf;AACA,QAAM,GAAG,GAAQ,IAAI,KAAJ,CAAU,MAAV,CAAjB;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC;AAE/B,UAAI,CAAC,GAAG,CAAR,EAAW,GAAG,CAAC,IAAJ,CAAS,GAAT;AAEX,MAAA,GAAG,CAAC,IAAJ,CAAS,KAAK,GAAL,CAAS,CAAT,CAAT;AAED;;AAED,WAAO,GAAP;AAED,GAfD;;AAiBA,EAAA,IAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAO,UAAP,EAAwC;AAEtC,QAAM,MAAM,GAAG,KAAK,SAAL,EAAf;AACA,QAAM,GAAG,GAAQ,IAAI,KAAJ,CAAU,MAAV,CAAjB;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC,GAAG,CAAC,CAAD,CAAH,GAAS,UAAU,CAAC,KAAK,GAAL,CAAS,CAAT,CAAD,EAAc,CAAd,CAAnB;;AAEjC,WAAO,GAAP;AAED,GATD;;AAWA,EAAA,IAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UAAU,UAAV,EAAsF,YAAtF,EAAsG;AAEpG,QAAI,CAAC,GAAG,CAAR;AACA,QAAI,GAAJ;;AAEA,QAAI,YAAY,KAAK,SAArB,EAAgC;AAE9B;;AACA;AACA,MAAA,GAAG,GAAG,KAAK,GAAL,CAAS,CAAT,CAAN;AACA,MAAA,CAAC;AAEF,KAPD,MAOO;AAEL,MAAA,GAAG,GAAG,YAAN;AAED;;AAED,WAAO,CAAC,GAAG,KAAK,SAAL,EAAX,EAA6B,CAAC,EAA9B,EAAkC,GAAG,GAAG,UAAU,CAAC,GAAD,EAAM,KAAK,GAAL,CAAS,CAAT,CAAN,EAAmB,CAAnB,CAAhB;;AAElC,WAAO,GAAP;AAED,GAtBD;;AAwBA,EAAA,IAAA,CAAA,SAAA,CAAA,GAAA,GAAA,UAAI,MAAJ,EAAoB,MAApB,EAA6B;AAE3B,UAAM,IAAI,SAAJ,EAAN;AAED,GAJD;;AAMA,EAAA,IAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,KAAN,EAAiB,GAAjB,EAA6B;AAAvB,QAAA,KAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,KAAA,GAAA,CAAA;AAAS;;AAEb,QAAM,MAAM,GAAG,GAAG,GAAG,IAAI,CAAC,GAAL,CAAS,KAAK,SAAL,EAAT,EAA2B,GAA3B,CAAH,GAAqC,KAAK,SAAL,EAAvD;AACA,QAAM,GAAG,GAAQ,IAAI,KAAJ,CAAU,MAAM,GAAG,KAAnB,CAAjB;;AAEA,SAAK,IAAI,CAAC,GAAG,KAAb,EAAoB,CAAC,GAAG,MAAxB,EAAgC,CAAC,EAAjC,EAAqC,GAAG,CAAC,CAAD,CAAH,GAAS,KAAK,GAAL,CAAS,CAAT,CAAT;;AAErC,WAAO,GAAP;AAED,GATD;;AAWA,EAAA,IAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,UAAL,EAAkC;AAAa,WAAO,KAAK,GAAL,CAAS,UAAT,CAAP;AAA8B,GAA7E;;AAEA,EAAA,IAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,CAAL,EAAc;AAEZ,QAAM,MAAM,GAAG,IAAI,CAAC,GAAL,CAAS,KAAK,SAAL,EAAT,EAA2B,CAA3B,CAAf;AACA,QAAM,GAAG,GAAQ,IAAI,KAAJ,CAAU,MAAV,CAAjB;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC,GAAG,CAAC,CAAD,CAAH,GAAS,KAAK,GAAL,CAAS,CAAT,CAAT;;AAEjC,WAAO,GAAP;AAED,GATD;;AAWA,EAAA,IAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,UAAV,EAAuC;AAErC,QAAM,MAAM,GAAG,KAAK,SAAL,EAAf;AACA,QAAM,GAAG,GAAQ,EAAjB;AACA,QAAI,IAAJ;;AAEA,SAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,MAApB,EAA4B,CAAC,EAA7B,EAAiC;AAE/B,UAAM,CAAC,GAAG,KAAK,GAAL,CAAS,CAAT,CAAV;AAEA,MAAA,IAAI,GAAG,UAAU,CAAC,CAAD,EAAI,CAAJ,CAAjB;AAEA,UAAI,CAAC,IAAL,EAAW,OAAO,GAAP;AAEX,MAAA,GAAG,CAAC,IAAJ,CAAS,CAAT;AAED;;AAED,WAAO,GAAP;AAED,GApBD;;AAsBA,EAAA,IAAA,CAAA,SAAA,CAAA,OAAA,GAAA,YAAA;AAEE,WAAO,KAAK,GAAL,CAAS,MAAA,CAAA,QAAT,CAAP;AAED,GAJD;;AAMA,EAAA,IAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AAEE,WAAO,UAAQ,MAAA,CAAA,SAAA,CAAM,QAAN,CAAc,IAAd,CAAc,IAAd,CAAf;AAED,GAJD;;AAzRgB,EAAA,IAAA,CAAA,MAAA,GAAoB;AAClC,IAAA,WAAW,EAAE,eADqB;AAElC,IAAA,IAAI,EAAE,mBAAA,CAAA,eAAA,CAAgB;AAFY,GAApB;AAIA,EAAA,IAAA,CAAA,QAAA,GAAW,QAAX;AA2RlB,SAAA,IAAA;AAAC,CAjSD,CAA6B,SAAA,CAAA,OAA7B,CAAA;;AAAa,OAAA,CAAA,IAAA,GAAA,IAAA;AAmSb;;;;;;;;;;AAUG;;AAEH,SAAA,QAAA,CACE,WADF,EACgC,MADhC,EACgD,CADhD,EAC4D,aAD5D,EACsF;AAEpF,MAAI,CAAJ;;AAEA,UAAQ,WAAR;AAEE,SAAK,mBAAA,CAAA,eAAA,CAAgB,GAArB;AAEE,MAAA,CAAC,GAAG,CAAC,CAAC,OAAF,CAAU,QAAV,CAAmB,IAAI,CAAC,IAAL,CAAU,MAAM,GAAG,CAAnB,CAAnB,CAAJ;AAEA;;AAEF,SAAK,mBAAA,CAAA,eAAA,CAAgB,IAArB;AACA,SAAK,mBAAA,CAAA,eAAA,CAAgB,MAArB;AACA,SAAK,mBAAA,CAAA,eAAA,CAAgB,MAArB;AACA,SAAK,mBAAA,CAAA,eAAA,CAAgB,MAArB;AACA,SAAK,mBAAA,CAAA,eAAA,CAAgB,OAArB;AAEE,MAAA,CAAC,GAAG,CAAC,CAAC,OAAF,CAAU,QAAV,CAAmB,MAAM,GAAG,SAAA,CAAA,wBAAA,CAAyB,WAAzB,CAA5B,CAAJ;AAEA;;AAEF,SAAK,mBAAA,CAAA,eAAA,CAAgB,SAArB;AAEE,UAAI,aAAa,KAAK,SAAtB,EAAiC,MAAM,IAAI,KAAJ,CAAU,MAAA,CAAA,MAAA,CAAO,QAAA,CAAA,4BAAP,CAAV,CAAN;AAEjC,MAAA,aAAa,GAAG,aAAA,CAAA,SAAA,CAAU,aAAV,CAAhB;AAEA,UAAM,UAAU,GAAG,aAAA,CAAA,aAAA,CAAc,aAAd,IAA+B,MAAlD,CANF,CAQE;AACA;AACA;;AAEA,MAAA,CAAC,GAAG,CAAC,CAAC,OAAF,CAAU,QAAV,CAAmB,UAAU,GAAG,CAAhC,CAAJ;AAEA,MAAA,SAAA,CAAA,gBAAA,CAAiB,MAAjB,EAAyB,aAAzB,EAAwC,CAAxC;AAEA,MAAA,KAAK,CAAC,qCAAD,EAAwC,CAAxC,EAA2C,CAA3C,CAAL;AAEA;;AAEF,SAAK,mBAAA,CAAA,eAAA,CAAgB,IAArB;AAEE;AAEA,MAAA,SAAA,CAAA,cAAA,CAAe,CAAf,EAAkB,WAAlB,EAA+B,MAA/B,EAAuC,CAAvC;AAEA;;AAEF;AAEE,YAAM,IAAI,KAAJ,CAAU,MAAA,CAAA,MAAA,CAAO,QAAA,CAAA,qBAAP,EAA8B,WAA9B,CAAV,CAAN;AAhDJ;;AAoDA,MAAM,GAAG,GAAG,SAAA,CAAA,WAAA,CAAY,CAAC,CAAC,OAAd,EAAuB,CAAC,CAAC,UAAzB,EAAqC,CAArC,CAAZ;AAEA,EAAA,SAAA,CAAA,cAAA,CAAe,GAAG,CAAC,WAAnB,EAAgC,WAAhC,EAA6C,MAA7C,EAAqD,GAAG,CAAC,OAAzD,EAAkE,aAAlE;AAED;;AA7DD,OAAA,CAAA,QAAA,GAAA,QAAA","sourceRoot":"../../../src","sourcesContent":["\"use strict\";\n/**\n * @author jdiaz5513\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar debug_1 = require(\"debug\");\nvar errors_1 = require(\"../../errors\");\nvar util_1 = require(\"../../util\");\nvar list_element_size_1 = require(\"../list-element-size\");\nvar object_size_1 = require(\"../object-size\");\nvar pointer_1 = require(\"./pointer\");\nvar trace = debug_1.default('capnp:list');\ntrace('load');\n/**\n * A generic list class. Implements Filterable,\n */\nvar List = /** @class */ (function (_super) {\n    tslib_1.__extends(List, _super);\n    function List() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    List.toString = function () {\n        return this._capnp.displayName;\n    };\n    List.prototype.all = function (callbackfn) {\n        var length = this.getLength();\n        for (var i = 0; i < length; i++) {\n            if (!callbackfn(this.get(i), i))\n                return false;\n        }\n        return true;\n    };\n    List.prototype.any = function (callbackfn) {\n        var length = this.getLength();\n        for (var i = 0; i < length; i++)\n            if (callbackfn(this.get(i), i))\n                return true;\n        return false;\n    };\n    List.prototype.ap = function (callbackfns) {\n        var _this = this;\n        var length = this.getLength();\n        var res = [];\n        var _loop_1 = function (i) {\n            res.push.apply(res, callbackfns.map(function (f) { return f(_this.get(i), i); }));\n        };\n        for (var i = 0; i < length; i++) {\n            _loop_1(i);\n        }\n        return res;\n    };\n    List.prototype.concat = function (other) {\n        var length = this.getLength();\n        var otherLength = other.getLength();\n        var res = new Array(length + otherLength);\n        for (var i = 0; i < length; i++)\n            res[i] = this.get(i);\n        for (var i = 0; i < otherLength; i++)\n            res[i + length] = other.get(i);\n        return res;\n    };\n    List.prototype.drop = function (n) {\n        var length = this.getLength();\n        var res = new Array(length);\n        for (var i = n; i < length; i++)\n            res[i] = this.get(i);\n        return res;\n    };\n    List.prototype.dropWhile = function (callbackfn) {\n        var length = this.getLength();\n        var res = [];\n        var drop = true;\n        for (var i = 0; i < length; i++) {\n            var v = this.get(i);\n            if (drop)\n                drop = callbackfn(v, i);\n            if (!drop)\n                res.push(v);\n        }\n        return res;\n    };\n    List.prototype.empty = function () { return []; };\n    List.prototype.every = function (callbackfn) { return this.all(callbackfn); };\n    List.prototype.filter = function (callbackfn) {\n        var length = this.getLength();\n        var res = [];\n        for (var i = 0; i < length; i++) {\n            var value = this.get(i);\n            if (callbackfn(value, i))\n                res.push(value);\n        }\n        return res;\n    };\n    List.prototype.find = function (callbackfn) {\n        var length = this.getLength();\n        for (var i = 0; i < length; i++) {\n            var value = this.get(i);\n            if (callbackfn(value, i))\n                return value;\n        }\n        return undefined;\n    };\n    List.prototype.forEach = function (callbackfn) {\n        var length = this.getLength();\n        for (var i = 0; i < length; i++)\n            callbackfn(this.get(i), i);\n    };\n    List.prototype.get = function (_index) {\n        throw new TypeError();\n    };\n    /**\n     * Get the length of this list.\n     *\n     * @returns {number} The number of elements in this list.\n     */\n    List.prototype.getLength = function () {\n        return pointer_1.getTargetListLength(this);\n    };\n    List.prototype.groupBy = function (callbackfn) {\n        var length = this.getLength();\n        var res = {};\n        for (var i = 0; i < length; i++) {\n            var v = this.get(i);\n            res[callbackfn(v, i)] = v;\n        }\n        return res;\n    };\n    List.prototype.intersperse = function (sep) {\n        var length = this.getLength();\n        var res = new Array(length);\n        for (var i = 0; i < length; i++) {\n            if (i > 0)\n                res.push(sep);\n            res.push(this.get(i));\n        }\n        return res;\n    };\n    List.prototype.map = function (callbackfn) {\n        var length = this.getLength();\n        var res = new Array(length);\n        for (var i = 0; i < length; i++)\n            res[i] = callbackfn(this.get(i), i);\n        return res;\n    };\n    List.prototype.reduce = function (callbackfn, initialValue) {\n        var i = 0;\n        var res;\n        if (initialValue === undefined) {\n            // LINT: It's okay, I know what I'm doing here.\n            /* tslint:disable-next-line:no-any */\n            res = this.get(0);\n            i++;\n        }\n        else {\n            res = initialValue;\n        }\n        for (; i < this.getLength(); i++)\n            res = callbackfn(res, this.get(i), i);\n        return res;\n    };\n    List.prototype.set = function (_index, _value) {\n        throw new TypeError();\n    };\n    List.prototype.slice = function (start, end) {\n        if (start === void 0) { start = 0; }\n        var length = end ? Math.min(this.getLength(), end) : this.getLength();\n        var res = new Array(length - start);\n        for (var i = start; i < length; i++)\n            res[i] = this.get(i);\n        return res;\n    };\n    List.prototype.some = function (callbackfn) { return this.any(callbackfn); };\n    List.prototype.take = function (n) {\n        var length = Math.min(this.getLength(), n);\n        var res = new Array(length);\n        for (var i = 0; i < length; i++)\n            res[i] = this.get(i);\n        return res;\n    };\n    List.prototype.takeWhile = function (callbackfn) {\n        var length = this.getLength();\n        var res = [];\n        var take;\n        for (var i = 0; i < length; i++) {\n            var v = this.get(i);\n            take = callbackfn(v, i);\n            if (!take)\n                return res;\n            res.push(v);\n        }\n        return res;\n    };\n    List.prototype.toArray = function () {\n        return this.map(util_1.identity);\n    };\n    List.prototype.toString = function () {\n        return \"List_\" + _super.prototype.toString.call(this);\n    };\n    List._capnp = {\n        displayName: 'List<Generic>',\n        size: list_element_size_1.ListElementSize.VOID,\n    };\n    List.initList = initList;\n    return List;\n}(pointer_1.Pointer));\nexports.List = List;\n/**\n * Initialize the list with the given element size and length. This will allocate new space for the list, ideally in\n * the same segment as this pointer.\n *\n * @param {ListElementSize} elementSize The size of each element in the list.\n * @param {number} length The number of elements in the list.\n * @param {List<T>} l The list to initialize.\n * @param {ObjectSize} [compositeSize] The size of each element in a composite list. This value is required for\n * composite lists.\n * @returns {void}\n */\nfunction initList(elementSize, length, l, compositeSize) {\n    var c;\n    switch (elementSize) {\n        case list_element_size_1.ListElementSize.BIT:\n            c = l.segment.allocate(Math.ceil(length / 8));\n            break;\n        case list_element_size_1.ListElementSize.BYTE:\n        case list_element_size_1.ListElementSize.BYTE_2:\n        case list_element_size_1.ListElementSize.BYTE_4:\n        case list_element_size_1.ListElementSize.BYTE_8:\n        case list_element_size_1.ListElementSize.POINTER:\n            c = l.segment.allocate(length * pointer_1.getListElementByteLength(elementSize));\n            break;\n        case list_element_size_1.ListElementSize.COMPOSITE:\n            if (compositeSize === undefined)\n                throw new Error(util_1.format(errors_1.PTR_COMPOSITE_SIZE_UNDEFINED));\n            compositeSize = object_size_1.padToWord(compositeSize);\n            var byteLength = object_size_1.getByteLength(compositeSize) * length;\n            // We need to allocate an extra 8 bytes for the tag word, then make sure we write the length to it. We advance\n            // the content pointer by 8 bytes so that it then points to the first list element as intended. Everything\n            // starts off zeroed out so these nested structs don't need to be initialized in any way.\n            c = l.segment.allocate(byteLength + 8);\n            pointer_1.setStructPointer(length, compositeSize, c);\n            trace('Wrote composite tag word %s for %s.', c, l);\n            break;\n        case list_element_size_1.ListElementSize.VOID:\n            // No need to allocate anything, we can write the list pointer right here.\n            pointer_1.setListPointer(0, elementSize, length, l);\n            return;\n        default:\n            throw new Error(util_1.format(errors_1.PTR_INVALID_LIST_SIZE, elementSize));\n    }\n    var res = pointer_1.initPointer(c.segment, c.byteOffset, l);\n    pointer_1.setListPointer(res.offsetWords, elementSize, length, res.pointer, compositeSize);\n}\nexports.initList = initList;\n\n//# sourceMappingURL=list.js.map\n"]},"metadata":{},"sourceType":"script"}