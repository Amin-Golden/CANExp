{"ast":null,"code":"'use strict';\n/* @flow */\n\nvar shuffleInPlace = require('./shuffle_in_place');\n/**\n * A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\n * is a fast way to create a random permutation of a finite set. This is\n * a function around `shuffle_in_place` that adds the guarantee that\n * it will not modify its input.\n *\n * @param {Array} x sample of 0 or more numbers\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @return {Array} shuffled version of input\n * @example\n * var shuffled = shuffle([1, 2, 3, 4]);\n * shuffled; // = [2, 3, 1, 4] or any other random permutation\n */\n\n\nfunction shuffle\n/*::<T>*/\n(x\n/*:Array<T>*/\n, randomSource\n/*:Function*/\n) {\n  // slice the original array so that it is not modified\n  var sample = x.slice(); // and then shuffle that shallow-copied array, in place\n\n  return shuffleInPlace(sample.slice(), randomSource);\n}\n\nmodule.exports = shuffle;","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/simple-statistics/src/shuffle.js"],"names":["shuffleInPlace","require","shuffle","x","randomSource","sample","slice","module","exports"],"mappings":"AAAA;AACA;;AAEA,IAAIA,cAAc,GAAGC,OAAO,CAAC,oBAAD,CAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC;AAAO;AAAhB,CAA0BC;AAAC;AAA3B,EAA0CC;AAAY;AAAtD,EAAqE;AACjE;AACA,MAAIC,MAAM,GAAGF,CAAC,CAACG,KAAF,EAAb,CAFiE,CAIjE;;AACA,SAAON,cAAc,CAACK,MAAM,CAACC,KAAP,EAAD,EAAiBF,YAAjB,CAArB;AACH;;AAEDG,MAAM,CAACC,OAAP,GAAiBN,OAAjB","sourcesContent":["'use strict';\n/* @flow */\n\nvar shuffleInPlace = require('./shuffle_in_place');\n\n/**\n * A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\n * is a fast way to create a random permutation of a finite set. This is\n * a function around `shuffle_in_place` that adds the guarantee that\n * it will not modify its input.\n *\n * @param {Array} x sample of 0 or more numbers\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @return {Array} shuffled version of input\n * @example\n * var shuffled = shuffle([1, 2, 3, 4]);\n * shuffled; // = [2, 3, 1, 4] or any other random permutation\n */\nfunction shuffle/*::<T>*/(x/*:Array<T>*/, randomSource/*:Function*/) {\n    // slice the original array so that it is not modified\n    var sample = x.slice();\n\n    // and then shuffle that shallow-copied array, in place\n    return shuffleInPlace(sample.slice(), randomSource);\n}\n\nmodule.exports = shuffle;\n"]},"metadata":{},"sourceType":"script"}