{"ast":null,"code":"var _jsxFileName = \"/home/amax/Autoro/cabana/src/components/SignalLegendEntry/StringField.js\";\nimport React from 'react';\nimport Field from './Field';\nexport default (_ref => {\n  let {\n    fieldSpec,\n    signal,\n    isExpanded,\n    signalEdited,\n    updateField,\n    valid\n  } = _ref;\n  const {\n    field,\n    title\n  } = fieldSpec;\n  const htmlFor = `${signal.name}_${field}`;\n  let valueCol;\n\n  if (isExpanded) {\n    valueCol = /*#__PURE__*/React.createElement(\"input\", {\n      id: htmlFor,\n      type: \"text\",\n      value: signalEdited || '',\n      onChange: e => {\n        updateField(fieldSpec, e.target.value);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 7\n      }\n    });\n  } else {\n    valueCol = /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 16\n      }\n    }, signal[field]);\n  }\n\n  return /*#__PURE__*/React.createElement(Field, {\n    title: typeof title === 'function' ? title(signal) : title,\n    htmlFor: htmlFor,\n    valid: valid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 5\n    }\n  }, valueCol);\n});","map":{"version":3,"sources":["/home/amax/Autoro/cabana/src/components/SignalLegendEntry/StringField.js"],"names":["React","Field","fieldSpec","signal","isExpanded","signalEdited","updateField","valid","field","title","htmlFor","name","valueCol","e","target","value"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,gBAAe,QAOT;AAAA,MAPU;AACdC,IAAAA,SADc;AAEdC,IAAAA,MAFc;AAGdC,IAAAA,UAHc;AAIdC,IAAAA,YAJc;AAKdC,IAAAA,WALc;AAMdC,IAAAA;AANc,GAOV;AACJ,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAmBP,SAAzB;AACA,QAAMQ,OAAO,GAAI,GAAEP,MAAM,CAACQ,IAAK,IAAGH,KAAM,EAAxC;AACA,MAAII,QAAJ;;AACA,MAAIR,UAAJ,EAAgB;AACdQ,IAAAA,QAAQ,gBACN;AACE,MAAA,EAAE,EAAEF,OADN;AAEE,MAAA,IAAI,EAAC,MAFP;AAGE,MAAA,KAAK,EAAEL,YAAY,IAAI,EAHzB;AAIE,MAAA,QAAQ,EAAGQ,CAAD,IAAO;AACfP,QAAAA,WAAW,CAACJ,SAAD,EAAYW,CAAC,CAACC,MAAF,CAASC,KAArB,CAAX;AACD,OANH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAUD,GAXD,MAWO;AACLH,IAAAA,QAAQ,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOT,MAAM,CAACK,KAAD,CAAb,CAAX;AACD;;AAED,sBACE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAE,OAAOC,KAAP,KAAiB,UAAjB,GAA8BA,KAAK,CAACN,MAAD,CAAnC,GAA8CM,KADvD;AAEE,IAAA,OAAO,EAAEC,OAFX;AAGE,IAAA,KAAK,EAAEH,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGK,QALH,CADF;AASD,CAnCD","sourcesContent":["import React from 'react';\nimport Field from './Field';\n\nexport default ({\n  fieldSpec,\n  signal,\n  isExpanded,\n  signalEdited,\n  updateField,\n  valid\n}) => {\n  const { field, title } = fieldSpec;\n  const htmlFor = `${signal.name}_${field}`;\n  let valueCol;\n  if (isExpanded) {\n    valueCol = (\n      <input\n        id={htmlFor}\n        type=\"text\"\n        value={signalEdited || ''}\n        onChange={(e) => {\n          updateField(fieldSpec, e.target.value);\n        }}\n      />\n    );\n  } else {\n    valueCol = <span>{signal[field]}</span>;\n  }\n\n  return (\n    <Field\n      title={typeof title === 'function' ? title(signal) : title}\n      htmlFor={htmlFor}\n      valid={valid}\n    >\n      {valueCol}\n    </Field>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}