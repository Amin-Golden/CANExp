{"ast":null,"code":"var _jsxFileName = \"/home/amax/Autoro/cabana/src/components/HLS.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Hls from '@commaai/hls.js';\nexport default class HLS extends Component {\n  constructor() {\n    super(...arguments);\n\n    this.onSeeking = () => {\n      if (!this.props.playing) {\n        this.props.onLoadStart();\n        this.props.onPlaySeek(this.videoElement.currentTime);\n      }\n    };\n\n    this.shouldInitVideoTime = true;\n\n    this.onSeeked = () => {\n      if (!this.props.playing) {\n        this.props.onLoadEnd();\n      }\n    };\n\n    this.onLoadedData = () => {\n      if (this.shouldInitVideoTime) {\n        this.videoElement.currentTime = this.props.startTime;\n        this.shouldInitVideoTime = false;\n      }\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    this.videoElement.playbackRate = this.props.playbackSpeed;\n\n    if (prevProps.source !== this.props.source) {\n      this.loadSource(this.props.source);\n    }\n\n    if (this.props.playing) {\n      if (this.videoElement && (this.videoElement.paused || this.videoElement.currentTime < 0.01)) {\n        this.videoElement.play();\n      }\n    } else {\n      this.videoElement.pause();\n    }\n  }\n\n  componentDidMount() {\n    this.player = new Hls({\n      enableWorker: false,\n      disablePtsDtsCorrectionInMp4Remux: false\n    });\n    this.player.on(Hls.Events.ERROR, (event, data) => {\n      if (data.fatal) {\n        switch (data.type) {\n          case Hls.ErrorTypes.NETWORK_ERROR:\n            // try to recover network error\n            console.log('fatal network error encountered, try to recover');\n            this.player.startLoad();\n            break;\n\n          case Hls.ErrorTypes.MEDIA_ERROR:\n            console.log('fatal media error encountered, try to recover');\n            this.player.recoverMediaError();\n            break;\n\n          default:\n            // cannot recover\n            this.player.destroy();\n            this.player = null;\n            break;\n        }\n      }\n    });\n    this.loadSource();\n  }\n\n  loadSource() {\n    let source = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.source;\n\n    if (this.videoElement) {\n      this.player.loadSource(source);\n      this.player.attachMedia(this.videoElement);\n      this.props.onVideoElementAvailable(this.videoElement);\n    }\n  }\n\n  componentWillUnmount() {\n    // destroy hls video source\n    if (this.player) {\n      this.player.destroy();\n      this.player = null;\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cabana-explorer-visuals-camera-wrapper\",\n      onClick: this.props.onClick,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"video\", {\n      ref: video => {\n        this.videoElement = video;\n      },\n      autoPlay: this.props.playing,\n      muted: true,\n      onWaiting: this.props.onLoadStart,\n      onPlaying: this.props.onLoadEnd,\n      onSeeking: this.onSeeking,\n      onSeeked: this.onSeeked,\n      onLoadedData: this.onLoadedData,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\nHLS.propTypes = {\n  source: PropTypes.string.isRequired,\n  startTime: PropTypes.number.isRequired,\n  playbackSpeed: PropTypes.number.isRequired,\n  playing: PropTypes.bool.isRequired,\n  onVideoElementAvailable: PropTypes.func,\n  onClick: PropTypes.func,\n  onLoadStart: PropTypes.func,\n  onLoadEnd: PropTypes.func,\n  onPlaySeek: PropTypes.func,\n  onRestart: PropTypes.func\n};","map":{"version":3,"sources":["/home/amax/Autoro/cabana/src/components/HLS.js"],"names":["React","Component","PropTypes","Hls","HLS","onSeeking","props","playing","onLoadStart","onPlaySeek","videoElement","currentTime","shouldInitVideoTime","onSeeked","onLoadEnd","onLoadedData","startTime","componentDidUpdate","prevProps","playbackRate","playbackSpeed","source","loadSource","paused","play","pause","componentDidMount","player","enableWorker","disablePtsDtsCorrectionInMp4Remux","on","Events","ERROR","event","data","fatal","type","ErrorTypes","NETWORK_ERROR","console","log","startLoad","MEDIA_ERROR","recoverMediaError","destroy","attachMedia","onVideoElementAvailable","componentWillUnmount","render","onClick","video","propTypes","string","isRequired","number","bool","func","onRestart"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Hls from '@commaai/hls.js';\n\nexport default class HLS extends Component {\n  static propTypes = {\n    source: PropTypes.string.isRequired,\n    startTime: PropTypes.number.isRequired,\n    playbackSpeed: PropTypes.number.isRequired,\n    playing: PropTypes.bool.isRequired,\n    onVideoElementAvailable: PropTypes.func,\n    onClick: PropTypes.func,\n    onLoadStart: PropTypes.func,\n    onLoadEnd: PropTypes.func,\n    onPlaySeek: PropTypes.func,\n    onRestart: PropTypes.func\n  };\n\n  componentDidUpdate(prevProps) {\n    this.videoElement.playbackRate = this.props.playbackSpeed;\n\n    if (prevProps.source !== this.props.source) {\n      this.loadSource(this.props.source);\n    }\n    if (this.props.playing) {\n      if (this.videoElement && (this.videoElement.paused || this.videoElement.currentTime < 0.01)) {\n        this.videoElement.play();\n      }\n    } else {\n      this.videoElement.pause();\n    }\n  }\n\n  componentDidMount() {\n    this.player = new Hls({\n      enableWorker: false,\n      disablePtsDtsCorrectionInMp4Remux: false,\n    });\n    this.player.on(Hls.Events.ERROR, (event, data) => {\n      if (data.fatal) {\n        switch (data.type) {\n          case Hls.ErrorTypes.NETWORK_ERROR:\n          // try to recover network error\n            console.log('fatal network error encountered, try to recover');\n            this.player.startLoad();\n            break;\n          case Hls.ErrorTypes.MEDIA_ERROR:\n            console.log('fatal media error encountered, try to recover');\n            this.player.recoverMediaError();\n            break;\n          default:\n          // cannot recover\n            this.player.destroy();\n            this.player = null;\n            break;\n        }\n      }\n    });\n    this.loadSource();\n  }\n\n  onSeeking = () => {\n    if (!this.props.playing) {\n      this.props.onLoadStart();\n      this.props.onPlaySeek(this.videoElement.currentTime);\n    }\n  };\n\n  // legacy outer scope variable. Revisit this to see if putting in state\n  // makes more sense\n  shouldInitVideoTime = true;\n\n  onSeeked = () => {\n    if (!this.props.playing) {\n      this.props.onLoadEnd();\n    }\n  };\n\n  onLoadedData = () => {\n    if (this.shouldInitVideoTime) {\n      this.videoElement.currentTime = this.props.startTime;\n      this.shouldInitVideoTime = false;\n    }\n  };\n\n  loadSource(source = this.props.source) {\n    if (this.videoElement) {\n      this.player.loadSource(source);\n      this.player.attachMedia(this.videoElement);\n      this.props.onVideoElementAvailable(this.videoElement);\n    }\n  }\n\n  componentWillUnmount() {\n    // destroy hls video source\n    if (this.player) {\n      this.player.destroy();\n      this.player = null;\n    }\n  }\n\n  render() {\n    return (\n      <div\n        className=\"cabana-explorer-visuals-camera-wrapper\"\n        onClick={this.props.onClick}\n      >\n        <video\n          ref={(video) => {\n            this.videoElement = video;\n          }}\n          autoPlay={this.props.playing}\n          muted\n          onWaiting={this.props.onLoadStart}\n          onPlaying={this.props.onLoadEnd}\n          onSeeking={this.onSeeking}\n          onSeeked={this.onSeeked}\n          onLoadedData={this.onLoadedData}\n        />\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}