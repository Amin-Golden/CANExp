{"ast":null,"code":"'use strict';\n/* @flow */\n\n/**\n * For a sorted input, counting the number of unique values\n * is possible in constant time and constant memory. This is\n * a simple implementation of the algorithm.\n *\n * Values are compared with `===`, so objects and non-primitive objects\n * are not handled in any special way.\n *\n * @param {Array<*>} x an array of any kind of value\n * @returns {number} count of unique values\n * @example\n * uniqueCountSorted([1, 2, 3]); // => 3\n * uniqueCountSorted([1, 1, 1]); // => 1\n */\n\nfunction uniqueCountSorted(x\n/*: Array<any>*/\n)\n/*: number */\n{\n  var uniqueValueCount = 0,\n      lastSeenValue;\n\n  for (var i = 0; i < x.length; i++) {\n    if (i === 0 || x[i] !== lastSeenValue) {\n      lastSeenValue = x[i];\n      uniqueValueCount++;\n    }\n  }\n\n  return uniqueValueCount;\n}\n\nmodule.exports = uniqueCountSorted;","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/simple-statistics/src/unique_count_sorted.js"],"names":["uniqueCountSorted","x","uniqueValueCount","lastSeenValue","i","length","module","exports"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,iBAAT,CAA2BC;AAAC;AAA5B;AAA6C;AAAc;AACvD,MAAIC,gBAAgB,GAAG,CAAvB;AAAA,MACIC,aADJ;;AAEA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,CAAC,CAACI,MAAtB,EAA8BD,CAAC,EAA/B,EAAmC;AAC/B,QAAIA,CAAC,KAAK,CAAN,IAAWH,CAAC,CAACG,CAAD,CAAD,KAASD,aAAxB,EAAuC;AACnCA,MAAAA,aAAa,GAAGF,CAAC,CAACG,CAAD,CAAjB;AACAF,MAAAA,gBAAgB;AACnB;AACJ;;AACD,SAAOA,gBAAP;AACH;;AAEDI,MAAM,CAACC,OAAP,GAAiBP,iBAAjB","sourcesContent":["'use strict';\n/* @flow */\n\n/**\n * For a sorted input, counting the number of unique values\n * is possible in constant time and constant memory. This is\n * a simple implementation of the algorithm.\n *\n * Values are compared with `===`, so objects and non-primitive objects\n * are not handled in any special way.\n *\n * @param {Array<*>} x an array of any kind of value\n * @returns {number} count of unique values\n * @example\n * uniqueCountSorted([1, 2, 3]); // => 3\n * uniqueCountSorted([1, 1, 1]); // => 1\n */\nfunction uniqueCountSorted(x/*: Array<any>*/)/*: number */ {\n    var uniqueValueCount = 0,\n        lastSeenValue;\n    for (var i = 0; i < x.length; i++) {\n        if (i === 0 || x[i] !== lastSeenValue) {\n            lastSeenValue = x[i];\n            uniqueValueCount++;\n        }\n    }\n    return uniqueValueCount;\n}\n\nmodule.exports = uniqueCountSorted;\n"]},"metadata":{},"sourceType":"script"}