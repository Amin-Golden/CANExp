{"ast":null,"code":"'use strict';\n/* @flow */\n\nvar combineMeans = require('./combine_means');\n/**\n * When combining two lists of values for which one already knows the variances,\n * one does not have to necessary recompute the variance of the combined lists\n * in linear time. They can instead use this function to compute the combined\n * variance by providing the variance, mean & number of values of the first list\n * and the variance, mean & number of values of the second list.\n *\n * @since 3.0.0\n * @param {number} variance1 variance of the first list\n * @param {number} mean1 mean of the first list\n * @param {number} n1 number of items in the first list\n * @param {number} variance2 variance of the second list\n * @param {number} mean2 mean of the second list\n * @param {number} n2 number of items in the second list\n * @returns {number} the combined mean\n *\n * @example\n * combineVariances(14 / 3, 5, 3, 8 / 3, 4, 3); // => 47 / 12\n */\n\n\nfunction combineVariances(variance1\n/*: number*/\n, mean1\n/*: number*/\n, n1\n/*: number */\n, variance2\n/*: number*/\n, mean2\n/*: number*/\n, n2\n/*: number */\n)\n/*: number */\n{\n  var newMean = combineMeans(mean1, n1, mean2, n2);\n  return (n1 * (variance1 + Math.pow(mean1 - newMean, 2)) + n2 * (variance2 + Math.pow(mean2 - newMean, 2))) / (n1 + n2);\n}\n\nmodule.exports = combineVariances;","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/simple-statistics/src/combine_variances.js"],"names":["combineMeans","require","combineVariances","variance1","mean1","n1","variance2","mean2","n2","newMean","Math","pow","module","exports"],"mappings":"AAAA;AACA;;AAEA,IAAIA,YAAY,GAAGC,OAAO,CAAC,iBAAD,CAA1B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,gBAAT,CACIC;AAAU;AADd,EAEIC;AAAM;AAFV,EAGIC;AAAE;AAHN,EAIIC;AAAU;AAJd,EAKIC;AAAM;AALV,EAMIC;AAAE;AANN;AAMoB;AAAc;AAE9B,MAAIC,OAAO,GAAGT,YAAY,CAACI,KAAD,EAAQC,EAAR,EAAYE,KAAZ,EAAmBC,EAAnB,CAA1B;AAEA,SAAO,CACHH,EAAE,IAAIF,SAAS,GAAGO,IAAI,CAACC,GAAL,CAASP,KAAK,GAAGK,OAAjB,EAA0B,CAA1B,CAAhB,CAAF,GACAD,EAAE,IAAIF,SAAS,GAAGI,IAAI,CAACC,GAAL,CAASJ,KAAK,GAAGE,OAAjB,EAA0B,CAA1B,CAAhB,CAFC,KAGFJ,EAAE,GAAGG,EAHH,CAAP;AAIH;;AAEDI,MAAM,CAACC,OAAP,GAAiBX,gBAAjB","sourcesContent":["'use strict';\n/* @flow */\n\nvar combineMeans = require('./combine_means')\n\n/**\n * When combining two lists of values for which one already knows the variances,\n * one does not have to necessary recompute the variance of the combined lists\n * in linear time. They can instead use this function to compute the combined\n * variance by providing the variance, mean & number of values of the first list\n * and the variance, mean & number of values of the second list.\n *\n * @since 3.0.0\n * @param {number} variance1 variance of the first list\n * @param {number} mean1 mean of the first list\n * @param {number} n1 number of items in the first list\n * @param {number} variance2 variance of the second list\n * @param {number} mean2 mean of the second list\n * @param {number} n2 number of items in the second list\n * @returns {number} the combined mean\n *\n * @example\n * combineVariances(14 / 3, 5, 3, 8 / 3, 4, 3); // => 47 / 12\n */\nfunction combineVariances(\n    variance1 /*: number*/,\n    mean1 /*: number*/,\n    n1/*: number */,\n    variance2 /*: number*/,\n    mean2 /*: number*/,\n    n2/*: number */)/*: number */ {\n\n    var newMean = combineMeans(mean1, n1, mean2, n2);\n\n    return (\n        n1 * (variance1 + Math.pow(mean1 - newMean, 2)) +\n        n2 * (variance2 + Math.pow(mean2 - newMean, 2))\n    ) / (n1 + n2);\n}\n\nmodule.exports = combineVariances;\n"]},"metadata":{},"sourceType":"script"}