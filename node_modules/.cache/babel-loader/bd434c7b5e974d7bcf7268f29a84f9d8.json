{"ast":null,"code":"'use strict';\n/* @flow */\n\n/**\n * When combining two lists of values for which one already knows the means,\n * one does not have to necessary recompute the mean of the combined lists in\n * linear time. They can instead use this function to compute the combined\n * mean by providing the mean & number of values of the first list and the mean\n * & number of values of the second list.\n *\n * @since 3.0.0\n * @param {number} mean1 mean of the first list\n * @param {number} n1 number of items in the first list\n * @param {number} mean2 mean of the second list\n * @param {number} n2 number of items in the second list\n * @returns {number} the combined mean\n *\n * @example\n * combineMeans(5, 3, 4, 3); // => 4.5\n */\n\nfunction combineMeans(mean1\n/*: number*/\n, n1\n/*: number */\n, mean2\n/*: number*/\n, n2\n/*: number */\n)\n/*: number */\n{\n  return (mean1 * n1 + mean2 * n2) / (n1 + n2);\n}\n\nmodule.exports = combineMeans;","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/simple-statistics/src/combine_means.js"],"names":["combineMeans","mean1","n1","mean2","n2","module","exports"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,YAAT,CAAsBC;AAAM;AAA5B,EAA0CC;AAAE;AAA5C,EAA2DC;AAAM;AAAjE,EAA+EC;AAAE;AAAjF;AAA+F;AAAc;AACzG,SAAO,CAACH,KAAK,GAAGC,EAAR,GAAaC,KAAK,GAAGC,EAAtB,KAA6BF,EAAE,GAAGE,EAAlC,CAAP;AACH;;AAEDC,MAAM,CAACC,OAAP,GAAiBN,YAAjB","sourcesContent":["'use strict';\n/* @flow */\n\n/**\n * When combining two lists of values for which one already knows the means,\n * one does not have to necessary recompute the mean of the combined lists in\n * linear time. They can instead use this function to compute the combined\n * mean by providing the mean & number of values of the first list and the mean\n * & number of values of the second list.\n *\n * @since 3.0.0\n * @param {number} mean1 mean of the first list\n * @param {number} n1 number of items in the first list\n * @param {number} mean2 mean of the second list\n * @param {number} n2 number of items in the second list\n * @returns {number} the combined mean\n *\n * @example\n * combineMeans(5, 3, 4, 3); // => 4.5\n */\nfunction combineMeans(mean1 /*: number*/, n1/*: number */, mean2 /*: number*/, n2/*: number */)/*: number */ {\n    return (mean1 * n1 + mean2 * n2) / (n1 + n2);\n}\n\nmodule.exports = combineMeans;\n"]},"metadata":{},"sourceType":"script"}