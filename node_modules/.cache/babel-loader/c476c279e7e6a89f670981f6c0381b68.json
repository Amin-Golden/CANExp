{"ast":null,"code":"'use strict';\n/* @flow */\n\nvar epsilon = require('./epsilon');\n/**\n * The [Poisson Distribution](http://en.wikipedia.org/wiki/Poisson_distribution)\n * is a discrete probability distribution that expresses the probability\n * of a given number of events occurring in a fixed interval of time\n * and/or space if these events occur with a known average rate and\n * independently of the time since the last event.\n *\n * The Poisson Distribution is characterized by the strictly positive\n * mean arrival or occurrence rate, `λ`.\n *\n * @param {number} lambda location poisson distribution\n * @returns {number[]} values of poisson distribution at that point\n */\n\n\nfunction poissonDistribution(lambda\n/*: number */\n)\n/*: ?number[] */\n{\n  // Check that lambda is strictly positive\n  if (lambda <= 0) {\n    return undefined;\n  } // our current place in the distribution\n\n\n  var x = 0,\n      // and we keep track of the current cumulative probability, in\n  // order to know when to stop calculating chances.\n  cumulativeProbability = 0,\n      // the calculated cells to be returned\n  cells = [],\n      factorialX = 1; // This algorithm iterates through each potential outcome,\n  // until the `cumulativeProbability` is very close to 1, at\n  // which point we've defined the vast majority of outcomes\n\n  do {\n    // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)\n    cells[x] = Math.exp(-lambda) * Math.pow(lambda, x) / factorialX;\n    cumulativeProbability += cells[x];\n    x++;\n    factorialX *= x; // when the cumulativeProbability is nearly 1, we've calculated\n    // the useful range of this distribution\n  } while (cumulativeProbability < 1 - epsilon);\n\n  return cells;\n}\n\nmodule.exports = poissonDistribution;","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/simple-statistics/src/poisson_distribution.js"],"names":["epsilon","require","poissonDistribution","lambda","undefined","x","cumulativeProbability","cells","factorialX","Math","exp","pow","module","exports"],"mappings":"AAAA;AACA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,mBAAT,CAA6BC;AAAM;AAAnC;AAAkD;AAAiB;AAC/D;AACA,MAAIA,MAAM,IAAI,CAAd,EAAiB;AAAE,WAAOC,SAAP;AAAmB,GAFyB,CAI/D;;;AACA,MAAIC,CAAC,GAAG,CAAR;AAAA,MACI;AACA;AACAC,EAAAA,qBAAqB,GAAG,CAH5B;AAAA,MAII;AACAC,EAAAA,KAAK,GAAG,EALZ;AAAA,MAMIC,UAAU,GAAG,CANjB,CAL+D,CAa/D;AACA;AACA;;AACA,KAAG;AACC;AACAD,IAAAA,KAAK,CAACF,CAAD,CAAL,GAAYI,IAAI,CAACC,GAAL,CAAS,CAACP,MAAV,IAAoBM,IAAI,CAACE,GAAL,CAASR,MAAT,EAAiBE,CAAjB,CAArB,GAA4CG,UAAvD;AACAF,IAAAA,qBAAqB,IAAIC,KAAK,CAACF,CAAD,CAA9B;AACAA,IAAAA,CAAC;AACDG,IAAAA,UAAU,IAAIH,CAAd,CALD,CAMH;AACA;AACC,GARD,QAQSC,qBAAqB,GAAG,IAAIN,OARrC;;AAUA,SAAOO,KAAP;AACH;;AAEDK,MAAM,CAACC,OAAP,GAAiBX,mBAAjB","sourcesContent":["'use strict';\n/* @flow */\n\nvar epsilon = require('./epsilon');\n\n/**\n * The [Poisson Distribution](http://en.wikipedia.org/wiki/Poisson_distribution)\n * is a discrete probability distribution that expresses the probability\n * of a given number of events occurring in a fixed interval of time\n * and/or space if these events occur with a known average rate and\n * independently of the time since the last event.\n *\n * The Poisson Distribution is characterized by the strictly positive\n * mean arrival or occurrence rate, `λ`.\n *\n * @param {number} lambda location poisson distribution\n * @returns {number[]} values of poisson distribution at that point\n */\nfunction poissonDistribution(lambda/*: number */) /*: ?number[] */ {\n    // Check that lambda is strictly positive\n    if (lambda <= 0) { return undefined; }\n\n    // our current place in the distribution\n    var x = 0,\n        // and we keep track of the current cumulative probability, in\n        // order to know when to stop calculating chances.\n        cumulativeProbability = 0,\n        // the calculated cells to be returned\n        cells = [],\n        factorialX = 1;\n\n    // This algorithm iterates through each potential outcome,\n    // until the `cumulativeProbability` is very close to 1, at\n    // which point we've defined the vast majority of outcomes\n    do {\n        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)\n        cells[x] = (Math.exp(-lambda) * Math.pow(lambda, x)) / factorialX;\n        cumulativeProbability += cells[x];\n        x++;\n        factorialX *= x;\n    // when the cumulativeProbability is nearly 1, we've calculated\n    // the useful range of this distribution\n    } while (cumulativeProbability < 1 - epsilon);\n\n    return cells;\n}\n\nmodule.exports = poissonDistribution;\n"]},"metadata":{},"sourceType":"script"}