{"ast":null,"code":"\"use strict\";\n/**\n * @author jdiaz5513\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tslib_1 = require(\"tslib\");\n\nvar debug_1 = require(\"debug\");\n\nvar util_1 = require(\"../../util\");\n\nvar list_element_size_1 = require(\"../list-element-size\");\n\nvar list_1 = require(\"./list\");\n\nvar pointer_1 = require(\"./pointer\");\n\nvar pointer_type_1 = require(\"./pointer-type\");\n\nvar trace = debug_1.default('capnp:text');\ntrace('load');\n\nvar Text =\n/** @class */\nfunction (_super) {\n  tslib_1.__extends(Text, _super);\n\n  function Text() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Text.fromPointer = function (pointer) {\n    pointer_1.validate(pointer_type_1.PointerType.LIST, pointer, list_element_size_1.ListElementSize.BYTE);\n    return textFromPointerUnchecked(pointer);\n  };\n  /**\n   * Read a utf-8 encoded string value from this pointer.\n   *\n   * @param {number} [index] The index at which to start reading; defaults to zero.\n   * @returns {string} The string value.\n   */\n\n\n  Text.prototype.get = function (index) {\n    if (index === void 0) {\n      index = 0;\n    }\n\n    if (index !== 0) trace('Called get() on %s with a strange index (%d).', this, index);\n    if (pointer_1.isNull(this)) return '';\n    var c = pointer_1.getContent(this); // Remember to exclude the NUL byte.\n\n    return util_1.decodeUtf8(new Uint8Array(c.segment.buffer, c.byteOffset + index, this.getLength() - index));\n  };\n  /**\n   * Get the number of utf-8 encoded bytes in this text. This does **not** include the NUL byte.\n   *\n   * @returns {number} The number of bytes allocated for the text.\n   */\n\n\n  Text.prototype.getLength = function () {\n    return _super.prototype.getLength.call(this) - 1;\n  };\n  /**\n   * Write a utf-8 encoded string value starting at the specified index.\n   *\n   * @param {number} index The index at which to start copying the string. Note that if this is not zero the bytes\n   * before `index` will be left as-is. All bytes after `index` will be overwritten.\n   * @param {string} value The string value to set.\n   * @returns {void}\n   */\n\n\n  Text.prototype.set = function (index, value) {\n    if (index !== 0) trace('Called set() on %s with a strange index (%d).', this, index);\n    var src = util_1.encodeUtf8(value);\n    var dstLength = src.byteLength + index;\n    var c;\n    var original; // TODO: Consider reusing existing space if list is already initialized and there's enough room for the value.\n\n    if (!pointer_1.isNull(this)) {\n      c = pointer_1.getContent(this); // Only copy bytes that will remain after copying. Everything after `index` should end up truncated.\n\n      var originalLength = this.getLength();\n\n      if (originalLength >= index) {\n        originalLength = index;\n      } else {\n        trace('%d byte gap exists between original text and new text in %s.', index - originalLength, this);\n      }\n\n      original = new Uint8Array(c.segment.buffer.slice(c.byteOffset, c.byteOffset + Math.min(originalLength, index)));\n      pointer_1.erase(this);\n    } // Always allocate an extra byte for the NUL byte.\n\n\n    list_1.initList(list_element_size_1.ListElementSize.BYTE, dstLength + 1, this);\n    c = pointer_1.getContent(this);\n    var dst = new Uint8Array(c.segment.buffer, c.byteOffset, dstLength);\n    if (original) dst.set(original);\n    dst.set(src, index);\n  };\n\n  Text.prototype.toString = function () {\n    return \"Text_\" + _super.prototype.toString.call(this);\n  };\n\n  return Text;\n}(list_1.List);\n\nexports.Text = Text;\n\nfunction textFromPointerUnchecked(pointer) {\n  return new Text(pointer.segment, pointer.byteOffset, pointer._capnp.depthLimit);\n}","map":{"version":3,"sources":["serialization/pointers/text.ts"],"names":[],"mappings":"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","sourceRoot":"../../../src","sourcesContent":["\"use strict\";\n/**\n * @author jdiaz5513\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar debug_1 = require(\"debug\");\nvar util_1 = require(\"../../util\");\nvar list_element_size_1 = require(\"../list-element-size\");\nvar list_1 = require(\"./list\");\nvar pointer_1 = require(\"./pointer\");\nvar pointer_type_1 = require(\"./pointer-type\");\nvar trace = debug_1.default('capnp:text');\ntrace('load');\nvar Text = /** @class */ (function (_super) {\n    tslib_1.__extends(Text, _super);\n    function Text() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    Text.fromPointer = function (pointer) {\n        pointer_1.validate(pointer_type_1.PointerType.LIST, pointer, list_element_size_1.ListElementSize.BYTE);\n        return textFromPointerUnchecked(pointer);\n    };\n    /**\n     * Read a utf-8 encoded string value from this pointer.\n     *\n     * @param {number} [index] The index at which to start reading; defaults to zero.\n     * @returns {string} The string value.\n     */\n    Text.prototype.get = function (index) {\n        if (index === void 0) { index = 0; }\n        if (index !== 0)\n            trace('Called get() on %s with a strange index (%d).', this, index);\n        if (pointer_1.isNull(this))\n            return '';\n        var c = pointer_1.getContent(this);\n        // Remember to exclude the NUL byte.\n        return util_1.decodeUtf8(new Uint8Array(c.segment.buffer, c.byteOffset + index, this.getLength() - index));\n    };\n    /**\n     * Get the number of utf-8 encoded bytes in this text. This does **not** include the NUL byte.\n     *\n     * @returns {number} The number of bytes allocated for the text.\n     */\n    Text.prototype.getLength = function () {\n        return _super.prototype.getLength.call(this) - 1;\n    };\n    /**\n     * Write a utf-8 encoded string value starting at the specified index.\n     *\n     * @param {number} index The index at which to start copying the string. Note that if this is not zero the bytes\n     * before `index` will be left as-is. All bytes after `index` will be overwritten.\n     * @param {string} value The string value to set.\n     * @returns {void}\n     */\n    Text.prototype.set = function (index, value) {\n        if (index !== 0)\n            trace('Called set() on %s with a strange index (%d).', this, index);\n        var src = util_1.encodeUtf8(value);\n        var dstLength = src.byteLength + index;\n        var c;\n        var original;\n        // TODO: Consider reusing existing space if list is already initialized and there's enough room for the value.\n        if (!pointer_1.isNull(this)) {\n            c = pointer_1.getContent(this);\n            // Only copy bytes that will remain after copying. Everything after `index` should end up truncated.\n            var originalLength = this.getLength();\n            if (originalLength >= index) {\n                originalLength = index;\n            }\n            else {\n                trace('%d byte gap exists between original text and new text in %s.', index - originalLength, this);\n            }\n            original = new Uint8Array(c.segment.buffer.slice(c.byteOffset, c.byteOffset + Math.min(originalLength, index)));\n            pointer_1.erase(this);\n        }\n        // Always allocate an extra byte for the NUL byte.\n        list_1.initList(list_element_size_1.ListElementSize.BYTE, dstLength + 1, this);\n        c = pointer_1.getContent(this);\n        var dst = new Uint8Array(c.segment.buffer, c.byteOffset, dstLength);\n        if (original)\n            dst.set(original);\n        dst.set(src, index);\n    };\n    Text.prototype.toString = function () {\n        return \"Text_\" + _super.prototype.toString.call(this);\n    };\n    return Text;\n}(list_1.List));\nexports.Text = Text;\nfunction textFromPointerUnchecked(pointer) {\n    return new Text(pointer.segment, pointer.byteOffset, pointer._capnp.depthLimit);\n}\n\n//# sourceMappingURL=text.js.map\n"]},"metadata":{},"sourceType":"script"}