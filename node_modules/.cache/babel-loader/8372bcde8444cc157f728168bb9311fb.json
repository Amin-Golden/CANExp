{"ast":null,"code":"'use strict';\n/* @flow */\n\nvar epsilon = require('./epsilon');\n/**\n * The [Binomial Distribution](http://en.wikipedia.org/wiki/Binomial_distribution) is the discrete probability\n * distribution of the number of successes in a sequence of n independent yes/no experiments, each of which yields\n * success with probability `probability`. Such a success/failure experiment is also called a Bernoulli experiment or\n * Bernoulli trial; when trials = 1, the Binomial Distribution is a Bernoulli Distribution.\n *\n * @param {number} trials number of trials to simulate\n * @param {number} probability\n * @returns {number[]} output\n */\n\n\nfunction binomialDistribution(trials\n/*: number */\n, probability\n/*: number */\n)\n/*: ?number[] */\n{\n  // Check that `p` is a valid probability (0 ≤ p ≤ 1),\n  // that `n` is an integer, strictly positive.\n  if (probability < 0 || probability > 1 || trials <= 0 || trials % 1 !== 0) {\n    return undefined;\n  } // We initialize `x`, the random variable, and `accumulator`, an accumulator\n  // for the cumulative distribution function to 0. `distribution_functions`\n  // is the object we'll return with the `probability_of_x` and the\n  // `cumulativeProbability_of_x`, as well as the calculated mean &\n  // variance. We iterate until the `cumulativeProbability_of_x` is\n  // within `epsilon` of 1.0.\n\n\n  var x = 0,\n      cumulativeProbability = 0,\n      cells = [],\n      binomialCoefficient = 1; // This algorithm iterates through each potential outcome,\n  // until the `cumulativeProbability` is very close to 1, at\n  // which point we've defined the vast majority of outcomes\n\n  do {\n    // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)\n    cells[x] = binomialCoefficient * Math.pow(probability, x) * Math.pow(1 - probability, trials - x);\n    cumulativeProbability += cells[x];\n    x++;\n    binomialCoefficient = binomialCoefficient * (trials - x + 1) / x; // when the cumulativeProbability is nearly 1, we've calculated\n    // the useful range of this distribution\n  } while (cumulativeProbability < 1 - epsilon);\n\n  return cells;\n}\n\nmodule.exports = binomialDistribution;","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/simple-statistics/src/binomial_distribution.js"],"names":["epsilon","require","binomialDistribution","trials","probability","undefined","x","cumulativeProbability","cells","binomialCoefficient","Math","pow","module","exports"],"mappings":"AAAA;AACA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,oBAAT,CACIC;AAAM;AADV,EAEIC;AAAW;AAFf;AAE6B;AAAiB;AAC1C;AACA;AACA,MAAIA,WAAW,GAAG,CAAd,IAAmBA,WAAW,GAAG,CAAjC,IACAD,MAAM,IAAI,CADV,IACeA,MAAM,GAAG,CAAT,KAAe,CADlC,EACqC;AACjC,WAAOE,SAAP;AACH,GANyC,CAQ1C;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAIC,CAAC,GAAG,CAAR;AAAA,MACIC,qBAAqB,GAAG,CAD5B;AAAA,MAEIC,KAAK,GAAG,EAFZ;AAAA,MAGIC,mBAAmB,GAAG,CAH1B,CAd0C,CAmB1C;AACA;AACA;;AACA,KAAG;AACC;AACAD,IAAAA,KAAK,CAACF,CAAD,CAAL,GAAWG,mBAAmB,GAC1BC,IAAI,CAACC,GAAL,CAASP,WAAT,EAAsBE,CAAtB,CADO,GACoBI,IAAI,CAACC,GAAL,CAAS,IAAIP,WAAb,EAA0BD,MAAM,GAAGG,CAAnC,CAD/B;AAEAC,IAAAA,qBAAqB,IAAIC,KAAK,CAACF,CAAD,CAA9B;AACAA,IAAAA,CAAC;AACDG,IAAAA,mBAAmB,GAAGA,mBAAmB,IAAIN,MAAM,GAAGG,CAAT,GAAa,CAAjB,CAAnB,GAAyCA,CAA/D,CAND,CAOH;AACA;AACC,GATD,QASSC,qBAAqB,GAAG,IAAIP,OATrC;;AAWA,SAAOQ,KAAP;AACH;;AAEDI,MAAM,CAACC,OAAP,GAAiBX,oBAAjB","sourcesContent":["'use strict';\n/* @flow */\n\nvar epsilon = require('./epsilon');\n\n/**\n * The [Binomial Distribution](http://en.wikipedia.org/wiki/Binomial_distribution) is the discrete probability\n * distribution of the number of successes in a sequence of n independent yes/no experiments, each of which yields\n * success with probability `probability`. Such a success/failure experiment is also called a Bernoulli experiment or\n * Bernoulli trial; when trials = 1, the Binomial Distribution is a Bernoulli Distribution.\n *\n * @param {number} trials number of trials to simulate\n * @param {number} probability\n * @returns {number[]} output\n */\nfunction binomialDistribution(\n    trials/*: number */,\n    probability/*: number */)/*: ?number[] */ {\n    // Check that `p` is a valid probability (0 ≤ p ≤ 1),\n    // that `n` is an integer, strictly positive.\n    if (probability < 0 || probability > 1 ||\n        trials <= 0 || trials % 1 !== 0) {\n        return undefined;\n    }\n\n    // We initialize `x`, the random variable, and `accumulator`, an accumulator\n    // for the cumulative distribution function to 0. `distribution_functions`\n    // is the object we'll return with the `probability_of_x` and the\n    // `cumulativeProbability_of_x`, as well as the calculated mean &\n    // variance. We iterate until the `cumulativeProbability_of_x` is\n    // within `epsilon` of 1.0.\n    var x = 0,\n        cumulativeProbability = 0,\n        cells = [],\n        binomialCoefficient = 1;\n\n    // This algorithm iterates through each potential outcome,\n    // until the `cumulativeProbability` is very close to 1, at\n    // which point we've defined the vast majority of outcomes\n    do {\n        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)\n        cells[x] = binomialCoefficient *\n            Math.pow(probability, x) * Math.pow(1 - probability, trials - x);\n        cumulativeProbability += cells[x];\n        x++;\n        binomialCoefficient = binomialCoefficient * (trials - x + 1) / x;\n    // when the cumulativeProbability is nearly 1, we've calculated\n    // the useful range of this distribution\n    } while (cumulativeProbability < 1 - epsilon);\n\n    return cells;\n}\n\nmodule.exports = binomialDistribution;\n"]},"metadata":{},"sourceType":"script"}