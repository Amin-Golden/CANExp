{"ast":null,"code":"'use strict';\n/* @flow */\n\n/**\n * A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\n * in-place - which means that it **will change the order of the original\n * array by reference**.\n *\n * This is an algorithm that generates a random [permutation](https://en.wikipedia.org/wiki/Permutation)\n * of a set.\n *\n * @param {Array} x sample of one or more numbers\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @returns {Array} x\n * @example\n * var x = [1, 2, 3, 4];\n * shuffleInPlace(x);\n * // x is shuffled to a value like [2, 1, 4, 3]\n */\n\nfunction shuffleInPlace(x\n/*:Array<any>*/\n, randomSource\n/*:Function*/\n)\n/*:Array<any>*/\n{\n  // a custom random number source can be provided if you want to use\n  // a fixed seed or another random number generator, like\n  // [random-js](https://www.npmjs.org/package/random-js)\n  randomSource = randomSource || Math.random; // store the current length of the x to determine\n  // when no elements remain to shuffle.\n\n  var length = x.length; // temporary is used to hold an item when it is being\n  // swapped between indices.\n\n  var temporary; // The index to swap at each stage.\n\n  var index; // While there are still items to shuffle\n\n  while (length > 0) {\n    // chose a random index within the subset of the array\n    // that is not yet shuffled\n    index = Math.floor(randomSource() * length--); // store the value that we'll move temporarily\n\n    temporary = x[length]; // swap the value at `x[length]` with `x[index]`\n\n    x[length] = x[index];\n    x[index] = temporary;\n  }\n\n  return x;\n}\n\nmodule.exports = shuffleInPlace;","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/simple-statistics/src/shuffle_in_place.js"],"names":["shuffleInPlace","x","randomSource","Math","random","length","temporary","index","floor","module","exports"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,cAAT,CAAwBC;AAAC;AAAzB,EAA0CC;AAAY;AAAtD;AAAoE;AAAgB;AAEhF;AACA;AACA;AACAA,EAAAA,YAAY,GAAGA,YAAY,IAAIC,IAAI,CAACC,MAApC,CALgF,CAOhF;AACA;;AACA,MAAIC,MAAM,GAAGJ,CAAC,CAACI,MAAf,CATgF,CAWhF;AACA;;AACA,MAAIC,SAAJ,CAbgF,CAehF;;AACA,MAAIC,KAAJ,CAhBgF,CAkBhF;;AACA,SAAOF,MAAM,GAAG,CAAhB,EAAmB;AACf;AACA;AACAE,IAAAA,KAAK,GAAGJ,IAAI,CAACK,KAAL,CAAWN,YAAY,KAAKG,MAAM,EAAlC,CAAR,CAHe,CAKf;;AACAC,IAAAA,SAAS,GAAGL,CAAC,CAACI,MAAD,CAAb,CANe,CAQf;;AACAJ,IAAAA,CAAC,CAACI,MAAD,CAAD,GAAYJ,CAAC,CAACM,KAAD,CAAb;AACAN,IAAAA,CAAC,CAACM,KAAD,CAAD,GAAWD,SAAX;AACH;;AAED,SAAOL,CAAP;AACH;;AAEDQ,MAAM,CAACC,OAAP,GAAiBV,cAAjB","sourcesContent":["'use strict';\n/* @flow */\n\n/**\n * A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\n * in-place - which means that it **will change the order of the original\n * array by reference**.\n *\n * This is an algorithm that generates a random [permutation](https://en.wikipedia.org/wiki/Permutation)\n * of a set.\n *\n * @param {Array} x sample of one or more numbers\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @returns {Array} x\n * @example\n * var x = [1, 2, 3, 4];\n * shuffleInPlace(x);\n * // x is shuffled to a value like [2, 1, 4, 3]\n */\nfunction shuffleInPlace(x/*:Array<any>*/, randomSource/*:Function*/)/*:Array<any>*/ {\n\n    // a custom random number source can be provided if you want to use\n    // a fixed seed or another random number generator, like\n    // [random-js](https://www.npmjs.org/package/random-js)\n    randomSource = randomSource || Math.random;\n\n    // store the current length of the x to determine\n    // when no elements remain to shuffle.\n    var length = x.length;\n\n    // temporary is used to hold an item when it is being\n    // swapped between indices.\n    var temporary;\n\n    // The index to swap at each stage.\n    var index;\n\n    // While there are still items to shuffle\n    while (length > 0) {\n        // chose a random index within the subset of the array\n        // that is not yet shuffled\n        index = Math.floor(randomSource() * length--);\n\n        // store the value that we'll move temporarily\n        temporary = x[length];\n\n        // swap the value at `x[length]` with `x[index]`\n        x[length] = x[index];\n        x[index] = temporary;\n    }\n\n    return x;\n}\n\nmodule.exports = shuffleInPlace;\n"]},"metadata":{},"sourceType":"script"}