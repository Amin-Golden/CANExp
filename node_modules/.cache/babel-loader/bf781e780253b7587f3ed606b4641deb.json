{"ast":null,"code":"\"use strict\";\n/**\n * This file contains all the error strings used in the library. Also contains silliness.\n *\n * @author jdiaz5513\n */\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar debug_1 = require(\"debug\");\n\nvar constants_1 = require(\"./constants\");\n\nvar trace = debug_1.default('capnp:errors');\ntrace('load');\n\nfunction assertNever(n) {\n  throw new Error(exports.INVARIANT_UNREACHABLE_CODE + (\" (never block hit with: \" + n + \")\"));\n}\n\nexports.assertNever = assertNever; // Invariant violations (sometimes known as \"precondition failed\").\n//\n// All right, hold up the brakes. This is a serious 1 === 0 WHAT THE FAILURE moment here. Tell the SO's you won't be\n// home for dinner.\n\nexports.INVARIANT_UNREACHABLE_CODE = 'CAPNP-TS000 Unreachable code detected.'; // Message errors.\n//\n// Now who told you it would be a good idea to fuzz the inputs? You just made the program sad.\n\nexports.MSG_INVALID_FRAME_HEADER = 'CAPNP-TS001 Attempted to parse an invalid message frame header; are you sure this is a Cap\\'n Proto message?';\nexports.MSG_NO_SEGMENTS_IN_ARENA = 'CAPNP-TS002 Attempted to preallocate a message with no segments in the arena.';\nexports.MSG_PACK_NOT_WORD_ALIGNED = 'CAPNP-TS003 Attempted to pack a message that was not word-aligned.';\nexports.MSG_SEGMENT_OUT_OF_BOUNDS = 'CAPNP-TS004 Segment ID %X is out of bounds for message %s.';\nexports.MSG_SEGMENT_TOO_SMALL = 'CAPNP-TS005 First segment must have at least enough room to hold the root pointer (8 bytes).'; // Used for methods that are not yet implemented.\n//\n// My bad. I'll get to it. Eventually.\n\nexports.NOT_IMPLEMENTED = 'CAPNP-TS006 %s is not implemented.'; // Pointer-related errors.\n//\n// Look, this is probably the hardest part of the code. Cut some slack here! You probably found a bug.\n\nexports.PTR_ADOPT_COMPOSITE_STRUCT = 'CAPNP-TS007 Attempted to adopt a struct into a composite list (%s).';\nexports.PTR_ADOPT_WRONG_MESSAGE = 'CAPNP-TS008 Attempted to adopt %s into a pointer in a different message %s.';\nexports.PTR_ALREADY_ADOPTED = 'CAPNP-TS009 Attempted to adopt %s more than once.';\nexports.PTR_COMPOSITE_SIZE_UNDEFINED = 'CAPNP-TS010 Attempted to set a composite list without providing a composite element size.';\nexports.PTR_DEPTH_LIMIT_EXCEEDED = 'CAPNP-TS011 Nesting depth limit exceeded for %s.';\nexports.PTR_DISOWN_COMPOSITE_STRUCT = 'CAPNP-TS012 Attempted to disown a struct member from a composite list (%s).';\nexports.PTR_INIT_COMPOSITE_STRUCT = 'CAPNP-TS013 Attempted to initialize a struct member from a composite list (%s).';\nexports.PTR_INIT_NON_GROUP = 'CAPNP-TS014 Attempted to initialize a group field with a non-group struct class.';\nexports.PTR_INVALID_FAR_TARGET = 'CAPNP-TS015 Target of a far pointer (%s) is another far pointer.';\nexports.PTR_INVALID_LIST_SIZE = 'CAPNP-TS016 Invalid list element size: %x.';\nexports.PTR_INVALID_POINTER_TYPE = 'CAPNP-TS017 Invalid pointer type: %x.';\nexports.PTR_INVALID_UNION_ACCESS = 'CAPNP-TS018 Attempted to access getter on %s for union field %s that is not currently set (wanted: %d, found: %d).';\nexports.PTR_OFFSET_OUT_OF_BOUNDS = 'CAPNP-TS019 Pointer offset %a is out of bounds for underlying buffer.';\nexports.PTR_STRUCT_DATA_OUT_OF_BOUNDS = 'CAPNP-TS020 Attempted to access out-of-bounds struct data (struct: %s, %d bytes at %a, data words: %d).';\nexports.PTR_STRUCT_POINTER_OUT_OF_BOUNDS = 'CAPNP-TS021 Attempted to access out-of-bounds struct pointer (%s, index: %d, length: %d).';\nexports.PTR_TRAVERSAL_LIMIT_EXCEEDED = 'CAPNP-TS022 Traversal limit exceeded! Slow down! %s';\nexports.PTR_WRONG_LIST_TYPE = 'CAPNP-TS023 Cannot convert %s to a %s list.';\nexports.PTR_WRONG_POINTER_TYPE = 'CAPNP-TS024 Attempted to convert pointer %s to a %s type.';\nexports.PTR_WRONG_COMPOSITE_DATA_SIZE = 'CAPNP-TS025 Attempted to convert %s to a composite list with the wrong data size (found: %d).';\nexports.PTR_WRONG_COMPOSITE_PTR_SIZE = 'CAPNP-TS026 Attempted to convert %s to a composite list with the wrong pointer size (found: %d).';\nexports.PTR_WRONG_STRUCT_DATA_SIZE = 'CAPNP-TS027 Attempted to convert %s to a struct with the wrong data size (found: %d).';\nexports.PTR_WRONG_STRUCT_PTR_SIZE = 'CAPNP-TS028 Attempted to convert %s to a struct with the wrong pointer size (found: %d).'; // Custom error messages for the built-in `RangeError` class.\n//\n// You don't get a witty comment with these.\n\nexports.RANGE_INT32_OVERFLOW = 'CAPNP-TS029 32-bit signed integer overflow detected.';\nexports.RANGE_INT64_UNDERFLOW = 'CAPNP-TS030 Buffer is not large enough to hold a word.';\nexports.RANGE_INVALID_UTF8 = 'CAPNP-TS031 Invalid UTF-8 code sequence detected.';\nexports.RANGE_SIZE_OVERFLOW = \"CAPNP-TS032 Size %x exceeds maximum \" + constants_1.MAX_SEGMENT_LENGTH.toString(16) + \".\";\nexports.RANGE_UINT32_OVERFLOW = 'CAPNP-TS033 32-bit unsigned integer overflow detected.'; // Segment-related errors.\n//\n// These suck. Deal with it.\n\nexports.SEG_BUFFER_NOT_ALLOCATED = 'CAPNP-TS034 allocate() needs to be called at least once before getting a buffer.';\nexports.SEG_GET_NON_ZERO_SINGLE = 'CAPNP-TS035 Attempted to get a segment other than 0 (%d) from a single segment arena.';\nexports.SEG_ID_OUT_OF_BOUNDS = 'CAPNP-TS036 Attempted to get an out-of-bounds segment (%d).';\nexports.SEG_NOT_WORD_ALIGNED = 'CAPNP-TS037 Segment buffer length %d is not a multiple of 8.';\nexports.SEG_REPLACEMENT_BUFFER_TOO_SMALL = 'CAPNP-TS038 Attempted to replace a segment buffer with one that is smaller than the allocated space.';\nexports.SEG_SIZE_OVERFLOW = \"CAPNP-TS039 Requested size %x exceeds maximum value (\" + constants_1.MAX_SEGMENT_LENGTH + \").\"; // Custom error messages for the built-in `TypeError` class.\n//\n// If it looks like a duck, quacks like an elephant, and has hooves for feet, it's probably JavaScript.\n\nexports.TYPE_COMPOSITE_SIZE_UNDEFINED = 'CAPNP-TS040 Must provide a composite element size for composite list pointers.';\nexports.TYPE_GET_GENERIC_LIST = 'CAPNP-TS041 Attempted to call get() on a generic list.';\nexports.TYPE_SET_GENERIC_LIST = 'CAPNP-TS042 Attempted to call set() on a generic list.';","map":{"version":3,"sources":["errors.ts"],"names":[],"mappings":";AAAA;;;;AAIG;;;;;;AAEH,IAAA,OAAA,GAAA,OAAA,CAAA,OAAA,CAAA;;AAEA,IAAA,WAAA,GAAA,OAAA,CAAA,aAAA,CAAA;;AAEA,IAAM,KAAK,GAAG,OAAA,CAAA,OAAA,CAAU,cAAV,CAAd;AACA,KAAK,CAAC,MAAD,CAAL;;AAEA,SAAA,WAAA,CAA4B,CAA5B,EAAoC;AAElC,QAAM,IAAI,KAAJ,CAAU,OAAA,CAAA,0BAAA,IAA6B,6BAA2B,CAA3B,GAA4B,GAAzD,CAAV,CAAN;AAED;;AAJD,OAAA,CAAA,WAAA,GAAA,WAAA,C,CAMA;AACA;AACA;AACA;;AAEa,OAAA,CAAA,0BAAA,GACX,wCADW,C,CAGb;AACA;AACA;;AAEa,OAAA,CAAA,wBAAA,GACX,8GADW;AAEA,OAAA,CAAA,wBAAA,GACX,+EADW;AAEA,OAAA,CAAA,yBAAA,GACX,oEADW;AAEA,OAAA,CAAA,yBAAA,GACX,4DADW;AAEA,OAAA,CAAA,qBAAA,GACX,8FADW,C,CAGb;AACA;AACA;;AAEa,OAAA,CAAA,eAAA,GACX,oCADW,C,CAGb;AACA;AACA;;AAEa,OAAA,CAAA,0BAAA,GACX,qEADW;AAEA,OAAA,CAAA,uBAAA,GACX,6EADW;AAEA,OAAA,CAAA,mBAAA,GACX,mDADW;AAEA,OAAA,CAAA,4BAAA,GACX,2FADW;AAEA,OAAA,CAAA,wBAAA,GACX,kDADW;AAEA,OAAA,CAAA,2BAAA,GACX,6EADW;AAEA,OAAA,CAAA,yBAAA,GACX,iFADW;AAEA,OAAA,CAAA,kBAAA,GACX,kFADW;AAEA,OAAA,CAAA,sBAAA,GACX,kEADW;AAEA,OAAA,CAAA,qBAAA,GACX,4CADW;AAEA,OAAA,CAAA,wBAAA,GACX,uCADW;AAEA,OAAA,CAAA,wBAAA,GACX,oHADW;AAEA,OAAA,CAAA,wBAAA,GACX,uEADW;AAEA,OAAA,CAAA,6BAAA,GACX,yGADW;AAEA,OAAA,CAAA,gCAAA,GACX,2FADW;AAEA,OAAA,CAAA,4BAAA,GACX,qDADW;AAEA,OAAA,CAAA,mBAAA,GACX,6CADW;AAEA,OAAA,CAAA,sBAAA,GACX,2DADW;AAEA,OAAA,CAAA,6BAAA,GACX,+FADW;AAEA,OAAA,CAAA,4BAAA,GACX,kGADW;AAEA,OAAA,CAAA,0BAAA,GACX,uFADW;AAEA,OAAA,CAAA,yBAAA,GACX,0FADW,C,CAGb;AACA;AACA;;AAEa,OAAA,CAAA,oBAAA,GACX,sDADW;AAEA,OAAA,CAAA,qBAAA,GACX,wDADW;AAEA,OAAA,CAAA,kBAAA,GACX,mDADW;AAEA,OAAA,CAAA,mBAAA,GACX,yCAAuC,WAAA,CAAA,kBAAA,CAAmB,QAAnB,CAA4B,EAA5B,CAAvC,GAAsE,GAD3D;AAEA,OAAA,CAAA,qBAAA,GACX,wDADW,C,CAGb;AACA;AACA;;AAEa,OAAA,CAAA,wBAAA,GACX,kFADW;AAEA,OAAA,CAAA,uBAAA,GACX,uFADW;AAEA,OAAA,CAAA,oBAAA,GACX,6DADW;AAEA,OAAA,CAAA,oBAAA,GACX,8DADW;AAEA,OAAA,CAAA,gCAAA,GACX,sGADW;AAEA,OAAA,CAAA,iBAAA,GACX,0DAAwD,WAAA,CAAA,kBAAxD,GAA0E,IAD/D,C,CAGb;AACA;AACA;;AAEa,OAAA,CAAA,6BAAA,GACX,gFADW;AAEA,OAAA,CAAA,qBAAA,GACX,wDADW;AAEA,OAAA,CAAA,qBAAA,GACX,wDADW","sourceRoot":"../src","sourcesContent":["\"use strict\";\n/**\n * This file contains all the error strings used in the library. Also contains silliness.\n *\n * @author jdiaz5513\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar debug_1 = require(\"debug\");\nvar constants_1 = require(\"./constants\");\nvar trace = debug_1.default('capnp:errors');\ntrace('load');\nfunction assertNever(n) {\n    throw new Error(exports.INVARIANT_UNREACHABLE_CODE + (\" (never block hit with: \" + n + \")\"));\n}\nexports.assertNever = assertNever;\n// Invariant violations (sometimes known as \"precondition failed\").\n//\n// All right, hold up the brakes. This is a serious 1 === 0 WHAT THE FAILURE moment here. Tell the SO's you won't be\n// home for dinner.\nexports.INVARIANT_UNREACHABLE_CODE = 'CAPNP-TS000 Unreachable code detected.';\n// Message errors.\n//\n// Now who told you it would be a good idea to fuzz the inputs? You just made the program sad.\nexports.MSG_INVALID_FRAME_HEADER = 'CAPNP-TS001 Attempted to parse an invalid message frame header; are you sure this is a Cap\\'n Proto message?';\nexports.MSG_NO_SEGMENTS_IN_ARENA = 'CAPNP-TS002 Attempted to preallocate a message with no segments in the arena.';\nexports.MSG_PACK_NOT_WORD_ALIGNED = 'CAPNP-TS003 Attempted to pack a message that was not word-aligned.';\nexports.MSG_SEGMENT_OUT_OF_BOUNDS = 'CAPNP-TS004 Segment ID %X is out of bounds for message %s.';\nexports.MSG_SEGMENT_TOO_SMALL = 'CAPNP-TS005 First segment must have at least enough room to hold the root pointer (8 bytes).';\n// Used for methods that are not yet implemented.\n//\n// My bad. I'll get to it. Eventually.\nexports.NOT_IMPLEMENTED = 'CAPNP-TS006 %s is not implemented.';\n// Pointer-related errors.\n//\n// Look, this is probably the hardest part of the code. Cut some slack here! You probably found a bug.\nexports.PTR_ADOPT_COMPOSITE_STRUCT = 'CAPNP-TS007 Attempted to adopt a struct into a composite list (%s).';\nexports.PTR_ADOPT_WRONG_MESSAGE = 'CAPNP-TS008 Attempted to adopt %s into a pointer in a different message %s.';\nexports.PTR_ALREADY_ADOPTED = 'CAPNP-TS009 Attempted to adopt %s more than once.';\nexports.PTR_COMPOSITE_SIZE_UNDEFINED = 'CAPNP-TS010 Attempted to set a composite list without providing a composite element size.';\nexports.PTR_DEPTH_LIMIT_EXCEEDED = 'CAPNP-TS011 Nesting depth limit exceeded for %s.';\nexports.PTR_DISOWN_COMPOSITE_STRUCT = 'CAPNP-TS012 Attempted to disown a struct member from a composite list (%s).';\nexports.PTR_INIT_COMPOSITE_STRUCT = 'CAPNP-TS013 Attempted to initialize a struct member from a composite list (%s).';\nexports.PTR_INIT_NON_GROUP = 'CAPNP-TS014 Attempted to initialize a group field with a non-group struct class.';\nexports.PTR_INVALID_FAR_TARGET = 'CAPNP-TS015 Target of a far pointer (%s) is another far pointer.';\nexports.PTR_INVALID_LIST_SIZE = 'CAPNP-TS016 Invalid list element size: %x.';\nexports.PTR_INVALID_POINTER_TYPE = 'CAPNP-TS017 Invalid pointer type: %x.';\nexports.PTR_INVALID_UNION_ACCESS = 'CAPNP-TS018 Attempted to access getter on %s for union field %s that is not currently set (wanted: %d, found: %d).';\nexports.PTR_OFFSET_OUT_OF_BOUNDS = 'CAPNP-TS019 Pointer offset %a is out of bounds for underlying buffer.';\nexports.PTR_STRUCT_DATA_OUT_OF_BOUNDS = 'CAPNP-TS020 Attempted to access out-of-bounds struct data (struct: %s, %d bytes at %a, data words: %d).';\nexports.PTR_STRUCT_POINTER_OUT_OF_BOUNDS = 'CAPNP-TS021 Attempted to access out-of-bounds struct pointer (%s, index: %d, length: %d).';\nexports.PTR_TRAVERSAL_LIMIT_EXCEEDED = 'CAPNP-TS022 Traversal limit exceeded! Slow down! %s';\nexports.PTR_WRONG_LIST_TYPE = 'CAPNP-TS023 Cannot convert %s to a %s list.';\nexports.PTR_WRONG_POINTER_TYPE = 'CAPNP-TS024 Attempted to convert pointer %s to a %s type.';\nexports.PTR_WRONG_COMPOSITE_DATA_SIZE = 'CAPNP-TS025 Attempted to convert %s to a composite list with the wrong data size (found: %d).';\nexports.PTR_WRONG_COMPOSITE_PTR_SIZE = 'CAPNP-TS026 Attempted to convert %s to a composite list with the wrong pointer size (found: %d).';\nexports.PTR_WRONG_STRUCT_DATA_SIZE = 'CAPNP-TS027 Attempted to convert %s to a struct with the wrong data size (found: %d).';\nexports.PTR_WRONG_STRUCT_PTR_SIZE = 'CAPNP-TS028 Attempted to convert %s to a struct with the wrong pointer size (found: %d).';\n// Custom error messages for the built-in `RangeError` class.\n//\n// You don't get a witty comment with these.\nexports.RANGE_INT32_OVERFLOW = 'CAPNP-TS029 32-bit signed integer overflow detected.';\nexports.RANGE_INT64_UNDERFLOW = 'CAPNP-TS030 Buffer is not large enough to hold a word.';\nexports.RANGE_INVALID_UTF8 = 'CAPNP-TS031 Invalid UTF-8 code sequence detected.';\nexports.RANGE_SIZE_OVERFLOW = \"CAPNP-TS032 Size %x exceeds maximum \" + constants_1.MAX_SEGMENT_LENGTH.toString(16) + \".\";\nexports.RANGE_UINT32_OVERFLOW = 'CAPNP-TS033 32-bit unsigned integer overflow detected.';\n// Segment-related errors.\n//\n// These suck. Deal with it.\nexports.SEG_BUFFER_NOT_ALLOCATED = 'CAPNP-TS034 allocate() needs to be called at least once before getting a buffer.';\nexports.SEG_GET_NON_ZERO_SINGLE = 'CAPNP-TS035 Attempted to get a segment other than 0 (%d) from a single segment arena.';\nexports.SEG_ID_OUT_OF_BOUNDS = 'CAPNP-TS036 Attempted to get an out-of-bounds segment (%d).';\nexports.SEG_NOT_WORD_ALIGNED = 'CAPNP-TS037 Segment buffer length %d is not a multiple of 8.';\nexports.SEG_REPLACEMENT_BUFFER_TOO_SMALL = 'CAPNP-TS038 Attempted to replace a segment buffer with one that is smaller than the allocated space.';\nexports.SEG_SIZE_OVERFLOW = \"CAPNP-TS039 Requested size %x exceeds maximum value (\" + constants_1.MAX_SEGMENT_LENGTH + \").\";\n// Custom error messages for the built-in `TypeError` class.\n//\n// If it looks like a duck, quacks like an elephant, and has hooves for feet, it's probably JavaScript.\nexports.TYPE_COMPOSITE_SIZE_UNDEFINED = 'CAPNP-TS040 Must provide a composite element size for composite list pointers.';\nexports.TYPE_GET_GENERIC_LIST = 'CAPNP-TS041 Attempted to call get() on a generic list.';\nexports.TYPE_SET_GENERIC_LIST = 'CAPNP-TS042 Attempted to call set() on a generic list.';\n\n//# sourceMappingURL=errors.js.map\n"]},"metadata":{},"sourceType":"script"}