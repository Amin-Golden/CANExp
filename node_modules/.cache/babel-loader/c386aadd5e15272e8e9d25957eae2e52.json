{"ast":null,"code":"'use strict';\n/* @flow */\n\nvar mean = require('./mean');\n\nvar sampleVariance = require('./sample_variance');\n/**\n * This is to compute [two sample t-test](http://en.wikipedia.org/wiki/Student's_t-test).\n * Tests whether \"mean(X)-mean(Y) = difference\", (\n * in the most common case, we often have `difference == 0` to test if two samples\n * are likely to be taken from populations with the same mean value) with\n * no prior knowledge on standard deviations of both samples\n * other than the fact that they have the same standard deviation.\n *\n * Usually the results here are used to look up a\n * [p-value](http://en.wikipedia.org/wiki/P-value), which, for\n * a certain level of significance, will let you determine that the\n * null hypothesis can or cannot be rejected.\n *\n * `diff` can be omitted if it equals 0.\n *\n * [This is used to confirm or deny](http://www.monarchlab.org/Lab/Research/Stats/2SampleT.aspx)\n * a null hypothesis that the two populations that have been sampled into\n * `sampleX` and `sampleY` are equal to each other.\n *\n * @param {Array<number>} sampleX a sample as an array of numbers\n * @param {Array<number>} sampleY a sample as an array of numbers\n * @param {number} [difference=0]\n * @returns {number} test result\n * @example\n * ss.tTestTwoSample([1, 2, 3, 4], [3, 4, 5, 6], 0); //= -2.1908902300206643\n */\n\n\nfunction tTestTwoSample(sampleX\n/*: Array<number> */\n, sampleY\n/*: Array<number> */\n, difference\n/*: number */\n) {\n  var n = sampleX.length,\n      m = sampleY.length; // If either sample doesn't actually have any values, we can't\n  // compute this at all, so we return `null`.\n\n  if (!n || !m) {\n    return null;\n  } // default difference (mu) is zero\n\n\n  if (!difference) {\n    difference = 0;\n  }\n\n  var meanX = mean(sampleX),\n      meanY = mean(sampleY),\n      sampleVarianceX = sampleVariance(sampleX),\n      sampleVarianceY = sampleVariance(sampleY);\n\n  if (typeof meanX === 'number' && typeof meanY === 'number' && typeof sampleVarianceX === 'number' && typeof sampleVarianceY === 'number') {\n    var weightedVariance = ((n - 1) * sampleVarianceX + (m - 1) * sampleVarianceY) / (n + m - 2);\n    return (meanX - meanY - difference) / Math.sqrt(weightedVariance * (1 / n + 1 / m));\n  }\n}\n\nmodule.exports = tTestTwoSample;","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/simple-statistics/src/t_test_two_sample.js"],"names":["mean","require","sampleVariance","tTestTwoSample","sampleX","sampleY","difference","n","length","m","meanX","meanY","sampleVarianceX","sampleVarianceY","weightedVariance","Math","sqrt","module","exports"],"mappings":"AAAA;AACA;;AAEA,IAAIA,IAAI,GAAGC,OAAO,CAAC,QAAD,CAAlB;;AACA,IAAIC,cAAc,GAAGD,OAAO,CAAC,mBAAD,CAA5B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASE,cAAT,CACIC;AAAO;AADX,EAEIC;AAAO;AAFX,EAGIC;AAAU;AAHd,EAG6B;AACzB,MAAIC,CAAC,GAAGH,OAAO,CAACI,MAAhB;AAAA,MACIC,CAAC,GAAGJ,OAAO,CAACG,MADhB,CADyB,CAIzB;AACA;;AACA,MAAI,CAACD,CAAD,IAAM,CAACE,CAAX,EAAc;AAAE,WAAO,IAAP;AAAc,GANL,CAQzB;;;AACA,MAAI,CAACH,UAAL,EAAiB;AACbA,IAAAA,UAAU,GAAG,CAAb;AACH;;AAED,MAAII,KAAK,GAAGV,IAAI,CAACI,OAAD,CAAhB;AAAA,MACIO,KAAK,GAAGX,IAAI,CAACK,OAAD,CADhB;AAAA,MAEIO,eAAe,GAAGV,cAAc,CAACE,OAAD,CAFpC;AAAA,MAGIS,eAAe,GAAGX,cAAc,CAACG,OAAD,CAHpC;;AAKA,MAAI,OAAOK,KAAP,KAAiB,QAAjB,IACA,OAAOC,KAAP,KAAiB,QADjB,IAEA,OAAOC,eAAP,KAA2B,QAF3B,IAGA,OAAOC,eAAP,KAA2B,QAH/B,EAGyC;AACrC,QAAIC,gBAAgB,GAAG,CAAC,CAACP,CAAC,GAAG,CAAL,IAAUK,eAAV,GACpB,CAACH,CAAC,GAAG,CAAL,IAAUI,eADS,KACWN,CAAC,GAAGE,CAAJ,GAAQ,CADnB,CAAvB;AAGA,WAAO,CAACC,KAAK,GAAGC,KAAR,GAAgBL,UAAjB,IACHS,IAAI,CAACC,IAAL,CAAUF,gBAAgB,IAAI,IAAIP,CAAJ,GAAQ,IAAIE,CAAhB,CAA1B,CADJ;AAEH;AACJ;;AAEDQ,MAAM,CAACC,OAAP,GAAiBf,cAAjB","sourcesContent":["'use strict';\n/* @flow */\n\nvar mean = require('./mean');\nvar sampleVariance = require('./sample_variance');\n\n/**\n * This is to compute [two sample t-test](http://en.wikipedia.org/wiki/Student's_t-test).\n * Tests whether \"mean(X)-mean(Y) = difference\", (\n * in the most common case, we often have `difference == 0` to test if two samples\n * are likely to be taken from populations with the same mean value) with\n * no prior knowledge on standard deviations of both samples\n * other than the fact that they have the same standard deviation.\n *\n * Usually the results here are used to look up a\n * [p-value](http://en.wikipedia.org/wiki/P-value), which, for\n * a certain level of significance, will let you determine that the\n * null hypothesis can or cannot be rejected.\n *\n * `diff` can be omitted if it equals 0.\n *\n * [This is used to confirm or deny](http://www.monarchlab.org/Lab/Research/Stats/2SampleT.aspx)\n * a null hypothesis that the two populations that have been sampled into\n * `sampleX` and `sampleY` are equal to each other.\n *\n * @param {Array<number>} sampleX a sample as an array of numbers\n * @param {Array<number>} sampleY a sample as an array of numbers\n * @param {number} [difference=0]\n * @returns {number} test result\n * @example\n * ss.tTestTwoSample([1, 2, 3, 4], [3, 4, 5, 6], 0); //= -2.1908902300206643\n */\nfunction tTestTwoSample(\n    sampleX/*: Array<number> */,\n    sampleY/*: Array<number> */,\n    difference/*: number */) {\n    var n = sampleX.length,\n        m = sampleY.length;\n\n    // If either sample doesn't actually have any values, we can't\n    // compute this at all, so we return `null`.\n    if (!n || !m) { return null; }\n\n    // default difference (mu) is zero\n    if (!difference) {\n        difference = 0;\n    }\n\n    var meanX = mean(sampleX),\n        meanY = mean(sampleY),\n        sampleVarianceX = sampleVariance(sampleX),\n        sampleVarianceY = sampleVariance(sampleY);\n\n    if (typeof meanX === 'number' &&\n        typeof meanY === 'number' &&\n        typeof sampleVarianceX === 'number' &&\n        typeof sampleVarianceY === 'number') {\n        var weightedVariance = ((n - 1) * sampleVarianceX +\n            (m - 1) * sampleVarianceY) / (n + m - 2);\n\n        return (meanX - meanY - difference) /\n            Math.sqrt(weightedVariance * (1 / n + 1 / m));\n    }\n}\n\nmodule.exports = tTestTwoSample;\n"]},"metadata":{},"sourceType":"script"}