{"ast":null,"code":"var _jsxFileName = \"/home/amax/Autoro/cabana/src/components/Explorer.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport AddSignals from './AddSignals';\nimport CanGraphList from './CanGraphList';\nimport RouteVideoSync from './RouteVideoSync';\nimport CanLog from './CanLog';\nimport Entries from '../models/can/entries';\nimport debounce from '../utils/debounce';\nimport PlaySpeedSelector from './PlaySpeedSelector';\n\nfunction clipSegment(_segment, _segmentIndices, nextMessage) {\n  let segment = _segment;\n  let segmentIndices = _segmentIndices;\n\n  if (segment.length === 2) {\n    const segmentStartIdx = nextMessage.entries.findIndex(e => e.relTime >= segment[0]);\n    let segmentEndIdx = nextMessage.entries.findIndex(e => e.relTime >= segment[1]);\n\n    if (segmentStartIdx !== -1) {\n      if (segmentEndIdx === -1) {\n        // previous segment end is past bounds of this message\n        segmentEndIdx = nextMessage.entries.length - 1;\n      }\n\n      const segmentStartTime = nextMessage.entries[segmentStartIdx].relTime;\n      const segmentEndTime = nextMessage.entries[segmentEndIdx].relTime;\n      segment = [segmentStartTime, segmentEndTime];\n      segmentIndices = [segmentStartIdx, segmentEndIdx];\n    } else {\n      // segment times are out of boudns for this message\n      segment = [];\n      segmentIndices = [];\n    }\n  }\n\n  return {\n    segment,\n    segmentIndices\n  };\n}\n\nexport default class Explorer extends Component {\n  constructor(props) {\n    super(props);\n    this.updateSegment = debounce((messageId, _segment) => {\n      let segment = _segment;\n      const {\n        messages,\n        selectedMessage,\n        currentParts\n      } = this.props;\n      const {\n        entries\n      } = messages[selectedMessage];\n      let segmentIndices = Entries.findSegmentIndices(entries, segment, true); // console.log(this.state.segment, '->', segment, segmentIndices);\n\n      if (segment[0] === currentParts[0] * 60 && segment[1] === (currentParts[1] + 1) * 60) {\n        segment = [];\n        segmentIndices = [];\n      }\n\n      let {\n        userSeekTime\n      } = this.state;\n\n      if (segment.length) {\n        userSeekTime = Math.max(segment[0], userSeekTime);\n        userSeekTime = Math.min(segment[1], userSeekTime);\n      } else {\n        userSeekTime = Math.max(currentParts[0] * 60, userSeekTime);\n        userSeekTime = Math.min(currentParts[1] * 60, userSeekTime);\n      }\n\n      this.setState({\n        segment,\n        segmentIndices,\n        userSeekIndex: segmentIndices[0],\n        userSeekTime\n      });\n    }, 250);\n    this.state = {\n      plottedSignals: [],\n      segment: props.startSegments || [],\n      segmentIndices: [],\n      shouldShowAddSignal: true,\n      userSeekIndex: 0,\n      userSeekTime: 0,\n      playing: props.autoplay,\n      playSpeed: 1\n    };\n    this.onSignalPlotPressed = this.onSignalPlotPressed.bind(this);\n    this.onSignalUnplotPressed = this.onSignalUnplotPressed.bind(this);\n    this.onSegmentChanged = this.onSegmentChanged.bind(this);\n    this.showAddSignal = this.showAddSignal.bind(this);\n    this.onGraphTimeClick = this.onGraphTimeClick.bind(this);\n    this.onUserSeek = this.onUserSeek.bind(this);\n    this.onPlaySeek = this.onPlaySeek.bind(this);\n    this.onPlay = this.onPlay.bind(this);\n    this.onPause = this.onPause.bind(this);\n    this.onVideoClick = this.onVideoClick.bind(this);\n    this.onSignalPlotChange = this.onSignalPlotChange.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n    this.mergePlots = this.mergePlots.bind(this);\n    this.toggleShouldShowAddSignal = this.toggleShouldShowAddSignal.bind(this);\n    this.changePlaySpeed = this.changePlaySpeed.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.onKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.onKeyDown);\n  }\n\n  onKeyDown(e) {\n    if (e.keyCode === 27) {\n      // escape\n      this.resetSegment();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevMessage = prevProps.messages[prevProps.selectedMessage];\n    const curMessage = this.props.messages[this.props.selectedMessage];\n\n    if (Object.keys(prevProps.messages).length === 0 && Object.keys(this.props.messages).length !== 0) {\n      this.resetSegment();\n    }\n\n    if (curMessage && curMessage.frame && prevMessage !== curMessage) {\n      if (Object.keys(curMessage.frame.signals).length === 0) {\n        this.setState({\n          shouldShowAddSignal: true\n        });\n      }\n    } // remove plottedSignals that no longer exist\n\n\n    const newPlottedSignals = this.state.plottedSignals.map(plot => plot.filter(_ref => {\n      let {\n        messageId,\n        signalUid\n      } = _ref;\n      const messageExists = Boolean(this.props.messages[messageId]);\n      let signalExists = true;\n\n      if (messageExists) {\n        signalExists = Object.values(this.props.messages[messageId].frame.signals).some(signal => signal.uid === signalUid);\n      }\n\n      return messageExists && signalExists;\n    })).filter(plot => plot.length > 0);\n\n    if (this.state.plottedSignals.length !== newPlottedSignals.length) {\n      this.setState({\n        plottedSignals: newPlottedSignals\n      });\n    }\n\n    if (this.props.selectedMessage && prevProps.selectedMessage !== this.props.selectedMessage) {\n      // Update segment and seek state by finding a entry indices corresponding to old message segment/seek times.\n      const {\n        segment,\n        segmentIndices\n      } = clipSegment(this.state.segment, this.state.segmentIndices, curMessage);\n      this.setState({\n        segment,\n        segmentIndices,\n        userSeekIndex: this.props.seekIndex\n      });\n    }\n\n    if (prevMessage && curMessage && prevMessage.entries.length !== curMessage.entries.length) {\n      const {\n        segment,\n        segmentIndices\n      } = clipSegment(this.state.segment, this.state.segmentIndices, curMessage);\n      this.setState({\n        segment,\n        segmentIndices\n      });\n    }\n  }\n\n  changePlaySpeed(value) {\n    this.setState({\n      playSpeed: value\n    });\n  }\n\n  timeWindow() {\n    const {\n      routeStartTime,\n      currentParts\n    } = this.props;\n\n    if (routeStartTime) {\n      const partStartOffset = currentParts[0] * 60;\n      const partEndOffset = (currentParts[1] + 1) * 60;\n      const windowStartTime = routeStartTime.clone().add(partStartOffset, 's').format('HH:mm:ss');\n      const windowEndTime = routeStartTime.clone().add(partEndOffset, 's').format('HH:mm:ss');\n      return `${windowStartTime} - ${windowEndTime}`;\n    }\n\n    return '';\n  }\n\n  onSignalPlotPressed(messageId, signalUid) {\n    let {\n      plottedSignals\n    } = this.state;\n    plottedSignals = [[{\n      messageId,\n      signalUid\n    }], ...plottedSignals];\n    this.setState({\n      plottedSignals\n    });\n  }\n\n  onSignalUnplotPressed(messageId, signalUid) {\n    const {\n      plottedSignals\n    } = this.state;\n    const newPlottedSignals = plottedSignals.map(plot => plot.filter(signal => !(signal.messageId === messageId && signal.signalUid === signalUid))).filter(plot => plot.length > 0);\n    this.setState({\n      plottedSignals: newPlottedSignals\n    });\n  }\n\n  onSegmentChanged(messageId, segment) {\n    if (Array.isArray(segment)) {\n      this.updateSegment(messageId, segment);\n    }\n  }\n\n  resetSegment() {\n    const {\n      segment,\n      segmentIndices\n    } = this.state;\n\n    if (segment.length > 0 || segmentIndices.length > 0) {\n      // console.log(this.state.segment, '->', segment, segmentIndices);\n      this.setState({\n        segment: [],\n        segmentIndices: [],\n        userSeekIndex: 0\n      });\n    }\n  }\n\n  showAddSignal() {\n    this.setState({\n      shouldShowAddSignal: true\n    });\n  }\n\n  toggleShouldShowAddSignal() {\n    this.setState({\n      shouldShowAddSignal: !this.state.shouldShowAddSignal\n    });\n  }\n\n  indexFromSeekTime(time) {\n    // returns index guaranteed to be in [0, entries.length - 1]\n    const {\n      entries\n    } = this.props.messages[this.props.selectedMessage];\n    if (entries.length === 0) return null;\n    const {\n      segmentIndices\n    } = this.state;\n\n    if (segmentIndices.length === 2 && segmentIndices[0] >= 0) {\n      for (let i = segmentIndices[0], l = Math.min(entries.length - 1, segmentIndices[1]); i <= l; i++) {\n        if (entries[i].relTime >= time) {\n          return i;\n        }\n      }\n\n      return segmentIndices[1];\n    }\n\n    for (let i = 0; i < entries.length; i++) {\n      if (entries[i].relTime >= time) {\n        return i;\n      }\n    }\n\n    return entries.length - 1;\n  }\n\n  onUserSeek(time) {\n    this.props.onUserSeek(time);\n    this.setState({\n      userSeekTime: time\n    });\n  }\n\n  onPlaySeek(time) {\n    const message = this.props.messages[this.props.selectedMessage];\n\n    if (!message || message.entries.length === 0) {\n      this.props.onSeek(0, time);\n      return;\n    }\n\n    const seekIndex = this.indexFromSeekTime(time);\n    const seekTime = time;\n    this.props.onSeek(seekIndex, seekTime);\n  }\n\n  onGraphTimeClick(messageId, time) {\n    this.onUserSeek(time);\n  }\n\n  onPlay() {\n    this.setState({\n      playing: true\n    });\n  }\n\n  onPause() {\n    this.setState({\n      playing: false\n    });\n  }\n\n  secondsLoadedRouteRelative(currentParts) {\n    return (currentParts[1] - currentParts[0] + 1) * 60;\n  }\n\n  secondsLoaded() {\n    return this.props.partsCount * 60;\n  }\n\n  onVideoClick() {\n    const playing = !this.state.playing;\n    this.setState({\n      playing\n    });\n  }\n\n  seekTime() {\n    const {\n      userSeekIndex\n    } = this.state;\n    const msg = this.props.messages[this.props.selectedMessage];\n    return msg.entries[userSeekIndex].time;\n  }\n\n  onSignalPlotChange(shouldPlot, messageId, signalUid) {\n    if (shouldPlot) {\n      this.onSignalPlotPressed(messageId, signalUid);\n    } else {\n      this.onSignalUnplotPressed(messageId, signalUid);\n    }\n  }\n\n  renderSelectMessagePrompt() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cabana-explorer-select-prompt\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }\n    }, \"Select a message\"));\n  }\n\n  selectedMessagePlottedSignalUids() {\n    const {\n      plottedSignals\n    } = this.state;\n    return plottedSignals.map(plot => plot.filter(_ref2 => {\n      let {\n        messageId,\n        signalUid\n      } = _ref2;\n      return messageId === this.props.selectedMessage;\n    }).map(_ref3 => {\n      let {\n        signalUid\n      } = _ref3;\n      return signalUid;\n    })).reduce((arr, signalUid) => arr.concat(signalUid), []);\n  }\n\n  renderExplorerSignals() {\n    const selectedMessageKey = this.props.selectedMessage;\n    const selectedMessage = this.props.messages[selectedMessageKey];\n    const selectedMessageName = selectedMessage.frame !== undefined ? selectedMessage.frame.name : 'undefined';\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cabana-explorer-signals-wrapper\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 361,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cabana-explorer-signals-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 362,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cabana-explorer-signals-header-context\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 363,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"h5\", {\n      className: \"t-capline\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 13\n      }\n    }, \"Selected Message:\"), /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 365,\n        columnNumber: 13\n      }\n    }, selectedMessageName)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cabana-explorer-signals-header-action\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 367,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      className: \"button--small\",\n      onClick: () => this.props.showEditMessageModal(selectedMessageKey),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 13\n      }\n    }, \"Edit\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cabana-explorer-signals-subheader\",\n      onClick: this.toggleShouldShowAddSignal,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 380,\n        columnNumber: 11\n      }\n    }, \"Edit Signals\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cabana-explorer-signals-window\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 382,\n        columnNumber: 9\n      }\n    }, this.state.shouldShowAddSignal ? /*#__PURE__*/React.createElement(AddSignals, {\n      onConfirmedSignalChange: this.props.onConfirmedSignalChange,\n      message: this.props.messages[this.props.selectedMessage],\n      onClose: () => {\n        this.setState({\n          shouldShowAddSignal: false\n        });\n      },\n      messageIndex: this.props.seekIndex,\n      onSignalPlotChange: this.onSignalPlotChange,\n      plottedSignalUids: this.selectedMessagePlottedSignalUids(),\n      selectedMessageKey: selectedMessageKey,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 13\n      }\n    }) : null, /*#__PURE__*/React.createElement(CanLog, {\n      message: this.props.messages[this.props.selectedMessage],\n      messageIndex: this.props.seekIndex,\n      segmentIndices: this.state.segmentIndices,\n      plottedSignals: this.state.plottedSignals,\n      onSignalPlotPressed: this.onSignalPlotPressed,\n      onSignalUnplotPressed: this.onSignalUnplotPressed,\n      showAddSignal: this.showAddSignal,\n      onMessageExpanded: this.onPause,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 396,\n        columnNumber: 11\n      }\n    })));\n  }\n\n  mergePlots(_ref4) {\n    let {\n      fromPlot,\n      toPlot\n    } = _ref4;\n    const {\n      plottedSignals\n    } = this.state; // remove fromPlot from plottedSignals\n\n    const fromPlotIdx = plottedSignals.findIndex(plot => plot.some(signal => signal.signalUid === fromPlot.signalUid && signal.messageId === fromPlot.messageId));\n    plottedSignals.splice(fromPlotIdx, 1);\n    const toPlotIdx = plottedSignals.findIndex(plot => plot.some(signal => signal.signalUid === toPlot.signalUid && signal.messageId === toPlot.messageId));\n    plottedSignals[toPlotIdx] = [fromPlot, toPlot];\n    this.setState({\n      plottedSignals\n    });\n  }\n\n  render() {\n    const signalsExpandedClass = this.state.shouldShowAddSignal ? 'is-expanded' : null;\n    const {\n      thumbnails,\n      messages,\n      startTime\n    } = this.props;\n    let graphSegment = this.state.segment;\n\n    if (!graphSegment.length && this.props.currentParts) {\n      graphSegment = [this.props.currentParts[0] * 60, (this.props.currentParts[1] + 1) * 60];\n    }\n\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cabana-explorer\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 445,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: cx('cabana-explorer-signals', signalsExpandedClass),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 446,\n        columnNumber: 9\n      }\n    }, messages[this.props.selectedMessage] ? this.renderExplorerSignals() : this.renderSelectMessagePrompt()), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cabana-explorer-visuals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 451,\n        columnNumber: 9\n      }\n    }, this.props.live === false ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 453,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cabana-explorer-visuals-header g-row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 454,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(PlaySpeedSelector, {\n      playSpeed: this.state.playSpeed,\n      onPlaySpeedChanged: this.changePlaySpeed,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(RouteVideoSync, {\n      message: messages[this.props.selectedMessage],\n      segment: this.state.segment,\n      maxqcamera: this.props.maxqcamera,\n      startTime: startTime,\n      seekIndex: this.props.seekIndex,\n      userSeekIndex: this.state.userSeekIndex,\n      playing: this.state.playing,\n      url: this.props.url,\n      firstCanTime: this.props.firstCanTime,\n      videoOffset: this.props.videoOffset,\n      onVideoClick: this.onVideoClick,\n      onPlaySeek: this.onPlaySeek,\n      onUserSeek: this.onUserSeek,\n      onPlay: this.onPlay,\n      onPause: this.onPause,\n      userSeekTime: this.state.userSeekTime,\n      playSpeed: this.state.playSpeed,\n      thumbnails: thumbnails,\n      route: this.props.route,\n      share: this.props.share,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 460,\n        columnNumber: 15\n      }\n    })) : null, this.state.segment.length > 0 ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cabana-explorer-visuals-segmentreset\",\n      onClick: () => {\n        this.resetSegment();\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 485,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 491,\n        columnNumber: 15\n      }\n    }, \"Reset Segment\")) : null, /*#__PURE__*/React.createElement(CanGraphList, {\n      plottedSignals: this.state.plottedSignals,\n      messages: messages,\n      onGraphTimeClick: this.onGraphTimeClick,\n      seekTime: this.props.seekTime,\n      onSegmentChanged: this.onSegmentChanged,\n      onSignalUnplotPressed: this.onSignalUnplotPressed,\n      segment: graphSegment,\n      mergePlots: this.mergePlots,\n      live: this.props.live,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\nExplorer.propTypes = {\n  selectedMessage: PropTypes.string,\n  url: PropTypes.string,\n  live: PropTypes.bool.isRequired,\n  messages: PropTypes.objectOf(PropTypes.object),\n  thumbnails: PropTypes.array.isRequired,\n  onConfirmedSignalChange: PropTypes.func.isRequired,\n  canFrameOffset: PropTypes.number,\n  firstCanTime: PropTypes.number,\n  onSeek: PropTypes.func.isRequired,\n  autoplay: PropTypes.bool.isRequired,\n  currentParts: PropTypes.array.isRequired,\n  partsCount: PropTypes.number,\n  maxqcamera: PropTypes.number,\n  startTime: PropTypes.number,\n  startSegments: PropTypes.array,\n  route: PropTypes.object,\n  share: PropTypes.object\n};","map":{"version":3,"sources":["/home/amax/Autoro/cabana/src/components/Explorer.js"],"names":["React","Component","PropTypes","cx","AddSignals","CanGraphList","RouteVideoSync","CanLog","Entries","debounce","PlaySpeedSelector","clipSegment","_segment","_segmentIndices","nextMessage","segment","segmentIndices","length","segmentStartIdx","entries","findIndex","e","relTime","segmentEndIdx","segmentStartTime","segmentEndTime","Explorer","constructor","props","updateSegment","messageId","messages","selectedMessage","currentParts","findSegmentIndices","userSeekTime","state","Math","max","min","setState","userSeekIndex","plottedSignals","startSegments","shouldShowAddSignal","playing","autoplay","playSpeed","onSignalPlotPressed","bind","onSignalUnplotPressed","onSegmentChanged","showAddSignal","onGraphTimeClick","onUserSeek","onPlaySeek","onPlay","onPause","onVideoClick","onSignalPlotChange","onKeyDown","mergePlots","toggleShouldShowAddSignal","changePlaySpeed","componentDidMount","document","addEventListener","componentWillUnmount","removeEventListener","keyCode","resetSegment","componentDidUpdate","prevProps","prevMessage","curMessage","Object","keys","frame","signals","newPlottedSignals","map","plot","filter","signalUid","messageExists","Boolean","signalExists","values","some","signal","uid","seekIndex","value","timeWindow","routeStartTime","partStartOffset","partEndOffset","windowStartTime","clone","add","format","windowEndTime","Array","isArray","indexFromSeekTime","time","i","l","message","onSeek","seekTime","secondsLoadedRouteRelative","secondsLoaded","partsCount","msg","shouldPlot","renderSelectMessagePrompt","selectedMessagePlottedSignalUids","reduce","arr","concat","renderExplorerSignals","selectedMessageKey","selectedMessageName","undefined","name","showEditMessageModal","onConfirmedSignalChange","fromPlot","toPlot","fromPlotIdx","splice","toPlotIdx","render","signalsExpandedClass","thumbnails","startTime","graphSegment","live","maxqcamera","url","firstCanTime","videoOffset","route","share","propTypes","string","bool","isRequired","objectOf","object","array","func","canFrameOffset","number"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nimport cx from 'classnames';\n\nimport AddSignals from './AddSignals';\nimport CanGraphList from './CanGraphList';\nimport RouteVideoSync from './RouteVideoSync';\nimport CanLog from './CanLog';\nimport Entries from '../models/can/entries';\nimport debounce from '../utils/debounce';\nimport PlaySpeedSelector from './PlaySpeedSelector';\n\nfunction clipSegment(_segment, _segmentIndices, nextMessage) {\n  let segment = _segment;\n  let segmentIndices = _segmentIndices;\n  if (segment.length === 2) {\n    const segmentStartIdx = nextMessage.entries.findIndex(\n      (e) => e.relTime >= segment[0]\n    );\n    let segmentEndIdx = nextMessage.entries.findIndex(\n      (e) => e.relTime >= segment[1]\n    );\n    if (segmentStartIdx !== -1) {\n      if (segmentEndIdx === -1) {\n        // previous segment end is past bounds of this message\n        segmentEndIdx = nextMessage.entries.length - 1;\n      }\n      const segmentStartTime = nextMessage.entries[segmentStartIdx].relTime;\n      const segmentEndTime = nextMessage.entries[segmentEndIdx].relTime;\n\n      segment = [segmentStartTime, segmentEndTime];\n      segmentIndices = [segmentStartIdx, segmentEndIdx];\n    } else {\n      // segment times are out of boudns for this message\n      segment = [];\n      segmentIndices = [];\n    }\n  }\n\n  return { segment, segmentIndices };\n}\n\nexport default class Explorer extends Component {\n  updateSegment = debounce((messageId, _segment) => {\n    let segment = _segment;\n    const { messages, selectedMessage, currentParts } = this.props;\n    const { entries } = messages[selectedMessage];\n    let segmentIndices = Entries.findSegmentIndices(entries, segment, true);\n\n    // console.log(this.state.segment, '->', segment, segmentIndices);\n    if (\n      segment[0] === currentParts[0] * 60\n      && segment[1] === (currentParts[1] + 1) * 60\n    ) {\n      segment = [];\n      segmentIndices = [];\n    }\n    let { userSeekTime } = this.state;\n    if (segment.length) {\n      userSeekTime = Math.max(segment[0], userSeekTime);\n      userSeekTime = Math.min(segment[1], userSeekTime);\n    } else {\n      userSeekTime = Math.max(currentParts[0] * 60, userSeekTime);\n      userSeekTime = Math.min(currentParts[1] * 60, userSeekTime);\n    }\n    this.setState({\n      segment,\n      segmentIndices,\n      userSeekIndex: segmentIndices[0],\n      userSeekTime\n    });\n  }, 250);\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      plottedSignals: [],\n      segment: props.startSegments || [],\n      segmentIndices: [],\n      shouldShowAddSignal: true,\n      userSeekIndex: 0,\n      userSeekTime: 0,\n      playing: props.autoplay,\n      playSpeed: 1\n    };\n\n    this.onSignalPlotPressed = this.onSignalPlotPressed.bind(this);\n    this.onSignalUnplotPressed = this.onSignalUnplotPressed.bind(this);\n    this.onSegmentChanged = this.onSegmentChanged.bind(this);\n    this.showAddSignal = this.showAddSignal.bind(this);\n    this.onGraphTimeClick = this.onGraphTimeClick.bind(this);\n    this.onUserSeek = this.onUserSeek.bind(this);\n    this.onPlaySeek = this.onPlaySeek.bind(this);\n    this.onPlay = this.onPlay.bind(this);\n    this.onPause = this.onPause.bind(this);\n    this.onVideoClick = this.onVideoClick.bind(this);\n    this.onSignalPlotChange = this.onSignalPlotChange.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n    this.mergePlots = this.mergePlots.bind(this);\n    this.toggleShouldShowAddSignal = this.toggleShouldShowAddSignal.bind(this);\n    this.changePlaySpeed = this.changePlaySpeed.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.onKeyDown);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener('keydown', this.onKeyDown);\n  }\n\n  onKeyDown(e) {\n    if (e.keyCode === 27) {\n      // escape\n      this.resetSegment();\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const prevMessage = prevProps.messages[prevProps.selectedMessage];\n    const curMessage = this.props.messages[this.props.selectedMessage];\n\n    if (Object.keys(prevProps.messages).length === 0 && Object.keys(this.props.messages).length !== 0) {\n      this.resetSegment();\n    }\n\n    if (curMessage && curMessage.frame && prevMessage !== curMessage) {\n      if (Object.keys(curMessage.frame.signals).length === 0) {\n        this.setState({ shouldShowAddSignal: true });\n      }\n    }\n\n    // remove plottedSignals that no longer exist\n    const newPlottedSignals = this.state.plottedSignals\n      .map((plot) => plot.filter(({ messageId, signalUid }) => {\n        const messageExists = Boolean(this.props.messages[messageId]);\n        let signalExists = true;\n        if (messageExists) {\n          signalExists = Object.values(this.props.messages[messageId].frame.signals)\n            .some((signal) => signal.uid === signalUid);\n        }\n\n        return messageExists && signalExists;\n      }))\n      .filter((plot) => plot.length > 0);\n\n    if (this.state.plottedSignals.length !== newPlottedSignals.length) {\n      this.setState({ plottedSignals: newPlottedSignals });\n    }\n\n    if (this.props.selectedMessage && prevProps.selectedMessage !== this.props.selectedMessage) {\n      // Update segment and seek state by finding a entry indices corresponding to old message segment/seek times.\n\n      const { segment, segmentIndices } = clipSegment(\n        this.state.segment,\n        this.state.segmentIndices,\n        curMessage\n      );\n\n      this.setState({\n        segment,\n        segmentIndices,\n        userSeekIndex: this.props.seekIndex,\n      });\n    }\n\n    if (prevMessage && curMessage && prevMessage.entries.length !== curMessage.entries.length) {\n      const { segment, segmentIndices } = clipSegment(\n        this.state.segment,\n        this.state.segmentIndices,\n        curMessage\n      );\n      this.setState({ segment, segmentIndices });\n    }\n  }\n\n  changePlaySpeed(value) {\n    this.setState({\n      playSpeed: value\n    });\n  }\n\n  timeWindow() {\n    const { routeStartTime, currentParts } = this.props;\n\n    if (routeStartTime) {\n      const partStartOffset = currentParts[0] * 60;\n      const partEndOffset = (currentParts[1] + 1) * 60;\n\n      const windowStartTime = routeStartTime\n        .clone()\n        .add(partStartOffset, 's')\n        .format('HH:mm:ss');\n      const windowEndTime = routeStartTime\n        .clone()\n        .add(partEndOffset, 's')\n        .format('HH:mm:ss');\n\n      return `${windowStartTime} - ${windowEndTime}`;\n    }\n    return '';\n  }\n\n  onSignalPlotPressed(messageId, signalUid) {\n    let { plottedSignals } = this.state;\n\n    plottedSignals = [[{ messageId, signalUid }], ...plottedSignals];\n\n    this.setState({ plottedSignals });\n  }\n\n  onSignalUnplotPressed(messageId, signalUid) {\n    const { plottedSignals } = this.state;\n    const newPlottedSignals = plottedSignals\n      .map((plot) => plot.filter(\n        (signal) => !(signal.messageId === messageId && signal.signalUid === signalUid)\n      ))\n      .filter((plot) => plot.length > 0);\n\n    this.setState({ plottedSignals: newPlottedSignals });\n  }\n\n  onSegmentChanged(messageId, segment) {\n    if (Array.isArray(segment)) {\n      this.updateSegment(messageId, segment);\n    }\n  }\n\n  resetSegment() {\n    const { segment, segmentIndices } = this.state;\n    if (segment.length > 0 || segmentIndices.length > 0) {\n      // console.log(this.state.segment, '->', segment, segmentIndices);\n      this.setState({\n        segment: [],\n        segmentIndices: [],\n        userSeekIndex: 0\n      });\n    }\n  }\n\n  showAddSignal() {\n    this.setState({ shouldShowAddSignal: true });\n  }\n\n  toggleShouldShowAddSignal() {\n    this.setState({ shouldShowAddSignal: !this.state.shouldShowAddSignal });\n  }\n\n  indexFromSeekTime(time) {\n    // returns index guaranteed to be in [0, entries.length - 1]\n\n    const { entries } = this.props.messages[this.props.selectedMessage];\n    if (entries.length === 0) return null;\n\n    const { segmentIndices } = this.state;\n    if (segmentIndices.length === 2 && segmentIndices[0] >= 0) {\n      for (\n        let i = segmentIndices[0],\n          l = Math.min(entries.length - 1, segmentIndices[1]);\n        i <= l;\n        i++\n      ) {\n        if (entries[i].relTime >= time) {\n          return i;\n        }\n      }\n      return segmentIndices[1];\n    }\n    for (let i = 0; i < entries.length; i++) {\n      if (entries[i].relTime >= time) {\n        return i;\n      }\n    }\n    return entries.length - 1;\n  }\n\n  onUserSeek(time) {\n    this.props.onUserSeek(time);\n    this.setState({ userSeekTime: time });\n  }\n\n  onPlaySeek(time) {\n    const message = this.props.messages[this.props.selectedMessage];\n    if (!message || message.entries.length === 0) {\n      this.props.onSeek(0, time);\n      return;\n    }\n\n    const seekIndex = this.indexFromSeekTime(time);\n    const seekTime = time;\n    this.props.onSeek(seekIndex, seekTime);\n  }\n\n  onGraphTimeClick(messageId, time) {\n    this.onUserSeek(time);\n  }\n\n  onPlay() {\n    this.setState({ playing: true });\n  }\n\n  onPause() {\n    this.setState({ playing: false });\n  }\n\n  secondsLoadedRouteRelative(currentParts) {\n    return (currentParts[1] - currentParts[0] + 1) * 60;\n  }\n\n  secondsLoaded() {\n    return this.props.partsCount * 60;\n  }\n\n  onVideoClick() {\n    const playing = !this.state.playing;\n    this.setState({ playing });\n  }\n\n  seekTime() {\n    const { userSeekIndex } = this.state;\n    const msg = this.props.messages[this.props.selectedMessage];\n    return msg.entries[userSeekIndex].time;\n  }\n\n  onSignalPlotChange(shouldPlot, messageId, signalUid) {\n    if (shouldPlot) {\n      this.onSignalPlotPressed(messageId, signalUid);\n    } else {\n      this.onSignalUnplotPressed(messageId, signalUid);\n    }\n  }\n\n  renderSelectMessagePrompt() {\n    return (\n      <div className=\"cabana-explorer-select-prompt\">\n        <h1>Select a message</h1>\n      </div>\n    );\n  }\n\n  selectedMessagePlottedSignalUids() {\n    const { plottedSignals } = this.state;\n    return plottedSignals\n      .map((plot) => plot\n        .filter(\n          ({ messageId, signalUid }) => messageId === this.props.selectedMessage\n        )\n        .map(({ signalUid }) => signalUid))\n      .reduce((arr, signalUid) => arr.concat(signalUid), []);\n  }\n\n  renderExplorerSignals() {\n    const selectedMessageKey = this.props.selectedMessage;\n    const selectedMessage = this.props.messages[selectedMessageKey];\n    const selectedMessageName = selectedMessage.frame !== undefined\n      ? selectedMessage.frame.name\n      : 'undefined';\n    return (\n      <div className=\"cabana-explorer-signals-wrapper\">\n        <div className=\"cabana-explorer-signals-header\">\n          <div className=\"cabana-explorer-signals-header-context\">\n            <h5 className=\"t-capline\">Selected Message:</h5>\n            <h3>{selectedMessageName}</h3>\n          </div>\n          <div className=\"cabana-explorer-signals-header-action\">\n            <button\n              className=\"button--small\"\n              onClick={() => this.props.showEditMessageModal(selectedMessageKey)}\n            >\n              Edit\n            </button>\n          </div>\n        </div>\n        <div\n          className=\"cabana-explorer-signals-subheader\"\n          onClick={this.toggleShouldShowAddSignal}\n        >\n          <strong>Edit Signals</strong>\n        </div>\n        <div className=\"cabana-explorer-signals-window\">\n          {this.state.shouldShowAddSignal ? (\n            <AddSignals\n              onConfirmedSignalChange={this.props.onConfirmedSignalChange}\n              message={this.props.messages[this.props.selectedMessage]}\n              onClose={() => {\n                this.setState({ shouldShowAddSignal: false });\n              }}\n              messageIndex={this.props.seekIndex}\n              onSignalPlotChange={this.onSignalPlotChange}\n              plottedSignalUids={this.selectedMessagePlottedSignalUids()}\n              selectedMessageKey={selectedMessageKey}\n            />\n          ) : null}\n          <CanLog\n            message={this.props.messages[this.props.selectedMessage]}\n            messageIndex={this.props.seekIndex}\n            segmentIndices={this.state.segmentIndices}\n            plottedSignals={this.state.plottedSignals}\n            onSignalPlotPressed={this.onSignalPlotPressed}\n            onSignalUnplotPressed={this.onSignalUnplotPressed}\n            showAddSignal={this.showAddSignal}\n            onMessageExpanded={this.onPause}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  mergePlots({ fromPlot, toPlot }) {\n    const { plottedSignals } = this.state;\n\n    // remove fromPlot from plottedSignals\n    const fromPlotIdx = plottedSignals.findIndex((plot) => plot.some(\n      (signal) => signal.signalUid === fromPlot.signalUid\n          && signal.messageId === fromPlot.messageId\n    ));\n    plottedSignals.splice(fromPlotIdx, 1);\n\n    const toPlotIdx = plottedSignals.findIndex((plot) => plot.some(\n      (signal) => signal.signalUid === toPlot.signalUid\n          && signal.messageId === toPlot.messageId\n    ));\n    plottedSignals[toPlotIdx] = [fromPlot, toPlot];\n\n    this.setState({ plottedSignals });\n  }\n\n  render() {\n    const signalsExpandedClass = this.state.shouldShowAddSignal\n      ? 'is-expanded'\n      : null;\n\n    const { thumbnails, messages, startTime } = this.props;\n\n    let graphSegment = this.state.segment;\n    if (!graphSegment.length && this.props.currentParts) {\n      graphSegment = [\n        this.props.currentParts[0] * 60,\n        (this.props.currentParts[1] + 1) * 60\n      ];\n    }\n    return (\n      <div className=\"cabana-explorer\">\n        <div className={cx('cabana-explorer-signals', signalsExpandedClass)}>\n          {messages[this.props.selectedMessage]\n            ? this.renderExplorerSignals()\n            : this.renderSelectMessagePrompt()}\n        </div>\n        <div className=\"cabana-explorer-visuals\">\n          {this.props.live === false ? (\n            <div>\n              <div className=\"cabana-explorer-visuals-header g-row\">\n                <PlaySpeedSelector\n                  playSpeed={this.state.playSpeed}\n                  onPlaySpeedChanged={this.changePlaySpeed}\n                />\n              </div>\n              <RouteVideoSync\n                message={messages[this.props.selectedMessage]}\n                segment={this.state.segment}\n                maxqcamera={this.props.maxqcamera}\n                startTime={startTime}\n                seekIndex={this.props.seekIndex}\n                userSeekIndex={this.state.userSeekIndex}\n                playing={this.state.playing}\n                url={this.props.url}\n                firstCanTime={this.props.firstCanTime}\n                videoOffset={this.props.videoOffset}\n                onVideoClick={this.onVideoClick}\n                onPlaySeek={this.onPlaySeek}\n                onUserSeek={this.onUserSeek}\n                onPlay={this.onPlay}\n                onPause={this.onPause}\n                userSeekTime={this.state.userSeekTime}\n                playSpeed={this.state.playSpeed}\n                thumbnails={thumbnails}\n                route={this.props.route}\n                share={this.props.share}\n              />\n            </div>\n          ) : null}\n          {this.state.segment.length > 0 ? (\n            <div\n              className=\"cabana-explorer-visuals-segmentreset\"\n              onClick={() => {\n                this.resetSegment();\n              }}\n            >\n              <p>Reset Segment</p>\n            </div>\n          ) : null}\n          <CanGraphList\n            plottedSignals={this.state.plottedSignals}\n            messages={messages}\n            onGraphTimeClick={this.onGraphTimeClick}\n            seekTime={this.props.seekTime}\n            onSegmentChanged={this.onSegmentChanged}\n            onSignalUnplotPressed={this.onSignalUnplotPressed}\n            segment={graphSegment}\n            mergePlots={this.mergePlots}\n            live={this.props.live}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nExplorer.propTypes = {\n  selectedMessage: PropTypes.string,\n  url: PropTypes.string,\n  live: PropTypes.bool.isRequired,\n  messages: PropTypes.objectOf(PropTypes.object),\n  thumbnails: PropTypes.array.isRequired,\n  onConfirmedSignalChange: PropTypes.func.isRequired,\n  canFrameOffset: PropTypes.number,\n  firstCanTime: PropTypes.number,\n  onSeek: PropTypes.func.isRequired,\n  autoplay: PropTypes.bool.isRequired,\n  currentParts: PropTypes.array.isRequired,\n  partsCount: PropTypes.number,\n  maxqcamera: PropTypes.number,\n  startTime: PropTypes.number,\n  startSegments: PropTypes.array,\n  route: PropTypes.object,\n  share: PropTypes.object,\n};\n"]},"metadata":{},"sourceType":"module"}