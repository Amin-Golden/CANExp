{"ast":null,"code":"'use strict';\n/* @flow */\n\n/**\n * The [R Squared](http://en.wikipedia.org/wiki/Coefficient_of_determination)\n * value of data compared with a function `f`\n * is the sum of the squared differences between the prediction\n * and the actual value.\n *\n * @param {Array<Array<number>>} x input data: this should be doubly-nested\n * @param {Function} func function called on `[i][0]` values within the dataset\n * @returns {number} r-squared value\n * @example\n * var samples = [[0, 0], [1, 1]];\n * var regressionLine = linearRegressionLine(linearRegression(samples));\n * rSquared(samples, regressionLine); // = 1 this line is a perfect fit\n */\n\nfunction rSquared(x\n/*: Array<Array<number>> */\n, func\n/*: Function */\n)\n/*: number */\n{\n  if (x.length < 2) {\n    return 1;\n  } // Compute the average y value for the actual\n  // data set in order to compute the\n  // _total sum of squares_\n\n\n  var sum = 0,\n      average;\n\n  for (var i = 0; i < x.length; i++) {\n    sum += x[i][1];\n  }\n\n  average = sum / x.length; // Compute the total sum of squares - the\n  // squared difference between each point\n  // and the average of all points.\n\n  var sumOfSquares = 0;\n\n  for (var j = 0; j < x.length; j++) {\n    sumOfSquares += Math.pow(average - x[j][1], 2);\n  } // Finally estimate the error: the squared\n  // difference between the estimate and the actual data\n  // value at each point.\n\n\n  var err = 0;\n\n  for (var k = 0; k < x.length; k++) {\n    err += Math.pow(x[k][1] - func(x[k][0]), 2);\n  } // As the error grows larger, its ratio to the\n  // sum of squares increases and the r squared\n  // value grows lower.\n\n\n  return 1 - err / sumOfSquares;\n}\n\nmodule.exports = rSquared;","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/simple-statistics/src/r_squared.js"],"names":["rSquared","x","func","length","sum","average","i","sumOfSquares","j","Math","pow","err","k","module","exports"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,QAAT,CAAkBC;AAAE;AAApB,EAAiDC;AAAK;AAAtD;AAAuE;AAAc;AACjF,MAAID,CAAC,CAACE,MAAF,GAAW,CAAf,EAAkB;AAAE,WAAO,CAAP;AAAW,GADkD,CAGjF;AACA;AACA;;;AACA,MAAIC,GAAG,GAAG,CAAV;AAAA,MAAaC,OAAb;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,CAAC,CAACE,MAAtB,EAA8BG,CAAC,EAA/B,EAAmC;AAC/BF,IAAAA,GAAG,IAAIH,CAAC,CAACK,CAAD,CAAD,CAAK,CAAL,CAAP;AACH;;AACDD,EAAAA,OAAO,GAAGD,GAAG,GAAGH,CAAC,CAACE,MAAlB,CAViF,CAYjF;AACA;AACA;;AACA,MAAII,YAAY,GAAG,CAAnB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGP,CAAC,CAACE,MAAtB,EAA8BK,CAAC,EAA/B,EAAmC;AAC/BD,IAAAA,YAAY,IAAIE,IAAI,CAACC,GAAL,CAASL,OAAO,GAAGJ,CAAC,CAACO,CAAD,CAAD,CAAK,CAAL,CAAnB,EAA4B,CAA5B,CAAhB;AACH,GAlBgF,CAoBjF;AACA;AACA;;;AACA,MAAIG,GAAG,GAAG,CAAV;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,CAAC,CAACE,MAAtB,EAA8BS,CAAC,EAA/B,EAAmC;AAC/BD,IAAAA,GAAG,IAAIF,IAAI,CAACC,GAAL,CAAST,CAAC,CAACW,CAAD,CAAD,CAAK,CAAL,IAAUV,IAAI,CAACD,CAAC,CAACW,CAAD,CAAD,CAAK,CAAL,CAAD,CAAvB,EAAkC,CAAlC,CAAP;AACH,GA1BgF,CA4BjF;AACA;AACA;;;AACA,SAAO,IAAID,GAAG,GAAGJ,YAAjB;AACH;;AAEDM,MAAM,CAACC,OAAP,GAAiBd,QAAjB","sourcesContent":["'use strict';\n/* @flow */\n\n/**\n * The [R Squared](http://en.wikipedia.org/wiki/Coefficient_of_determination)\n * value of data compared with a function `f`\n * is the sum of the squared differences between the prediction\n * and the actual value.\n *\n * @param {Array<Array<number>>} x input data: this should be doubly-nested\n * @param {Function} func function called on `[i][0]` values within the dataset\n * @returns {number} r-squared value\n * @example\n * var samples = [[0, 0], [1, 1]];\n * var regressionLine = linearRegressionLine(linearRegression(samples));\n * rSquared(samples, regressionLine); // = 1 this line is a perfect fit\n */\nfunction rSquared(x /*: Array<Array<number>> */, func /*: Function */) /*: number */ {\n    if (x.length < 2) { return 1; }\n\n    // Compute the average y value for the actual\n    // data set in order to compute the\n    // _total sum of squares_\n    var sum = 0, average;\n    for (var i = 0; i < x.length; i++) {\n        sum += x[i][1];\n    }\n    average = sum / x.length;\n\n    // Compute the total sum of squares - the\n    // squared difference between each point\n    // and the average of all points.\n    var sumOfSquares = 0;\n    for (var j = 0; j < x.length; j++) {\n        sumOfSquares += Math.pow(average - x[j][1], 2);\n    }\n\n    // Finally estimate the error: the squared\n    // difference between the estimate and the actual data\n    // value at each point.\n    var err = 0;\n    for (var k = 0; k < x.length; k++) {\n        err += Math.pow(x[k][1] - func(x[k][0]), 2);\n    }\n\n    // As the error grows larger, its ratio to the\n    // sum of squares increases and the r squared\n    // value grows lower.\n    return 1 - err / sumOfSquares;\n}\n\nmodule.exports = rSquared;\n"]},"metadata":{},"sourceType":"script"}