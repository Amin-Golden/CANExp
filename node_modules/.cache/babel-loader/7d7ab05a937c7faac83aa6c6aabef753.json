{"ast":null,"code":"'use strict';\n/* @flow */\n\nvar shuffle = require('./shuffle');\n/**\n * Create a [simple random sample](http://en.wikipedia.org/wiki/Simple_random_sample)\n * from a given array of `n` elements.\n *\n * The sampled values will be in any order, not necessarily the order\n * they appear in the input.\n *\n * @param {Array<any>} x input array. can contain any type\n * @param {number} n count of how many elements to take\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @return {Array} subset of n elements in original array\n * @example\n * var values = [1, 2, 4, 5, 6, 7, 8, 9];\n * sample(values, 3); // returns 3 random values, like [2, 5, 8];\n */\n\n\nfunction sample\n/*:: <T> */\n(x\n/*: Array<T> */\n, n\n/*: number */\n, randomSource\n/*: Function */\n)\n/*: Array<T> */\n{\n  // shuffle the original array using a fisher-yates shuffle\n  var shuffled = shuffle(x, randomSource); // and then return a subset of it - the first `n` elements.\n\n  return shuffled.slice(0, n);\n}\n\nmodule.exports = sample;","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/simple-statistics/src/sample.js"],"names":["shuffle","require","sample","x","n","randomSource","shuffled","slice","module","exports"],"mappings":"AAAA;AACA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC;AAAM;AAAf,CACIC;AAAE;AADN,EAEIC;AAAE;AAFN,EAGIC;AAAa;AAHjB;AAGkC;AAAgB;AAC9C;AACA,MAAIC,QAAQ,GAAGN,OAAO,CAACG,CAAD,EAAIE,YAAJ,CAAtB,CAF8C,CAI9C;;AACA,SAAOC,QAAQ,CAACC,KAAT,CAAe,CAAf,EAAkBH,CAAlB,CAAP;AACH;;AAEDI,MAAM,CAACC,OAAP,GAAiBP,MAAjB","sourcesContent":["'use strict';\n/* @flow */\n\nvar shuffle = require('./shuffle');\n\n/**\n * Create a [simple random sample](http://en.wikipedia.org/wiki/Simple_random_sample)\n * from a given array of `n` elements.\n *\n * The sampled values will be in any order, not necessarily the order\n * they appear in the input.\n *\n * @param {Array<any>} x input array. can contain any type\n * @param {number} n count of how many elements to take\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @return {Array} subset of n elements in original array\n * @example\n * var values = [1, 2, 4, 5, 6, 7, 8, 9];\n * sample(values, 3); // returns 3 random values, like [2, 5, 8];\n */\nfunction sample/*:: <T> */(\n    x /*: Array<T> */,\n    n /*: number */,\n    randomSource /*: Function */) /*: Array<T> */ {\n    // shuffle the original array using a fisher-yates shuffle\n    var shuffled = shuffle(x, randomSource);\n\n    // and then return a subset of it - the first `n` elements.\n    return shuffled.slice(0, n);\n}\n\nmodule.exports = sample;\n"]},"metadata":{},"sourceType":"script"}