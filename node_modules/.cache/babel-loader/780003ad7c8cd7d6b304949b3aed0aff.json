{"ast":null,"code":"var _jsxFileName = \"/home/amax/Autoro/cabana/src/components/RouteVideoSync.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { StyleSheet, css } from 'aphrodite/no-important';\nimport { video as VideoApi } from '@commaai/comma-api';\nimport HLS from './HLS';\nimport RouteSeeker from './RouteSeeker/RouteSeeker';\nconst Styles = StyleSheet.create({\n  loadingOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 3\n  },\n  loadingSpinner: {\n    width: '25%',\n    height: '25%',\n    display: 'block'\n  },\n  img: {\n    height: 480,\n    display: 'block',\n    position: 'absolute',\n    zIndex: 2\n  },\n  hls: {\n    zIndex: 1,\n    height: 480,\n    backgroundColor: 'rgba(0,0,0,0.9)'\n  },\n  seekBar: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    width: '100%',\n    zIndex: 4\n  }\n});\nexport default class RouteVideoSync extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      videoElement: null,\n      source: null\n    };\n    this.onLoadStart = this.onLoadStart.bind(this);\n    this.onLoadEnd = this.onLoadEnd.bind(this);\n    this.segmentProgress = this.segmentProgress.bind(this);\n    this.onVideoElementAvailable = this.onVideoElementAvailable.bind(this);\n    this.onUserSeek = this.onUserSeek.bind(this);\n    this.onPlaySeek = this.onPlaySeek.bind(this);\n    this.ratioTime = this.ratioTime.bind(this);\n  }\n\n  componentDidMount() {\n    this.componentDidUpdate({}, {});\n  }\n\n  componentDidUpdate(prevProps) {\n    var _prevProps$route;\n\n    const {\n      userSeekTime,\n      route,\n      share\n    } = this.props;\n    const {\n      videoElement\n    } = this.state;\n\n    if (prevProps.userSeekTime && userSeekTime !== prevProps.userSeekTime) {\n      if (videoElement) {\n        videoElement.currentTime = userSeekTime - this.props.videoOffset;\n      }\n    }\n\n    if (route && (((_prevProps$route = prevProps.route) === null || _prevProps$route === void 0 ? void 0 : _prevProps$route.fullname) !== route.fullname || prevProps.share !== share)) {\n      const src = VideoApi.getQcameraStreamUrl(route.fullname, share === null || share === void 0 ? void 0 : share.exp, share === null || share === void 0 ? void 0 : share.sig);\n      this.setState({\n        source: src\n      });\n    }\n  }\n\n  onVideoElementAvailable(videoElement) {\n    this.setState({\n      videoElement\n    });\n  }\n\n  onUserSeek(ratio) {\n    /* ratio in [0,1] */\n    const {\n      videoElement\n    } = this.state;\n    const {\n      onUserSeek\n    } = this.props;\n    const seekTime = this.ratioTime(ratio);\n\n    const funcSeekToRatio = () => onUserSeek(seekTime);\n\n    if (Number.isNaN(videoElement.duration)) {\n      return;\n    }\n\n    videoElement.currentTime = seekTime - this.props.videoOffset;\n\n    if (ratio !== 0) {\n      funcSeekToRatio();\n    }\n  }\n\n  onPlaySeek(offset) {\n    this.seekTime = offset + this.props.videoOffset;\n    this.props.onPlaySeek(this.seekTime);\n  }\n\n  onLoadStart() {\n    this.setState({\n      isLoading: true\n    });\n  }\n\n  onLoadEnd() {\n    this.setState({\n      isLoading: false\n    });\n  }\n\n  loadingOverlay() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: css(Styles.loadingOverlay),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      className: css(Styles.loadingSpinner),\n      src: `${process.env.PUBLIC_URL}/img/loading.svg`,\n      alt: \"Loading video\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 9\n      }\n    }));\n  }\n\n  videoLength() {\n    if (this.props.segment.length) {\n      return this.props.segment[1] - this.props.segment[0];\n    }\n\n    if (this.state.videoElement) {\n      return this.state.videoElement.duration;\n    }\n\n    return 0;\n  }\n\n  startTime() {\n    if (this.props.segment.length) {\n      return this.props.segment[0];\n    }\n\n    return 0;\n  }\n\n  segmentProgress(currentTime) {\n    // returns progress as number in [0,1]\n    const startTime = this.startTime();\n\n    if (currentTime < startTime) {\n      currentTime = startTime;\n    }\n\n    const ratio = (currentTime - startTime) / this.videoLength();\n    return Math.max(0, Math.min(1, ratio));\n  }\n\n  ratioTime(ratio) {\n    return ratio * this.videoLength() + this.startTime();\n  }\n\n  render() {\n    const {\n      isLoading,\n      videoElement\n    } = this.state;\n    const {\n      userSeekTime,\n      playSpeed,\n      playing,\n      onVideoClick,\n      segmentIndices,\n      startTime,\n      segment\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cabana-explorer-visuals-camera\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 7\n      }\n    }, isLoading ? this.loadingOverlay() : null, this.state.source && /*#__PURE__*/React.createElement(HLS, {\n      className: css(Styles.hls),\n      source: this.state.source,\n      startTime: (startTime || 0) - this.props.videoOffset,\n      videoLength: this.videoLength(),\n      playbackSpeed: playSpeed,\n      onVideoElementAvailable: this.onVideoElementAvailable,\n      playing: playing,\n      onClick: onVideoClick,\n      onLoadStart: this.onLoadStart,\n      onLoadEnd: this.onLoadEnd,\n      onUserSeek: this.onUserSeek,\n      onPlaySeek: this.onPlaySeek,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 31\n      }\n    }), /*#__PURE__*/React.createElement(RouteSeeker, {\n      className: css(Styles.seekBar),\n      nearestFrameTime: userSeekTime,\n      segmentProgress: this.segmentProgress,\n      startTime: this.startTime() - this.props.videoOffset,\n      videoLength: this.videoLength(),\n      segmentIndices: segmentIndices,\n      onUserSeek: this.onUserSeek,\n      onPlaySeek: this.onPlaySeek,\n      videoElement: videoElement,\n      onPlay: this.props.onPlay,\n      onPause: this.props.onPause,\n      playing: this.props.playing,\n      ratioTime: this.ratioTime,\n      segment: segment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\nRouteVideoSync.propTypes = {\n  segment: PropTypes.array.isRequired,\n  maxqcamera: PropTypes.number,\n  thumbnails: PropTypes.array,\n  url: PropTypes.string.isRequired,\n  playing: PropTypes.bool.isRequired,\n  onPlaySeek: PropTypes.func.isRequired,\n  onUserSeek: PropTypes.func.isRequired,\n  onPlay: PropTypes.func.isRequired,\n  onPause: PropTypes.func.isRequired,\n  userSeekTime: PropTypes.number.isRequired,\n  playSpeed: PropTypes.number.isRequired,\n  onVideoClick: PropTypes.func,\n  segmentIndices: PropTypes.array,\n  startTime: PropTypes.number,\n  route: PropTypes.object,\n  share: PropTypes.object\n};","map":{"version":3,"sources":["/home/amax/Autoro/cabana/src/components/RouteVideoSync.js"],"names":["React","Component","PropTypes","StyleSheet","css","video","VideoApi","HLS","RouteSeeker","Styles","create","loadingOverlay","position","top","left","width","height","display","justifyContent","alignItems","zIndex","loadingSpinner","img","hls","backgroundColor","seekBar","bottom","RouteVideoSync","constructor","props","state","isLoading","videoElement","source","onLoadStart","bind","onLoadEnd","segmentProgress","onVideoElementAvailable","onUserSeek","onPlaySeek","ratioTime","componentDidMount","componentDidUpdate","prevProps","userSeekTime","route","share","currentTime","videoOffset","fullname","src","getQcameraStreamUrl","exp","sig","setState","ratio","seekTime","funcSeekToRatio","Number","isNaN","duration","offset","process","env","PUBLIC_URL","videoLength","segment","length","startTime","Math","max","min","render","playSpeed","playing","onVideoClick","segmentIndices","onPlay","onPause","propTypes","array","isRequired","maxqcamera","number","thumbnails","url","string","bool","func","object"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { StyleSheet, css } from 'aphrodite/no-important';\nimport { video as VideoApi } from '@commaai/comma-api';\n\nimport HLS from './HLS';\nimport RouteSeeker from './RouteSeeker/RouteSeeker';\n\nconst Styles = StyleSheet.create({\n  loadingOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    width: '100%',\n    height: '100%',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    zIndex: 3\n  },\n  loadingSpinner: {\n    width: '25%',\n    height: '25%',\n    display: 'block'\n  },\n  img: {\n    height: 480,\n    display: 'block',\n    position: 'absolute',\n    zIndex: 2\n  },\n  hls: {\n    zIndex: 1,\n    height: 480,\n    backgroundColor: 'rgba(0,0,0,0.9)'\n  },\n  seekBar: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    width: '100%',\n    zIndex: 4\n  }\n});\n\nexport default class RouteVideoSync extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      videoElement: null,\n      source: null,\n    };\n\n    this.onLoadStart = this.onLoadStart.bind(this);\n    this.onLoadEnd = this.onLoadEnd.bind(this);\n    this.segmentProgress = this.segmentProgress.bind(this);\n    this.onVideoElementAvailable = this.onVideoElementAvailable.bind(this);\n    this.onUserSeek = this.onUserSeek.bind(this);\n    this.onPlaySeek = this.onPlaySeek.bind(this);\n    this.ratioTime = this.ratioTime.bind(this);\n  }\n\n  componentDidMount() {\n    this.componentDidUpdate({}, {});\n  }\n\n  componentDidUpdate(prevProps) {\n    const { userSeekTime, route, share } = this.props;\n    const { videoElement } = this.state;\n\n    if (\n      prevProps.userSeekTime\n      && userSeekTime !== prevProps.userSeekTime\n    ) {\n      if (videoElement) {\n        videoElement.currentTime = userSeekTime - this.props.videoOffset;\n      }\n    }\n\n    if (route && (prevProps.route?.fullname !== route.fullname || prevProps.share !== share)) {\n      const src = VideoApi.getQcameraStreamUrl(route.fullname, share?.exp, share?.sig);\n      this.setState({ source: src });\n    }\n  }\n\n  onVideoElementAvailable(videoElement) {\n    this.setState({ videoElement });\n  }\n\n  onUserSeek(ratio) {\n    /* ratio in [0,1] */\n\n    const { videoElement } = this.state;\n    const { onUserSeek } = this.props;\n    const seekTime = this.ratioTime(ratio);\n    const funcSeekToRatio = () => onUserSeek(seekTime);\n\n    if (Number.isNaN(videoElement.duration)) {\n      return;\n    }\n    videoElement.currentTime = seekTime - this.props.videoOffset;\n\n    if (ratio !== 0) {\n      funcSeekToRatio();\n    }\n  }\n\n  onPlaySeek(offset) {\n    this.seekTime = offset + this.props.videoOffset;\n    this.props.onPlaySeek(this.seekTime);\n  }\n\n  onLoadStart() {\n    this.setState({\n      isLoading: true\n    });\n  }\n\n  onLoadEnd() {\n    this.setState({\n      isLoading: false\n    });\n  }\n\n  loadingOverlay() {\n    return (\n      <div className={css(Styles.loadingOverlay)}>\n        <img\n          className={css(Styles.loadingSpinner)}\n          src={`${process.env.PUBLIC_URL}/img/loading.svg`}\n          alt=\"Loading video\"\n        />\n      </div>\n    );\n  }\n\n  videoLength() {\n    if (this.props.segment.length) {\n      return this.props.segment[1] - this.props.segment[0];\n    }\n\n    if (this.state.videoElement) {\n      return this.state.videoElement.duration;\n    }\n\n    return 0;\n  }\n\n  startTime() {\n    if (this.props.segment.length) {\n      return this.props.segment[0];\n    }\n\n    return 0;\n  }\n\n  segmentProgress(currentTime) {\n    // returns progress as number in [0,1]\n    const startTime = this.startTime();\n\n    if (currentTime < startTime) {\n      currentTime = startTime;\n    }\n\n    const ratio = (currentTime - startTime) / this.videoLength();\n    return Math.max(0, Math.min(1, ratio));\n  }\n\n  ratioTime(ratio) {\n    return ratio * this.videoLength() + this.startTime();\n  }\n\n  render() {\n    const {\n      isLoading,\n      videoElement,\n    } = this.state;\n    const {\n      userSeekTime,\n      playSpeed,\n      playing,\n      onVideoClick,\n      segmentIndices,\n      startTime,\n      segment\n    } = this.props;\n\n    return (\n      <div className=\"cabana-explorer-visuals-camera\">\n        {isLoading ? this.loadingOverlay() : null}\n        {this.state.source && <HLS\n          className={css(Styles.hls)}\n          source={this.state.source}\n          startTime={(startTime || 0) - this.props.videoOffset}\n          videoLength={this.videoLength()}\n          playbackSpeed={playSpeed}\n          onVideoElementAvailable={this.onVideoElementAvailable}\n          playing={playing}\n          onClick={onVideoClick}\n          onLoadStart={this.onLoadStart}\n          onLoadEnd={this.onLoadEnd}\n          onUserSeek={this.onUserSeek}\n          onPlaySeek={this.onPlaySeek}\n        />}\n        <RouteSeeker\n          className={css(Styles.seekBar)}\n          nearestFrameTime={userSeekTime}\n          segmentProgress={this.segmentProgress}\n          startTime={this.startTime() - this.props.videoOffset}\n          videoLength={this.videoLength()}\n          segmentIndices={segmentIndices}\n          onUserSeek={this.onUserSeek}\n          onPlaySeek={this.onPlaySeek}\n          videoElement={videoElement}\n          onPlay={this.props.onPlay}\n          onPause={this.props.onPause}\n          playing={this.props.playing}\n          ratioTime={this.ratioTime}\n          segment={segment}\n        />\n      </div>\n    );\n  }\n}\n\nRouteVideoSync.propTypes = {\n  segment: PropTypes.array.isRequired,\n  maxqcamera: PropTypes.number,\n  thumbnails: PropTypes.array,\n  url: PropTypes.string.isRequired,\n  playing: PropTypes.bool.isRequired,\n  onPlaySeek: PropTypes.func.isRequired,\n  onUserSeek: PropTypes.func.isRequired,\n  onPlay: PropTypes.func.isRequired,\n  onPause: PropTypes.func.isRequired,\n  userSeekTime: PropTypes.number.isRequired,\n  playSpeed: PropTypes.number.isRequired,\n  onVideoClick: PropTypes.func,\n  segmentIndices: PropTypes.array,\n  startTime: PropTypes.number,\n  route: PropTypes.object,\n  share: PropTypes.object,\n};\n"]},"metadata":{},"sourceType":"module"}