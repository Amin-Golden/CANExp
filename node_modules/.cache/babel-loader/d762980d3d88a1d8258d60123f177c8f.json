{"ast":null,"code":"'use strict';\n/* @flow */\n\nvar mean = require('./mean');\n\nvar chiSquaredDistributionTable = require('./chi_squared_distribution_table');\n/**\n * The [χ2 (Chi-Squared) Goodness-of-Fit Test](http://en.wikipedia.org/wiki/Goodness_of_fit#Pearson.27s_chi-squared_test)\n * uses a measure of goodness of fit which is the sum of differences between observed and expected outcome frequencies\n * (that is, counts of observations), each squared and divided by the number of observations expected given the\n * hypothesized distribution. The resulting χ2 statistic, `chiSquared`, can be compared to the chi-squared distribution\n * to determine the goodness of fit. In order to determine the degrees of freedom of the chi-squared distribution, one\n * takes the total number of observed frequencies and subtracts the number of estimated parameters. The test statistic\n * follows, approximately, a chi-square distribution with (k − c) degrees of freedom where `k` is the number of non-empty\n * cells and `c` is the number of estimated parameters for the distribution.\n *\n * @param {Array<number>} data\n * @param {Function} distributionType a function that returns a point in a distribution:\n * for instance, binomial, bernoulli, or poisson\n * @param {number} significance\n * @returns {number} chi squared goodness of fit\n * @example\n * // Data from Poisson goodness-of-fit example 10-19 in William W. Hines & Douglas C. Montgomery,\n * // \"Probability and Statistics in Engineering and Management Science\", Wiley (1980).\n * var data1019 = [\n *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n *     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n *     2, 2, 2, 2, 2, 2, 2, 2, 2,\n *     3, 3, 3, 3\n * ];\n * ss.chiSquaredGoodnessOfFit(data1019, ss.poissonDistribution, 0.05); //= false\n */\n\n\nfunction chiSquaredGoodnessOfFit(data\n/*: Array<number> */\n, distributionType\n/*: Function */\n, significance\n/*: number */\n)\n/*: boolean */\n{\n  // Estimate from the sample data, a weighted mean.\n  var inputMean = mean(data),\n      // Calculated value of the χ2 statistic.\n  chiSquared = 0,\n      // Degrees of freedom, calculated as (number of class intervals -\n  // number of hypothesized distribution parameters estimated - 1)\n  degreesOfFreedom,\n      // Number of hypothesized distribution parameters estimated, expected to be supplied in the distribution test.\n  // Lose one degree of freedom for estimating `lambda` from the sample data.\n  c = 1,\n      // The hypothesized distribution.\n  // Generate the hypothesized distribution.\n  hypothesizedDistribution = distributionType(inputMean),\n      observedFrequencies = [],\n      expectedFrequencies = [],\n      k; // Create an array holding a histogram from the sample data, of\n  // the form `{ value: numberOfOcurrences }`\n\n  for (var i = 0; i < data.length; i++) {\n    if (observedFrequencies[data[i]] === undefined) {\n      observedFrequencies[data[i]] = 0;\n    }\n\n    observedFrequencies[data[i]]++;\n  } // The histogram we created might be sparse - there might be gaps\n  // between values. So we iterate through the histogram, making\n  // sure that instead of undefined, gaps have 0 values.\n\n\n  for (i = 0; i < observedFrequencies.length; i++) {\n    if (observedFrequencies[i] === undefined) {\n      observedFrequencies[i] = 0;\n    }\n  } // Create an array holding a histogram of expected data given the\n  // sample size and hypothesized distribution.\n\n\n  for (k in hypothesizedDistribution) {\n    if (k in observedFrequencies) {\n      expectedFrequencies[+k] = hypothesizedDistribution[k] * data.length;\n    }\n  } // Working backward through the expected frequencies, collapse classes\n  // if less than three observations are expected for a class.\n  // This transformation is applied to the observed frequencies as well.\n\n\n  for (k = expectedFrequencies.length - 1; k >= 0; k--) {\n    if (expectedFrequencies[k] < 3) {\n      expectedFrequencies[k - 1] += expectedFrequencies[k];\n      expectedFrequencies.pop();\n      observedFrequencies[k - 1] += observedFrequencies[k];\n      observedFrequencies.pop();\n    }\n  } // Iterate through the squared differences between observed & expected\n  // frequencies, accumulating the `chiSquared` statistic.\n\n\n  for (k = 0; k < observedFrequencies.length; k++) {\n    chiSquared += Math.pow(observedFrequencies[k] - expectedFrequencies[k], 2) / expectedFrequencies[k];\n  } // Calculate degrees of freedom for this test and look it up in the\n  // `chiSquaredDistributionTable` in order to\n  // accept or reject the goodness-of-fit of the hypothesized distribution.\n\n\n  degreesOfFreedom = observedFrequencies.length - c - 1;\n  return chiSquaredDistributionTable[degreesOfFreedom][significance] < chiSquared;\n}\n\nmodule.exports = chiSquaredGoodnessOfFit;","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/simple-statistics/src/chi_squared_goodness_of_fit.js"],"names":["mean","require","chiSquaredDistributionTable","chiSquaredGoodnessOfFit","data","distributionType","significance","inputMean","chiSquared","degreesOfFreedom","c","hypothesizedDistribution","observedFrequencies","expectedFrequencies","k","i","length","undefined","pop","Math","pow","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/* @flow */\n\nvar mean = require('./mean');\nvar chiSquaredDistributionTable = require('./chi_squared_distribution_table');\n\n/**\n * The [χ2 (Chi-Squared) Goodness-of-Fit Test](http://en.wikipedia.org/wiki/Goodness_of_fit#Pearson.27s_chi-squared_test)\n * uses a measure of goodness of fit which is the sum of differences between observed and expected outcome frequencies\n * (that is, counts of observations), each squared and divided by the number of observations expected given the\n * hypothesized distribution. The resulting χ2 statistic, `chiSquared`, can be compared to the chi-squared distribution\n * to determine the goodness of fit. In order to determine the degrees of freedom of the chi-squared distribution, one\n * takes the total number of observed frequencies and subtracts the number of estimated parameters. The test statistic\n * follows, approximately, a chi-square distribution with (k − c) degrees of freedom where `k` is the number of non-empty\n * cells and `c` is the number of estimated parameters for the distribution.\n *\n * @param {Array<number>} data\n * @param {Function} distributionType a function that returns a point in a distribution:\n * for instance, binomial, bernoulli, or poisson\n * @param {number} significance\n * @returns {number} chi squared goodness of fit\n * @example\n * // Data from Poisson goodness-of-fit example 10-19 in William W. Hines & Douglas C. Montgomery,\n * // \"Probability and Statistics in Engineering and Management Science\", Wiley (1980).\n * var data1019 = [\n *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n *     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n *     2, 2, 2, 2, 2, 2, 2, 2, 2,\n *     3, 3, 3, 3\n * ];\n * ss.chiSquaredGoodnessOfFit(data1019, ss.poissonDistribution, 0.05); //= false\n */\nfunction chiSquaredGoodnessOfFit(\n    data/*: Array<number> */,\n    distributionType/*: Function */,\n    significance/*: number */)/*: boolean */ {\n    // Estimate from the sample data, a weighted mean.\n    var inputMean = mean(data),\n        // Calculated value of the χ2 statistic.\n        chiSquared = 0,\n        // Degrees of freedom, calculated as (number of class intervals -\n        // number of hypothesized distribution parameters estimated - 1)\n        degreesOfFreedom,\n        // Number of hypothesized distribution parameters estimated, expected to be supplied in the distribution test.\n        // Lose one degree of freedom for estimating `lambda` from the sample data.\n        c = 1,\n        // The hypothesized distribution.\n        // Generate the hypothesized distribution.\n        hypothesizedDistribution = distributionType(inputMean),\n        observedFrequencies = [],\n        expectedFrequencies = [],\n        k;\n\n    // Create an array holding a histogram from the sample data, of\n    // the form `{ value: numberOfOcurrences }`\n    for (var i = 0; i < data.length; i++) {\n        if (observedFrequencies[data[i]] === undefined) {\n            observedFrequencies[data[i]] = 0;\n        }\n        observedFrequencies[data[i]]++;\n    }\n\n    // The histogram we created might be sparse - there might be gaps\n    // between values. So we iterate through the histogram, making\n    // sure that instead of undefined, gaps have 0 values.\n    for (i = 0; i < observedFrequencies.length; i++) {\n        if (observedFrequencies[i] === undefined) {\n            observedFrequencies[i] = 0;\n        }\n    }\n\n    // Create an array holding a histogram of expected data given the\n    // sample size and hypothesized distribution.\n    for (k in hypothesizedDistribution) {\n        if (k in observedFrequencies) {\n            expectedFrequencies[+k] = hypothesizedDistribution[k] * data.length;\n        }\n    }\n\n    // Working backward through the expected frequencies, collapse classes\n    // if less than three observations are expected for a class.\n    // This transformation is applied to the observed frequencies as well.\n    for (k = expectedFrequencies.length - 1; k >= 0; k--) {\n        if (expectedFrequencies[k] < 3) {\n            expectedFrequencies[k - 1] += expectedFrequencies[k];\n            expectedFrequencies.pop();\n\n            observedFrequencies[k - 1] += observedFrequencies[k];\n            observedFrequencies.pop();\n        }\n    }\n\n    // Iterate through the squared differences between observed & expected\n    // frequencies, accumulating the `chiSquared` statistic.\n    for (k = 0; k < observedFrequencies.length; k++) {\n        chiSquared += Math.pow(\n            observedFrequencies[k] - expectedFrequencies[k], 2) /\n            expectedFrequencies[k];\n    }\n\n    // Calculate degrees of freedom for this test and look it up in the\n    // `chiSquaredDistributionTable` in order to\n    // accept or reject the goodness-of-fit of the hypothesized distribution.\n    degreesOfFreedom = observedFrequencies.length - c - 1;\n    return chiSquaredDistributionTable[degreesOfFreedom][significance] < chiSquared;\n}\n\nmodule.exports = chiSquaredGoodnessOfFit;\n"]},"metadata":{},"sourceType":"script"}