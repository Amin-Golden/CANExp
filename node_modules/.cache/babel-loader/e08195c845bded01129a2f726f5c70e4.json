{"ast":null,"code":"var _jsxFileName = \"/home/amax/Autoro/cabana/src/components/CanLog.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactList from 'react-list';\nimport cx from 'classnames';\nexport default class CanLog extends Component {\n  constructor(props) {\n    super(props); // only want to display up to length elements at a time\n    // offset, length\n\n    this.state = {\n      length: 0,\n      expandedMessages: [],\n      messageHeights: [],\n      allPacketsExpanded: false\n    };\n    this.renderLogListItemMessage = this.renderLogListItemMessage.bind(this);\n    this.addDisplayedMessages = this.addDisplayedMessages.bind(this);\n    this.renderLogListItem = this.renderLogListItem.bind(this);\n    this.renderLogList = this.renderLogList.bind(this);\n    this.onExpandAllChanged = this.onExpandAllChanged.bind(this);\n    this.toggleExpandAllPackets = this.toggleExpandAllPackets.bind(this);\n    this.toggleSignalPlot = this.toggleSignalPlot.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!prevProps.message && this.props.message) {\n      this.addDisplayedMessages();\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const curMessageLength = this.props.message ? this.props.message.entries.length : 0;\n    const nextMessageLength = nextProps.message ? nextProps.message.entries.length : 0;\n    const shouldUpdate = this.props.message !== nextProps.message || nextMessageLength !== curMessageLength || nextProps.messageIndex !== this.props.messageIndex || nextProps.plottedSignals.length !== this.props.plottedSignals.length || JSON.stringify(nextProps.segmentIndices) !== JSON.stringify(this.props.segmentIndices) || JSON.stringify(nextState) !== JSON.stringify(this.state) || this.props.message !== nextProps.message || this.props.message !== undefined && nextProps.message !== undefined && this.props.message.frame !== undefined && nextProps.message.frame !== undefined && JSON.stringify(this.props.message.frame) !== JSON.stringify(nextProps.message.frame);\n    return shouldUpdate;\n  }\n\n  addDisplayedMessages() {\n    const {\n      length\n    } = this.state;\n    const newLength = length + CanLog.ITEMS_PER_PAGE;\n    this.setState({\n      length: newLength\n    });\n  }\n\n  expandMessage(msg, msgIdx) {\n    this.setState({\n      expandedMessages: this.state.expandedMessages.concat([msg.time])\n    });\n    this.props.onMessageExpanded();\n  }\n\n  collapseMessage(msg, msgIdx) {\n    this.setState({\n      expandedMessages: this.state.expandedMessages.filter(expMsgTime => expMsgTime !== msg.time)\n    });\n  }\n\n  isSignalPlotted(msgId, signalUid) {\n    const plottedSignal = this.props.plottedSignals.find(plot => plot.some(signal => signal.messageId === msgId && signal.signalUid === signalUid));\n    return plottedSignal !== undefined;\n  }\n\n  signalValuePretty(signal, value) {\n    if (signal.isFloat) {\n      return value.toFixed(3);\n    }\n\n    if (typeof value === 'bigint') {\n      return value.toString();\n    }\n\n    return value;\n  }\n\n  isMessageExpanded(msg) {\n    return this.state.expandedMessages.indexOf(msg.time) !== -1;\n  }\n\n  toggleSignalPlot(msg, signalUid, plotted) {\n    if (!plotted) {\n      this.props.onSignalPlotPressed(msg, signalUid);\n    } else {\n      this.props.onSignalUnplotPressed(msg, signalUid);\n    }\n  }\n\n  toggleExpandPacketSignals(msgEntry) {\n    if (!this.props.message.frame) {\n      return;\n    }\n\n    const msgIsExpanded = this.state.allPacketsExpanded || this.isMessageExpanded(msgEntry);\n    const msgHasSignals = Object.keys(this.props.message.frame.signals).length > 0;\n\n    if (msgIsExpanded && msgHasSignals) {\n      this.setState({\n        expandedMessages: this.state.expandedMessages.filter(expMsgTime => expMsgTime !== msgEntry.time)\n      });\n    } else if (msgHasSignals) {\n      this.setState({\n        expandedMessages: this.state.expandedMessages.concat([msgEntry.time])\n      });\n      this.props.onMessageExpanded();\n    } else {}\n  }\n\n  renderLogListItemSignals(msgEntry) {\n    const {\n      message\n    } = this.props;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"signals-log-list-signals\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 7\n      }\n    }, Object.entries(msgEntry.signals).map(_ref => {\n      let [name, value] = _ref;\n      const signal = message.frame.signals[name];\n\n      if (signal === undefined) {\n        // Signal removed?\n        return null;\n      }\n\n      const unit = signal.unit.length > 0 ? signal.unit : 'units';\n      const isPlotted = this.isSignalPlotted(message.id, signal.uid);\n      const plottedButtonClass = isPlotted ? null : 'button--alpha';\n      const plottedButtonText = isPlotted ? 'Hide Plot' : 'Show Plot';\n      return /*#__PURE__*/React.createElement(\"div\", {\n        key: name,\n        className: \"signals-log-list-signal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"signals-log-list-signal-message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 17\n        }\n      }, name)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"signals-log-list-signal-value\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 17\n        }\n      }, \"(\", /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 19\n        }\n      }, this.signalValuePretty(signal, value)), ' ', unit, \")\")), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"signals-log-list-signal-action\",\n        onClick: () => {\n          this.toggleSignalPlot(message.id, signal.uid, isPlotted);\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: cx('button--tiny', plottedButtonClass),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 19\n        }\n      }, plottedButtonText))));\n    }));\n  }\n\n  renderLogListItemMessage(msgEntry, key) {\n    const {\n      message\n    } = this.props;\n    const msgIsExpanded = this.state.allPacketsExpanded || this.isMessageExpanded(msgEntry);\n    const msgHasSignals = Object.keys(msgEntry.signals).length > 0;\n    const hasSignalsClass = msgHasSignals ? 'has-signals' : null;\n    const expandedClass = msgIsExpanded ? 'is-expanded' : null;\n    const msgHexs = [];\n\n    for (let i = 0; i < msgEntry.data.length; i += 8) {\n      msgHexs.push(msgEntry.hexData.substring(2 * i, 2 * Math.min(i + 8, msgEntry.data.length)));\n    }\n\n    const row = /*#__PURE__*/React.createElement(\"div\", {\n      key: key,\n      className: cx('signals-log-list-item', hasSignalsClass, expandedClass),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"signals-log-list-item-header\",\n      onClick: () => {\n        this.toggleExpandPacketSignals(msgEntry);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"signals-log-list-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }\n    }, (message.frame ? message.frame.name : null) || message.id)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"signals-log-list-time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 13\n      }\n    }, \"[\", msgEntry.relTime.toFixed(3), \"]\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"signals-log-list-bytes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 11\n      }\n    }, msgHexs.map((hx, i) => /*#__PURE__*/React.createElement(\"span\", {\n      key: i,\n      className: \"t-mono\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 38\n      }\n    }, hx)))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"signals-log-list-item-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }\n    }, msgIsExpanded ? this.renderLogListItemSignals(msgEntry) : null));\n    return row;\n  }\n\n  renderLogListItem(index, key) {\n    let offset = this.props.messageIndex;\n\n    if (offset === 0 && this.props.segmentIndices.length === 2) {\n      offset = this.props.segmentIndices[0];\n    }\n\n    if (offset + index < 0) {\n      debugger;\n    }\n\n    if (offset + index < this.props.message.entries.length) {\n      return this.renderLogListItemMessage(this.props.message.entries[offset + index], key);\n    }\n\n    return null;\n  }\n\n  renderLogList(items, ref) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"signals-log-list\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"signals-log-list-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"signals-log-list-message\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 11\n      }\n    }, \"Message\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"signals-log-list-time\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 11\n      }\n    }, \"Time\"), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"signals-log-list-bytes\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 11\n      }\n    }, \"Bytes\")), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"signals-log-list-items\",\n      ref: ref,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 9\n      }\n    }, items));\n  }\n\n  listLength() {\n    const {\n      segmentIndices,\n      messageIndex\n    } = this.props;\n\n    if (messageIndex > 0) {\n      return this.props.message.entries.length - messageIndex;\n    }\n\n    if (segmentIndices.length === 2) {\n      return segmentIndices[1] - segmentIndices[0];\n    }\n\n    if (this.props.message) {\n      return this.props.message.entries.length;\n    } // no message yet\n\n\n    return 0;\n  }\n\n  onExpandAllChanged(e) {\n    this.setState({\n      allPacketsExpanded: e.target.checked\n    });\n  }\n\n  toggleExpandAllPackets() {\n    this.setState({\n      allPacketsExpanded: !this.state.allPacketsExpanded\n    });\n  }\n\n  render() {\n    const expandAllText = this.state.allPacketsExpanded ? 'Collapse All' : 'Expand All';\n    const expandAllClass = this.state.allPacketsExpanded ? null : 'button--alpha';\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cabana-explorer-signals-log\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 298,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cabana-explorer-signals-log-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 299,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"strong\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 300,\n        columnNumber: 11\n      }\n    }, \"Message Packets\"), /*#__PURE__*/React.createElement(\"button\", {\n      className: cx('button--tiny', expandAllClass),\n      onClick: this.toggleExpandAllPackets,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }\n    }, expandAllText)), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cabana-explorer-signals-log-body\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(ReactList, {\n      itemRenderer: this.renderLogListItem,\n      itemsRenderer: this.renderLogList,\n      length: this.listLength(),\n      pageSize: 50,\n      updateWhenThisValueChanges: this.props.messageIndex,\n      type: \"variable\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 11\n      }\n    })));\n  }\n\n}\nCanLog.ITEMS_PER_PAGE = 50;\nCanLog.propTypes = {\n  plottedSignals: PropTypes.array,\n  segmentIndices: PropTypes.array,\n  onSignalUnplotPressed: PropTypes.func,\n  onSignalPlotPressed: PropTypes.func,\n  message: PropTypes.object,\n  messageIndex: PropTypes.number,\n  onMessageExpanded: PropTypes.func\n};","map":{"version":3,"sources":["/home/amax/Autoro/cabana/src/components/CanLog.js"],"names":["React","Component","PropTypes","ReactList","cx","CanLog","constructor","props","state","length","expandedMessages","messageHeights","allPacketsExpanded","renderLogListItemMessage","bind","addDisplayedMessages","renderLogListItem","renderLogList","onExpandAllChanged","toggleExpandAllPackets","toggleSignalPlot","componentDidUpdate","prevProps","message","shouldComponentUpdate","nextProps","nextState","curMessageLength","entries","nextMessageLength","shouldUpdate","messageIndex","plottedSignals","JSON","stringify","segmentIndices","undefined","frame","newLength","ITEMS_PER_PAGE","setState","expandMessage","msg","msgIdx","concat","time","onMessageExpanded","collapseMessage","filter","expMsgTime","isSignalPlotted","msgId","signalUid","plottedSignal","find","plot","some","signal","messageId","signalValuePretty","value","isFloat","toFixed","toString","isMessageExpanded","indexOf","plotted","onSignalPlotPressed","onSignalUnplotPressed","toggleExpandPacketSignals","msgEntry","msgIsExpanded","msgHasSignals","Object","keys","signals","renderLogListItemSignals","map","name","unit","isPlotted","id","uid","plottedButtonClass","plottedButtonText","key","hasSignalsClass","expandedClass","msgHexs","i","data","push","hexData","substring","Math","min","row","relTime","hx","index","offset","items","ref","listLength","e","target","checked","render","expandAllText","expandAllClass","propTypes","array","func","object","number"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,EAAP,MAAe,YAAf;AAEA,eAAe,MAAMC,MAAN,SAAqBJ,SAArB,CAA+B;AAa5CK,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAEjB;AACA;;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,CADG;AAEXC,MAAAA,gBAAgB,EAAE,EAFP;AAGXC,MAAAA,cAAc,EAAE,EAHL;AAIXC,MAAAA,kBAAkB,EAAE;AAJT,KAAb;AAOA,SAAKC,wBAAL,GAAgC,KAAKA,wBAAL,CAA8BC,IAA9B,CAAmC,IAAnC,CAAhC;AACA,SAAKC,oBAAL,GAA4B,KAAKA,oBAAL,CAA0BD,IAA1B,CAA+B,IAA/B,CAA5B;AACA,SAAKE,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBF,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKG,aAAL,GAAqB,KAAKA,aAAL,CAAmBH,IAAnB,CAAwB,IAAxB,CAArB;AACA,SAAKI,kBAAL,GAA0B,KAAKA,kBAAL,CAAwBJ,IAAxB,CAA6B,IAA7B,CAA1B;AACA,SAAKK,sBAAL,GAA8B,KAAKA,sBAAL,CAA4BL,IAA5B,CAAiC,IAAjC,CAA9B;AACA,SAAKM,gBAAL,GAAwB,KAAKA,gBAAL,CAAsBN,IAAtB,CAA2B,IAA3B,CAAxB;AACD;;AAEDO,EAAAA,kBAAkB,CAACC,SAAD,EAAY;AAC5B,QAAI,CAACA,SAAS,CAACC,OAAX,IAAsB,KAAKhB,KAAL,CAAWgB,OAArC,EAA8C;AAC5C,WAAKR,oBAAL;AACD;AACF;;AAEDS,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAC1C,UAAMC,gBAAgB,GAAG,KAAKpB,KAAL,CAAWgB,OAAX,GACrB,KAAKhB,KAAL,CAAWgB,OAAX,CAAmBK,OAAnB,CAA2BnB,MADN,GAErB,CAFJ;AAGA,UAAMoB,iBAAiB,GAAGJ,SAAS,CAACF,OAAV,GACtBE,SAAS,CAACF,OAAV,CAAkBK,OAAlB,CAA0BnB,MADJ,GAEtB,CAFJ;AAIA,UAAMqB,YAAY,GAAG,KAAKvB,KAAL,CAAWgB,OAAX,KAAuBE,SAAS,CAACF,OAAjC,IAChBM,iBAAiB,KAAKF,gBADN,IAEhBF,SAAS,CAACM,YAAV,KAA2B,KAAKxB,KAAL,CAAWwB,YAFtB,IAGhBN,SAAS,CAACO,cAAV,CAAyBvB,MAAzB,KAAoC,KAAKF,KAAL,CAAWyB,cAAX,CAA0BvB,MAH9C,IAIhBwB,IAAI,CAACC,SAAL,CAAeT,SAAS,CAACU,cAAzB,MACGF,IAAI,CAACC,SAAL,CAAe,KAAK3B,KAAL,CAAW4B,cAA1B,CALa,IAMhBF,IAAI,CAACC,SAAL,CAAeR,SAAf,MAA8BO,IAAI,CAACC,SAAL,CAAe,KAAK1B,KAApB,CANd,IAOhB,KAAKD,KAAL,CAAWgB,OAAX,KAAuBE,SAAS,CAACF,OAPjB,IAQf,KAAKhB,KAAL,CAAWgB,OAAX,KAAuBa,SAAvB,IACCX,SAAS,CAACF,OAAV,KAAsBa,SADvB,IAEC,KAAK7B,KAAL,CAAWgB,OAAX,CAAmBc,KAAnB,KAA6BD,SAF9B,IAGCX,SAAS,CAACF,OAAV,CAAkBc,KAAlB,KAA4BD,SAH7B,IAICH,IAAI,CAACC,SAAL,CAAe,KAAK3B,KAAL,CAAWgB,OAAX,CAAmBc,KAAlC,MACGJ,IAAI,CAACC,SAAL,CAAeT,SAAS,CAACF,OAAV,CAAkBc,KAAjC,CAbV;AAeA,WAAOP,YAAP;AACD;;AAEDf,EAAAA,oBAAoB,GAAG;AACrB,UAAM;AAAEN,MAAAA;AAAF,QAAa,KAAKD,KAAxB;AACA,UAAM8B,SAAS,GAAG7B,MAAM,GAAGJ,MAAM,CAACkC,cAAlC;AAEA,SAAKC,QAAL,CAAc;AAAE/B,MAAAA,MAAM,EAAE6B;AAAV,KAAd;AACD;;AAEDG,EAAAA,aAAa,CAACC,GAAD,EAAMC,MAAN,EAAc;AACzB,SAAKH,QAAL,CAAc;AACZ9B,MAAAA,gBAAgB,EAAE,KAAKF,KAAL,CAAWE,gBAAX,CAA4BkC,MAA5B,CAAmC,CAACF,GAAG,CAACG,IAAL,CAAnC;AADN,KAAd;AAGA,SAAKtC,KAAL,CAAWuC,iBAAX;AACD;;AAEDC,EAAAA,eAAe,CAACL,GAAD,EAAMC,MAAN,EAAc;AAC3B,SAAKH,QAAL,CAAc;AACZ9B,MAAAA,gBAAgB,EAAE,KAAKF,KAAL,CAAWE,gBAAX,CAA4BsC,MAA5B,CACfC,UAAD,IAAgBA,UAAU,KAAKP,GAAG,CAACG,IADnB;AADN,KAAd;AAKD;;AAEDK,EAAAA,eAAe,CAACC,KAAD,EAAQC,SAAR,EAAmB;AAChC,UAAMC,aAAa,GAAG,KAAK9C,KAAL,CAAWyB,cAAX,CAA0BsB,IAA1B,CAAgCC,IAAD,IAAUA,IAAI,CAACC,IAAL,CAC5DC,MAAD,IAAYA,MAAM,CAACC,SAAP,KAAqBP,KAArB,IAA8BM,MAAM,CAACL,SAAP,KAAqBA,SADF,CAAzC,CAAtB;AAGA,WAAOC,aAAa,KAAKjB,SAAzB;AACD;;AAEDuB,EAAAA,iBAAiB,CAACF,MAAD,EAASG,KAAT,EAAgB;AAC/B,QAAIH,MAAM,CAACI,OAAX,EAAoB;AAClB,aAAOD,KAAK,CAACE,OAAN,CAAc,CAAd,CAAP;AACD;;AACD,QAAI,OAAOF,KAAP,KAAiB,QAArB,EAA+B;AAC7B,aAAOA,KAAK,CAACG,QAAN,EAAP;AACD;;AACD,WAAOH,KAAP;AACD;;AAEDI,EAAAA,iBAAiB,CAACtB,GAAD,EAAM;AACrB,WAAO,KAAKlC,KAAL,CAAWE,gBAAX,CAA4BuD,OAA5B,CAAoCvB,GAAG,CAACG,IAAxC,MAAkD,CAAC,CAA1D;AACD;;AAEDzB,EAAAA,gBAAgB,CAACsB,GAAD,EAAMU,SAAN,EAAiBc,OAAjB,EAA0B;AACxC,QAAI,CAACA,OAAL,EAAc;AACZ,WAAK3D,KAAL,CAAW4D,mBAAX,CAA+BzB,GAA/B,EAAoCU,SAApC;AACD,KAFD,MAEO;AACL,WAAK7C,KAAL,CAAW6D,qBAAX,CAAiC1B,GAAjC,EAAsCU,SAAtC;AACD;AACF;;AAEDiB,EAAAA,yBAAyB,CAACC,QAAD,EAAW;AAClC,QAAI,CAAC,KAAK/D,KAAL,CAAWgB,OAAX,CAAmBc,KAAxB,EAA+B;AAC7B;AACD;;AACD,UAAMkC,aAAa,GAAG,KAAK/D,KAAL,CAAWI,kBAAX,IAAiC,KAAKoD,iBAAL,CAAuBM,QAAvB,CAAvD;AAEA,UAAME,aAAa,GAAGC,MAAM,CAACC,IAAP,CAAY,KAAKnE,KAAL,CAAWgB,OAAX,CAAmBc,KAAnB,CAAyBsC,OAArC,EAA8ClE,MAA9C,GAAuD,CAA7E;;AACA,QAAI8D,aAAa,IAAIC,aAArB,EAAoC;AAClC,WAAKhC,QAAL,CAAc;AACZ9B,QAAAA,gBAAgB,EAAE,KAAKF,KAAL,CAAWE,gBAAX,CAA4BsC,MAA5B,CACfC,UAAD,IAAgBA,UAAU,KAAKqB,QAAQ,CAACzB,IADxB;AADN,OAAd;AAKD,KAND,MAMO,IAAI2B,aAAJ,EAAmB;AACxB,WAAKhC,QAAL,CAAc;AACZ9B,QAAAA,gBAAgB,EAAE,KAAKF,KAAL,CAAWE,gBAAX,CAA4BkC,MAA5B,CAAmC,CAAC0B,QAAQ,CAACzB,IAAV,CAAnC;AADN,OAAd;AAGA,WAAKtC,KAAL,CAAWuC,iBAAX;AACD,KALM,MAKA,CACN;AACF;;AAED8B,EAAAA,wBAAwB,CAACN,QAAD,EAAW;AACjC,UAAM;AAAE/C,MAAAA;AAAF,QAAc,KAAKhB,KAAzB;AACA,wBACE;AAAK,MAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGkE,MAAM,CAAC7C,OAAP,CAAe0C,QAAQ,CAACK,OAAxB,EAAiCE,GAAjC,CAAqC,QAAmB;AAAA,UAAlB,CAACC,IAAD,EAAOlB,KAAP,CAAkB;AACvD,YAAMH,MAAM,GAAGlC,OAAO,CAACc,KAAR,CAAcsC,OAAd,CAAsBG,IAAtB,CAAf;;AACA,UAAIrB,MAAM,KAAKrB,SAAf,EAA0B;AACxB;AACA,eAAO,IAAP;AACD;;AACD,YAAM2C,IAAI,GAAGtB,MAAM,CAACsB,IAAP,CAAYtE,MAAZ,GAAqB,CAArB,GAAyBgD,MAAM,CAACsB,IAAhC,GAAuC,OAApD;AACA,YAAMC,SAAS,GAAG,KAAK9B,eAAL,CAAqB3B,OAAO,CAAC0D,EAA7B,EAAiCxB,MAAM,CAACyB,GAAxC,CAAlB;AACA,YAAMC,kBAAkB,GAAGH,SAAS,GAAG,IAAH,GAAU,eAA9C;AACA,YAAMI,iBAAiB,GAAGJ,SAAS,GAAG,WAAH,GAAiB,WAApD;AACA,0BACE;AAAK,QAAA,GAAG,EAAEF,IAAV;AAAgB,QAAA,SAAS,EAAC,yBAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOA,IAAP,CADF,CADF,eAIE;AAAK,QAAA,SAAS,EAAC,+BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAS,KAAKnB,iBAAL,CAAuBF,MAAvB,EAA+BG,KAA/B,CAAT,CAFF,EAGG,GAHH,EAIGmB,IAJH,MADF,CAJF,eAaE;AACE,QAAA,SAAS,EAAC,gCADZ;AAEE,QAAA,OAAO,EAAE,MAAM;AACb,eAAK3D,gBAAL,CAAsBG,OAAO,CAAC0D,EAA9B,EAAkCxB,MAAM,CAACyB,GAAzC,EAA8CF,SAA9C;AACD,SAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAME;AAAQ,QAAA,SAAS,EAAE5E,EAAE,CAAC,cAAD,EAAiB+E,kBAAjB,CAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAOC,iBAAP,CADF,CANF,CAbF,CADF;AA0BD,KApCA,CADH,CADF;AAyCD;;AAEDvE,EAAAA,wBAAwB,CAACyD,QAAD,EAAWe,GAAX,EAAgB;AACtC,UAAM;AAAE9D,MAAAA;AAAF,QAAc,KAAKhB,KAAzB;AACA,UAAMgE,aAAa,GAAG,KAAK/D,KAAL,CAAWI,kBAAX,IAAiC,KAAKoD,iBAAL,CAAuBM,QAAvB,CAAvD;AACA,UAAME,aAAa,GAAGC,MAAM,CAACC,IAAP,CAAYJ,QAAQ,CAACK,OAArB,EAA8BlE,MAA9B,GAAuC,CAA7D;AACA,UAAM6E,eAAe,GAAGd,aAAa,GAAG,aAAH,GAAmB,IAAxD;AACA,UAAMe,aAAa,GAAGhB,aAAa,GAAG,aAAH,GAAmB,IAAtD;AAEA,UAAMiB,OAAO,GAAG,EAAhB;;AACA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnB,QAAQ,CAACoB,IAAT,CAAcjF,MAAlC,EAA0CgF,CAAC,IAAI,CAA/C,EAAkD;AAChDD,MAAAA,OAAO,CAACG,IAAR,CAAarB,QAAQ,CAACsB,OAAT,CAAiBC,SAAjB,CAA2B,IAAIJ,CAA/B,EAAkC,IAAIK,IAAI,CAACC,GAAL,CAASN,CAAC,GAAG,CAAb,EAAgBnB,QAAQ,CAACoB,IAAT,CAAcjF,MAA9B,CAAtC,CAAb;AACD;;AAED,UAAMuF,GAAG,gBACP;AACE,MAAA,GAAG,EAAEX,GADP;AAEE,MAAA,SAAS,EAAEjF,EAAE,CAAC,uBAAD,EAA0BkF,eAA1B,EAA2CC,aAA3C,CAFf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIE;AACE,MAAA,SAAS,EAAC,8BADZ;AAEE,MAAA,OAAO,EAAE,MAAM;AACb,aAAKlB,yBAAL,CAA+BC,QAA/B;AACD,OAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAME;AAAK,MAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,CAAC/C,OAAO,CAACc,KAAR,GAAgBd,OAAO,CAACc,KAAR,CAAcyC,IAA9B,GAAqC,IAAtC,KAA+CvD,OAAO,CAAC0D,EAD1D,CADF,CANF,eAWE;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAQX,QAAQ,CAAC2B,OAAT,CAAiBnC,OAAjB,CAAyB,CAAzB,CAAR,MADF,CAXF,eAcE;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACI0B,OAAO,CAACX,GAAR,CAAY,CAACqB,EAAD,EAAKT,CAAL,kBAAW;AAAM,MAAA,GAAG,EAAGA,CAAZ;AAAgB,MAAA,SAAS,EAAC,QAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAqCS,EAArC,CAAvB,CADJ,CAdF,CAJF,eAsBE;AAAK,MAAA,SAAS,EAAC,4BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG3B,aAAa,GAAG,KAAKK,wBAAL,CAA8BN,QAA9B,CAAH,GAA6C,IAD7D,CAtBF,CADF;AA6BA,WAAO0B,GAAP;AACD;;AAEDhF,EAAAA,iBAAiB,CAACmF,KAAD,EAAQd,GAAR,EAAa;AAC5B,QAAIe,MAAM,GAAG,KAAK7F,KAAL,CAAWwB,YAAxB;;AACA,QAAIqE,MAAM,KAAK,CAAX,IAAgB,KAAK7F,KAAL,CAAW4B,cAAX,CAA0B1B,MAA1B,KAAqC,CAAzD,EAA4D;AAC1D2F,MAAAA,MAAM,GAAG,KAAK7F,KAAL,CAAW4B,cAAX,CAA0B,CAA1B,CAAT;AACD;;AACD,QAAIiE,MAAM,GAAGD,KAAT,GAAiB,CAArB,EAAwB;AACtB;AACD;;AACD,QAAIC,MAAM,GAAGD,KAAT,GAAiB,KAAK5F,KAAL,CAAWgB,OAAX,CAAmBK,OAAnB,CAA2BnB,MAAhD,EAAwD;AACtD,aAAO,KAAKI,wBAAL,CACL,KAAKN,KAAL,CAAWgB,OAAX,CAAmBK,OAAnB,CAA2BwE,MAAM,GAAGD,KAApC,CADK,EAELd,GAFK,CAAP;AAID;;AACD,WAAO,IAAP;AACD;;AAEDpE,EAAAA,aAAa,CAACoF,KAAD,EAAQC,GAAR,EAAa;AACxB,wBACE;AAAK,MAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,0BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,eAEE;AAAK,MAAA,SAAS,EAAC,uBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAHF,CADF,eAME;AAAK,MAAA,SAAS,EAAC,wBAAf;AAAwC,MAAA,GAAG,EAAEA,GAA7C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGD,KADH,CANF,CADF;AAYD;;AAEDE,EAAAA,UAAU,GAAG;AACX,UAAM;AAAEpE,MAAAA,cAAF;AAAkBJ,MAAAA;AAAlB,QAAmC,KAAKxB,KAA9C;;AACA,QAAIwB,YAAY,GAAG,CAAnB,EAAsB;AACpB,aAAO,KAAKxB,KAAL,CAAWgB,OAAX,CAAmBK,OAAnB,CAA2BnB,MAA3B,GAAoCsB,YAA3C;AACD;;AACD,QAAII,cAAc,CAAC1B,MAAf,KAA0B,CAA9B,EAAiC;AAC/B,aAAO0B,cAAc,CAAC,CAAD,CAAd,GAAoBA,cAAc,CAAC,CAAD,CAAzC;AACD;;AACD,QAAI,KAAK5B,KAAL,CAAWgB,OAAf,EAAwB;AACtB,aAAO,KAAKhB,KAAL,CAAWgB,OAAX,CAAmBK,OAAnB,CAA2BnB,MAAlC;AACD,KAVU,CAWX;;;AACA,WAAO,CAAP;AACD;;AAEDS,EAAAA,kBAAkB,CAACsF,CAAD,EAAI;AACpB,SAAKhE,QAAL,CAAc;AAAE5B,MAAAA,kBAAkB,EAAE4F,CAAC,CAACC,MAAF,CAASC;AAA/B,KAAd;AACD;;AAEDvF,EAAAA,sBAAsB,GAAG;AACvB,SAAKqB,QAAL,CAAc;AAAE5B,MAAAA,kBAAkB,EAAE,CAAC,KAAKJ,KAAL,CAAWI;AAAlC,KAAd;AACD;;AAED+F,EAAAA,MAAM,GAAG;AACP,UAAMC,aAAa,GAAG,KAAKpG,KAAL,CAAWI,kBAAX,GAClB,cADkB,GAElB,YAFJ;AAGA,UAAMiG,cAAc,GAAG,KAAKrG,KAAL,CAAWI,kBAAX,GACnB,IADmB,GAEnB,eAFJ;AAGA,wBACE;AAAK,MAAA,SAAS,EAAC,6BAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAK,MAAA,SAAS,EAAC,oCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBADF,eAEE;AACE,MAAA,SAAS,EAAER,EAAE,CAAC,cAAD,EAAiByG,cAAjB,CADf;AAEE,MAAA,OAAO,EAAE,KAAK1F,sBAFhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAIGyF,aAJH,CAFF,CADF,eAUE;AAAK,MAAA,SAAS,EAAC,kCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACE,oBAAC,SAAD;AACE,MAAA,YAAY,EAAE,KAAK5F,iBADrB;AAEE,MAAA,aAAa,EAAE,KAAKC,aAFtB;AAGE,MAAA,MAAM,EAAE,KAAKsF,UAAL,EAHV;AAIE,MAAA,QAAQ,EAAE,EAJZ;AAKE,MAAA,0BAA0B,EAAE,KAAKhG,KAAL,CAAWwB,YALzC;AAME,MAAA,IAAI,EAAC,UANP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CAVF,CADF;AAuBD;;AAzT2C;AAAzB1B,M,CACZkC,c,GAAiB,E;AADLlC,M,CAGZyG,S,GAAY;AACjB9E,EAAAA,cAAc,EAAE9B,SAAS,CAAC6G,KADT;AAEjB5E,EAAAA,cAAc,EAAEjC,SAAS,CAAC6G,KAFT;AAGjB3C,EAAAA,qBAAqB,EAAElE,SAAS,CAAC8G,IAHhB;AAIjB7C,EAAAA,mBAAmB,EAAEjE,SAAS,CAAC8G,IAJd;AAKjBzF,EAAAA,OAAO,EAAErB,SAAS,CAAC+G,MALF;AAMjBlF,EAAAA,YAAY,EAAE7B,SAAS,CAACgH,MANP;AAOjBpE,EAAAA,iBAAiB,EAAE5C,SAAS,CAAC8G;AAPZ,C","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport ReactList from 'react-list';\n\nimport cx from 'classnames';\n\nexport default class CanLog extends Component {\n  static ITEMS_PER_PAGE = 50;\n\n  static propTypes = {\n    plottedSignals: PropTypes.array,\n    segmentIndices: PropTypes.array,\n    onSignalUnplotPressed: PropTypes.func,\n    onSignalPlotPressed: PropTypes.func,\n    message: PropTypes.object,\n    messageIndex: PropTypes.number,\n    onMessageExpanded: PropTypes.func\n  };\n\n  constructor(props) {\n    super(props);\n    // only want to display up to length elements at a time\n    // offset, length\n\n    this.state = {\n      length: 0,\n      expandedMessages: [],\n      messageHeights: [],\n      allPacketsExpanded: false\n    };\n\n    this.renderLogListItemMessage = this.renderLogListItemMessage.bind(this);\n    this.addDisplayedMessages = this.addDisplayedMessages.bind(this);\n    this.renderLogListItem = this.renderLogListItem.bind(this);\n    this.renderLogList = this.renderLogList.bind(this);\n    this.onExpandAllChanged = this.onExpandAllChanged.bind(this);\n    this.toggleExpandAllPackets = this.toggleExpandAllPackets.bind(this);\n    this.toggleSignalPlot = this.toggleSignalPlot.bind(this);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (!prevProps.message && this.props.message) {\n      this.addDisplayedMessages();\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const curMessageLength = this.props.message\n      ? this.props.message.entries.length\n      : 0;\n    const nextMessageLength = nextProps.message\n      ? nextProps.message.entries.length\n      : 0;\n\n    const shouldUpdate = this.props.message !== nextProps.message\n      || nextMessageLength !== curMessageLength\n      || nextProps.messageIndex !== this.props.messageIndex\n      || nextProps.plottedSignals.length !== this.props.plottedSignals.length\n      || JSON.stringify(nextProps.segmentIndices)\n        !== JSON.stringify(this.props.segmentIndices)\n      || JSON.stringify(nextState) !== JSON.stringify(this.state)\n      || this.props.message !== nextProps.message\n      || (this.props.message !== undefined\n        && nextProps.message !== undefined\n        && this.props.message.frame !== undefined\n        && nextProps.message.frame !== undefined\n        && JSON.stringify(this.props.message.frame)\n          !== JSON.stringify(nextProps.message.frame));\n\n    return shouldUpdate;\n  }\n\n  addDisplayedMessages() {\n    const { length } = this.state;\n    const newLength = length + CanLog.ITEMS_PER_PAGE;\n\n    this.setState({ length: newLength });\n  }\n\n  expandMessage(msg, msgIdx) {\n    this.setState({\n      expandedMessages: this.state.expandedMessages.concat([msg.time])\n    });\n    this.props.onMessageExpanded();\n  }\n\n  collapseMessage(msg, msgIdx) {\n    this.setState({\n      expandedMessages: this.state.expandedMessages.filter(\n        (expMsgTime) => expMsgTime !== msg.time\n      )\n    });\n  }\n\n  isSignalPlotted(msgId, signalUid) {\n    const plottedSignal = this.props.plottedSignals.find((plot) => plot.some(\n      (signal) => signal.messageId === msgId && signal.signalUid === signalUid\n    ));\n    return plottedSignal !== undefined;\n  }\n\n  signalValuePretty(signal, value) {\n    if (signal.isFloat) {\n      return value.toFixed(3);\n    }\n    if (typeof value === 'bigint') {\n      return value.toString();\n    }\n    return value;\n  }\n\n  isMessageExpanded(msg) {\n    return this.state.expandedMessages.indexOf(msg.time) !== -1;\n  }\n\n  toggleSignalPlot(msg, signalUid, plotted) {\n    if (!plotted) {\n      this.props.onSignalPlotPressed(msg, signalUid);\n    } else {\n      this.props.onSignalUnplotPressed(msg, signalUid);\n    }\n  }\n\n  toggleExpandPacketSignals(msgEntry) {\n    if (!this.props.message.frame) {\n      return;\n    }\n    const msgIsExpanded = this.state.allPacketsExpanded || this.isMessageExpanded(msgEntry);\n\n    const msgHasSignals = Object.keys(this.props.message.frame.signals).length > 0;\n    if (msgIsExpanded && msgHasSignals) {\n      this.setState({\n        expandedMessages: this.state.expandedMessages.filter(\n          (expMsgTime) => expMsgTime !== msgEntry.time\n        )\n      });\n    } else if (msgHasSignals) {\n      this.setState({\n        expandedMessages: this.state.expandedMessages.concat([msgEntry.time])\n      });\n      this.props.onMessageExpanded();\n    } else {\n    }\n  }\n\n  renderLogListItemSignals(msgEntry) {\n    const { message } = this.props;\n    return (\n      <div className=\"signals-log-list-signals\">\n        {Object.entries(msgEntry.signals).map(([name, value]) => {\n          const signal = message.frame.signals[name];\n          if (signal === undefined) {\n            // Signal removed?\n            return null;\n          }\n          const unit = signal.unit.length > 0 ? signal.unit : 'units';\n          const isPlotted = this.isSignalPlotted(message.id, signal.uid);\n          const plottedButtonClass = isPlotted ? null : 'button--alpha';\n          const plottedButtonText = isPlotted ? 'Hide Plot' : 'Show Plot';\n          return (\n            <div key={name} className=\"signals-log-list-signal\">\n              <div className=\"signals-log-list-signal-message\">\n                <span>{name}</span>\n              </div>\n              <div className=\"signals-log-list-signal-value\">\n                <span>\n                  (\n                  <strong>{this.signalValuePretty(signal, value)}</strong>\n                  {' '}\n                  {unit}\n)\n                </span>\n              </div>\n              <div\n                className=\"signals-log-list-signal-action\"\n                onClick={() => {\n                  this.toggleSignalPlot(message.id, signal.uid, isPlotted);\n                }}\n              >\n                <button className={cx('button--tiny', plottedButtonClass)}>\n                  <span>{plottedButtonText}</span>\n                </button>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    );\n  }\n\n  renderLogListItemMessage(msgEntry, key) {\n    const { message } = this.props;\n    const msgIsExpanded = this.state.allPacketsExpanded || this.isMessageExpanded(msgEntry);\n    const msgHasSignals = Object.keys(msgEntry.signals).length > 0;\n    const hasSignalsClass = msgHasSignals ? 'has-signals' : null;\n    const expandedClass = msgIsExpanded ? 'is-expanded' : null;\n\n    const msgHexs = [];\n    for (let i = 0; i < msgEntry.data.length; i += 8) {\n      msgHexs.push(msgEntry.hexData.substring(2 * i, 2 * Math.min(i + 8, msgEntry.data.length)));\n    }\n\n    const row = (\n      <div\n        key={key}\n        className={cx('signals-log-list-item', hasSignalsClass, expandedClass)}\n      >\n        <div\n          className=\"signals-log-list-item-header\"\n          onClick={() => {\n            this.toggleExpandPacketSignals(msgEntry);\n          }}\n        >\n          <div className=\"signals-log-list-message\">\n            <strong>\n              {(message.frame ? message.frame.name : null) || message.id}\n            </strong>\n          </div>\n          <div className=\"signals-log-list-time\">\n            <span>[{msgEntry.relTime.toFixed(3)}]</span>\n          </div>\n          <div className=\"signals-log-list-bytes\">\n            { msgHexs.map((hx, i) => <span key={ i } className=\"t-mono\">{ hx }</span> )}\n          </div>\n        </div>\n        <div className=\"signals-log-list-item-body\">\n          {msgIsExpanded ? this.renderLogListItemSignals(msgEntry) : null}\n        </div>\n      </div>\n    );\n\n    return row;\n  }\n\n  renderLogListItem(index, key) {\n    let offset = this.props.messageIndex;\n    if (offset === 0 && this.props.segmentIndices.length === 2) {\n      offset = this.props.segmentIndices[0];\n    }\n    if (offset + index < 0) {\n      debugger;\n    }\n    if (offset + index < this.props.message.entries.length) {\n      return this.renderLogListItemMessage(\n        this.props.message.entries[offset + index],\n        key\n      );\n    }\n    return null;\n  }\n\n  renderLogList(items, ref) {\n    return (\n      <div className=\"signals-log-list\">\n        <div className=\"signals-log-list-header\">\n          <div className=\"signals-log-list-message\">Message</div>\n          <div className=\"signals-log-list-time\">Time</div>\n          <div className=\"signals-log-list-bytes\">Bytes</div>\n        </div>\n        <div className=\"signals-log-list-items\" ref={ref}>\n          {items}\n        </div>\n      </div>\n    );\n  }\n\n  listLength() {\n    const { segmentIndices, messageIndex } = this.props;\n    if (messageIndex > 0) {\n      return this.props.message.entries.length - messageIndex;\n    }\n    if (segmentIndices.length === 2) {\n      return segmentIndices[1] - segmentIndices[0];\n    }\n    if (this.props.message) {\n      return this.props.message.entries.length;\n    }\n    // no message yet\n    return 0;\n  }\n\n  onExpandAllChanged(e) {\n    this.setState({ allPacketsExpanded: e.target.checked });\n  }\n\n  toggleExpandAllPackets() {\n    this.setState({ allPacketsExpanded: !this.state.allPacketsExpanded });\n  }\n\n  render() {\n    const expandAllText = this.state.allPacketsExpanded\n      ? 'Collapse All'\n      : 'Expand All';\n    const expandAllClass = this.state.allPacketsExpanded\n      ? null\n      : 'button--alpha';\n    return (\n      <div className=\"cabana-explorer-signals-log\">\n        <div className=\"cabana-explorer-signals-log-header\">\n          <strong>Message Packets</strong>\n          <button\n            className={cx('button--tiny', expandAllClass)}\n            onClick={this.toggleExpandAllPackets}\n          >\n            {expandAllText}\n          </button>\n        </div>\n        <div className=\"cabana-explorer-signals-log-body\">\n          <ReactList\n            itemRenderer={this.renderLogListItem}\n            itemsRenderer={this.renderLogList}\n            length={this.listLength()}\n            pageSize={50}\n            updateWhenThisValueChanges={this.props.messageIndex}\n            type=\"variable\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}