{"ast":null,"code":"'use strict';\n/* @flow */\n\nvar standardNormalTable = require('./standard_normal_table');\n/**\n * **[Cumulative Standard Normal Probability](http://en.wikipedia.org/wiki/Standard_normal_table)**\n *\n * Since probability tables cannot be\n * printed for every normal distribution, as there are an infinite variety\n * of normal distributions, it is common practice to convert a normal to a\n * standard normal and then use the standard normal table to find probabilities.\n *\n * You can use `.5 + .5 * errorFunction(x / Math.sqrt(2))` to calculate the probability\n * instead of looking it up in a table.\n *\n * @param {number} z\n * @returns {number} cumulative standard normal probability\n */\n\n\nfunction cumulativeStdNormalProbability(z\n/*:number */\n)\n/*:number */\n{\n  // Calculate the position of this value.\n  var absZ = Math.abs(z),\n      // Each row begins with a different\n  // significant digit: 0.5, 0.6, 0.7, and so on. Each value in the table\n  // corresponds to a range of 0.01 in the input values, so the value is\n  // multiplied by 100.\n  index = Math.min(Math.round(absZ * 100), standardNormalTable.length - 1); // The index we calculate must be in the table as a positive value,\n  // but we still pay attention to whether the input is positive\n  // or negative, and flip the output value as a last step.\n\n  if (z >= 0) {\n    return standardNormalTable[index];\n  } else {\n    // due to floating-point arithmetic, values in the table with\n    // 4 significant figures can nevertheless end up as repeating\n    // fractions when they're computed here.\n    return +(1 - standardNormalTable[index]).toFixed(4);\n  }\n}\n\nmodule.exports = cumulativeStdNormalProbability;","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/simple-statistics/src/cumulative_std_normal_probability.js"],"names":["standardNormalTable","require","cumulativeStdNormalProbability","z","absZ","Math","abs","index","min","round","length","toFixed","module","exports"],"mappings":"AAAA;AACA;;AAEA,IAAIA,mBAAmB,GAAGC,OAAO,CAAC,yBAAD,CAAjC;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,8BAAT,CAAwCC;AAAE;AAA1C;AAAuD;AAAa;AAEhE;AACA,MAAIC,IAAI,GAAGC,IAAI,CAACC,GAAL,CAASH,CAAT,CAAX;AAAA,MACI;AACA;AACA;AACA;AACAI,EAAAA,KAAK,GAAGF,IAAI,CAACG,GAAL,CAASH,IAAI,CAACI,KAAL,CAAWL,IAAI,GAAG,GAAlB,CAAT,EAAiCJ,mBAAmB,CAACU,MAApB,GAA6B,CAA9D,CALZ,CAHgE,CAUhE;AACA;AACA;;AACA,MAAIP,CAAC,IAAI,CAAT,EAAY;AACR,WAAOH,mBAAmB,CAACO,KAAD,CAA1B;AACH,GAFD,MAEO;AACH;AACA;AACA;AACA,WAAO,CAAC,CAAC,IAAIP,mBAAmB,CAACO,KAAD,CAAxB,EAAiCI,OAAjC,CAAyC,CAAzC,CAAR;AACH;AACJ;;AAEDC,MAAM,CAACC,OAAP,GAAiBX,8BAAjB","sourcesContent":["'use strict';\n/* @flow */\n\nvar standardNormalTable = require('./standard_normal_table');\n\n/**\n * **[Cumulative Standard Normal Probability](http://en.wikipedia.org/wiki/Standard_normal_table)**\n *\n * Since probability tables cannot be\n * printed for every normal distribution, as there are an infinite variety\n * of normal distributions, it is common practice to convert a normal to a\n * standard normal and then use the standard normal table to find probabilities.\n *\n * You can use `.5 + .5 * errorFunction(x / Math.sqrt(2))` to calculate the probability\n * instead of looking it up in a table.\n *\n * @param {number} z\n * @returns {number} cumulative standard normal probability\n */\nfunction cumulativeStdNormalProbability(z /*:number */)/*:number */ {\n\n    // Calculate the position of this value.\n    var absZ = Math.abs(z),\n        // Each row begins with a different\n        // significant digit: 0.5, 0.6, 0.7, and so on. Each value in the table\n        // corresponds to a range of 0.01 in the input values, so the value is\n        // multiplied by 100.\n        index = Math.min(Math.round(absZ * 100), standardNormalTable.length - 1);\n\n    // The index we calculate must be in the table as a positive value,\n    // but we still pay attention to whether the input is positive\n    // or negative, and flip the output value as a last step.\n    if (z >= 0) {\n        return standardNormalTable[index];\n    } else {\n        // due to floating-point arithmetic, values in the table with\n        // 4 significant figures can nevertheless end up as repeating\n        // fractions when they're computed here.\n        return +(1 - standardNormalTable[index]).toFixed(4);\n    }\n}\n\nmodule.exports = cumulativeStdNormalProbability;\n"]},"metadata":{},"sourceType":"script"}