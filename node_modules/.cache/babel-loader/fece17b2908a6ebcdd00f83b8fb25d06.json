{"ast":null,"code":"'use strict';\n/* @flow */\n\nmodule.exports = quickselect;\n/**\n * Rearrange items in `arr` so that all items in `[left, k]` range are the smallest.\n * The `k`-th element will have the `(k - left + 1)`-th smallest value in `[left, right]`.\n *\n * Implements Floyd-Rivest selection algorithm https://en.wikipedia.org/wiki/Floyd-Rivest_algorithm\n *\n * @private\n * @param {Array<number>} arr input array\n * @param {number} k pivot index\n * @param {number} left left index\n * @param {number} right right index\n * @returns {undefined}\n * @example\n * var arr = [65, 28, 59, 33, 21, 56, 22, 95, 50, 12, 90, 53, 28, 77, 39];\n * quickselect(arr, 8);\n * // = [39, 28, 28, 33, 21, 12, 22, 50, 53, 56, 59, 65, 90, 77, 95]\n */\n\nfunction quickselect(arr\n/*: Array<number> */\n, k\n/*: number */\n, left\n/*: number */\n, right\n/*: number */\n) {\n  left = left || 0;\n  right = right || arr.length - 1;\n\n  while (right > left) {\n    // 600 and 0.5 are arbitrary constants chosen in the original paper to minimize execution time\n    if (right - left > 600) {\n      var n = right - left + 1;\n      var m = k - left + 1;\n      var z = Math.log(n);\n      var s = 0.5 * Math.exp(2 * z / 3);\n      var sd = 0.5 * Math.sqrt(z * s * (n - s) / n);\n      if (m - n / 2 < 0) sd *= -1;\n      var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n      var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n      quickselect(arr, k, newLeft, newRight);\n    }\n\n    var t = arr[k];\n    var i = left;\n    var j = right;\n    swap(arr, left, k);\n    if (arr[right] > t) swap(arr, left, right);\n\n    while (i < j) {\n      swap(arr, i, j);\n      i++;\n      j--;\n\n      while (arr[i] < t) i++;\n\n      while (arr[j] > t) j--;\n    }\n\n    if (arr[left] === t) swap(arr, left, j);else {\n      j++;\n      swap(arr, j, right);\n    }\n    if (j <= k) left = j + 1;\n    if (k <= j) right = j - 1;\n  }\n}\n\nfunction swap(arr, i, j) {\n  var tmp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = tmp;\n}","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/simple-statistics/src/quickselect.js"],"names":["module","exports","quickselect","arr","k","left","right","length","n","m","z","Math","log","s","exp","sd","sqrt","newLeft","max","floor","newRight","min","t","i","j","swap","tmp"],"mappings":"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","sourcesContent":["'use strict';\n/* @flow */\n\nmodule.exports = quickselect;\n\n/**\n * Rearrange items in `arr` so that all items in `[left, k]` range are the smallest.\n * The `k`-th element will have the `(k - left + 1)`-th smallest value in `[left, right]`.\n *\n * Implements Floyd-Rivest selection algorithm https://en.wikipedia.org/wiki/Floyd-Rivest_algorithm\n *\n * @private\n * @param {Array<number>} arr input array\n * @param {number} k pivot index\n * @param {number} left left index\n * @param {number} right right index\n * @returns {undefined}\n * @example\n * var arr = [65, 28, 59, 33, 21, 56, 22, 95, 50, 12, 90, 53, 28, 77, 39];\n * quickselect(arr, 8);\n * // = [39, 28, 28, 33, 21, 12, 22, 50, 53, 56, 59, 65, 90, 77, 95]\n */\nfunction quickselect(arr /*: Array<number> */, k /*: number */, left /*: number */, right /*: number */) {\n    left = left || 0;\n    right = right || (arr.length - 1);\n\n    while (right > left) {\n        // 600 and 0.5 are arbitrary constants chosen in the original paper to minimize execution time\n        if (right - left > 600) {\n            var n = right - left + 1;\n            var m = k - left + 1;\n            var z = Math.log(n);\n            var s = 0.5 * Math.exp(2 * z / 3);\n            var sd = 0.5 * Math.sqrt(z * s * (n - s) / n);\n            if (m - n / 2 < 0) sd *= -1;\n            var newLeft = Math.max(left, Math.floor(k - m * s / n + sd));\n            var newRight = Math.min(right, Math.floor(k + (n - m) * s / n + sd));\n            quickselect(arr, k, newLeft, newRight);\n        }\n\n        var t = arr[k];\n        var i = left;\n        var j = right;\n\n        swap(arr, left, k);\n        if (arr[right] > t) swap(arr, left, right);\n\n        while (i < j) {\n            swap(arr, i, j);\n            i++;\n            j--;\n            while (arr[i] < t) i++;\n            while (arr[j] > t) j--;\n        }\n\n        if (arr[left] === t) swap(arr, left, j);\n        else {\n            j++;\n            swap(arr, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swap(arr, i, j) {\n    var tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n"]},"metadata":{},"sourceType":"script"}