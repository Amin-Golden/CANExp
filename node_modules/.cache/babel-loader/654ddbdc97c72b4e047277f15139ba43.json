{"ast":null,"code":"'use strict';\n/* @flow */\n\n/**\n * Given the output of `linearRegression`: an object\n * with `m` and `b` values indicating slope and intercept,\n * respectively, generate a line function that translates\n * x values into y values.\n *\n * @param {Object} mb object with `m` and `b` members, representing\n * slope and intersect of desired line\n * @returns {Function} method that computes y-value at any given\n * x-value on the line.\n * @example\n * var l = linearRegressionLine(linearRegression([[0, 0], [1, 1]]));\n * l(0) // = 0\n * l(2) // = 2\n * linearRegressionLine({ b: 0, m: 1 })(1); // => 1\n * linearRegressionLine({ b: 1, m: 1 })(1); // => 2\n */\n\nfunction linearRegressionLine(mb\n/*: { b: number, m: number }*/\n)\n/*: Function */\n{\n  // Return a function that computes a `y` value for each\n  // x value it is given, based on the values of `b` and `a`\n  // that we just computed.\n  return function (x) {\n    return mb.b + mb.m * x;\n  };\n}\n\nmodule.exports = linearRegressionLine;","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/simple-statistics/src/linear_regression_line.js"],"names":["linearRegressionLine","mb","x","b","m","module","exports"],"mappings":"AAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASA,oBAAT,CAA8BC;AAAE;AAAhC;AAA+D;AAAgB;AAC3E;AACA;AACA;AACA,SAAO,UAASC,CAAT,EAAY;AACf,WAAOD,EAAE,CAACE,CAAH,GAAQF,EAAE,CAACG,CAAH,GAAOF,CAAtB;AACH,GAFD;AAGH;;AAEDG,MAAM,CAACC,OAAP,GAAiBN,oBAAjB","sourcesContent":["'use strict';\n/* @flow */\n\n/**\n * Given the output of `linearRegression`: an object\n * with `m` and `b` values indicating slope and intercept,\n * respectively, generate a line function that translates\n * x values into y values.\n *\n * @param {Object} mb object with `m` and `b` members, representing\n * slope and intersect of desired line\n * @returns {Function} method that computes y-value at any given\n * x-value on the line.\n * @example\n * var l = linearRegressionLine(linearRegression([[0, 0], [1, 1]]));\n * l(0) // = 0\n * l(2) // = 2\n * linearRegressionLine({ b: 0, m: 1 })(1); // => 1\n * linearRegressionLine({ b: 1, m: 1 })(1); // => 2\n */\nfunction linearRegressionLine(mb/*: { b: number, m: number }*/)/*: Function */ {\n    // Return a function that computes a `y` value for each\n    // x value it is given, based on the values of `b` and `a`\n    // that we just computed.\n    return function(x) {\n        return mb.b + (mb.m * x);\n    };\n}\n\nmodule.exports = linearRegressionLine;\n"]},"metadata":{},"sourceType":"script"}