{"ast":null,"code":"const CapnpStream = require('capnp-split');\n\nconst EventWrapper = require('./event');\n\nconst Event = require('geval/event');\n\nmodule.exports = streamReader;\n\nfunction streamReader(inputStream, options) {\n  options = options || {};\n  const event = Event();\n  const capnpStream = new CapnpStream();\n  const isBinary = !!options.binary;\n  var isStarted = false;\n  capnpStream.on('message', function (buf) {\n    if (!isBinary) {\n      event.broadcast(new EventWrapper(buf).toJSON());\n    } else {\n      event.broadcast(buf);\n    }\n  });\n  return pipeAndListen;\n\n  function pipeAndListen(fn) {\n    if (!isStarted) {\n      isStarted = true;\n      inputStream.pipe(capnpStream);\n    }\n\n    return event.listen(fn);\n  }\n}","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/@commaai/log_reader/src/reader.js"],"names":["CapnpStream","require","EventWrapper","Event","module","exports","streamReader","inputStream","options","event","capnpStream","isBinary","binary","isStarted","on","buf","broadcast","toJSON","pipeAndListen","fn","pipe","listen"],"mappings":"AAAA,MAAMA,WAAW,GAAGC,OAAO,CAAC,aAAD,CAA3B;;AACA,MAAMC,YAAY,GAAGD,OAAO,CAAC,SAAD,CAA5B;;AACA,MAAME,KAAK,GAAGF,OAAO,CAAC,aAAD,CAArB;;AAEAG,MAAM,CAACC,OAAP,GAAiBC,YAAjB;;AAEA,SAASA,YAAT,CAAuBC,WAAvB,EAAoCC,OAApC,EAA6C;AAC3CA,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AACA,QAAMC,KAAK,GAAGN,KAAK,EAAnB;AACA,QAAMO,WAAW,GAAG,IAAIV,WAAJ,EAApB;AACA,QAAMW,QAAQ,GAAG,CAAC,CAACH,OAAO,CAACI,MAA3B;AAEA,MAAIC,SAAS,GAAG,KAAhB;AAEAH,EAAAA,WAAW,CAACI,EAAZ,CAAe,SAAf,EAA0B,UAAUC,GAAV,EAAe;AACvC,QAAI,CAACJ,QAAL,EAAe;AACbF,MAAAA,KAAK,CAACO,SAAN,CAAiB,IAAId,YAAJ,CAAiBa,GAAjB,CAAD,CAAwBE,MAAxB,EAAhB;AACD,KAFD,MAEO;AACLR,MAAAA,KAAK,CAACO,SAAN,CAAgBD,GAAhB;AACD;AACF,GAND;AAQA,SAAOG,aAAP;;AAEA,WAASA,aAAT,CAAwBC,EAAxB,EAA4B;AAC1B,QAAI,CAACN,SAAL,EAAgB;AACdA,MAAAA,SAAS,GAAG,IAAZ;AACAN,MAAAA,WAAW,CAACa,IAAZ,CAAiBV,WAAjB;AACD;;AAED,WAAOD,KAAK,CAACY,MAAN,CAAaF,EAAb,CAAP;AACD;AACF","sourcesContent":["const CapnpStream = require('capnp-split');\nconst EventWrapper = require('./event');\nconst Event = require('geval/event');\n\nmodule.exports = streamReader;\n\nfunction streamReader (inputStream, options) {\n  options = options || {};\n  const event = Event();\n  const capnpStream = new CapnpStream();\n  const isBinary = !!options.binary;\n\n  var isStarted = false;\n\n  capnpStream.on('message', function (buf) {\n    if (!isBinary) {\n      event.broadcast((new EventWrapper(buf)).toJSON());\n    } else {\n      event.broadcast(buf);\n    }\n  });\n\n  return pipeAndListen;\n\n  function pipeAndListen (fn) {\n    if (!isStarted) {\n      isStarted = true;\n      inputStream.pipe(capnpStream);\n    }\n\n    return event.listen(fn);\n  }\n}\n"]},"metadata":{},"sourceType":"script"}