{"ast":null,"code":"var _jsxFileName = \"/home/amax/Autoro/cabana/src/components/SignalLegendEntry/OptionField.js\";\nimport React from 'react';\nimport Field from './Field';\nimport { swapKeysAndValues } from '../../utils/object';\nexport default (_ref => {\n  let {\n    fieldSpec,\n    signal,\n    isExpanded,\n    signalEdited,\n    updateField,\n    valid\n  } = _ref;\n  let valueCol;\n  const {\n    field,\n    title\n  } = fieldSpec;\n  const htmlFor = `${signal.name}_${field}`;\n  const {\n    options,\n    optionValues\n  } = fieldSpec.options;\n  const valueOptions = swapKeysAndValues(optionValues);\n\n  if (isExpanded) {\n    const optionEles = options.map(opt => /*#__PURE__*/React.createElement(\"option\", {\n      key: opt,\n      value: optionValues[opt],\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 7\n      }\n    }, opt));\n    valueCol = /*#__PURE__*/React.createElement(\"select\", {\n      id: htmlFor,\n      defaultValue: signalEdited,\n      onChange: e => {\n        updateField(fieldSpec, e.target.value === 'true');\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 7\n      }\n    }, optionEles);\n  } else {\n    valueCol = /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 16\n      }\n    }, valueOptions[signal[field]]);\n  }\n\n  return /*#__PURE__*/React.createElement(Field, {\n    title: typeof title === 'function' ? title(signal) : title,\n    htmlFor: htmlFor,\n    valid: valid,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, valueCol);\n});","map":{"version":3,"sources":["/home/amax/Autoro/cabana/src/components/SignalLegendEntry/OptionField.js"],"names":["React","Field","swapKeysAndValues","fieldSpec","signal","isExpanded","signalEdited","updateField","valid","valueCol","field","title","htmlFor","name","options","optionValues","valueOptions","optionEles","map","opt","e","target","value"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AAEA,SAASC,iBAAT,QAAkC,oBAAlC;AAEA,gBAAe,QAOT;AAAA,MAPU;AACdC,IAAAA,SADc;AAEdC,IAAAA,MAFc;AAGdC,IAAAA,UAHc;AAIdC,IAAAA,YAJc;AAKdC,IAAAA,WALc;AAMdC,IAAAA;AANc,GAOV;AACJ,MAAIC,QAAJ;AACA,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAmBR,SAAzB;AACA,QAAMS,OAAO,GAAI,GAAER,MAAM,CAACS,IAAK,IAAGH,KAAM,EAAxC;AACA,QAAM;AAAEI,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA4BZ,SAAS,CAACW,OAA5C;AACA,QAAME,YAAY,GAAGd,iBAAiB,CAACa,YAAD,CAAtC;;AAEA,MAAIV,UAAJ,EAAgB;AACd,UAAMY,UAAU,GAAGH,OAAO,CAACI,GAAR,CAAaC,GAAD,iBAC7B;AAAQ,MAAA,GAAG,EAAEA,GAAb;AAAkB,MAAA,KAAK,EAAEJ,YAAY,CAACI,GAAD,CAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,GADH,CADiB,CAAnB;AAKAV,IAAAA,QAAQ,gBACN;AACE,MAAA,EAAE,EAAEG,OADN;AAEE,MAAA,YAAY,EAAEN,YAFhB;AAGE,MAAA,QAAQ,EAAGc,CAAD,IAAO;AACfb,QAAAA,WAAW,CAACJ,SAAD,EAAYiB,CAAC,CAACC,MAAF,CAASC,KAAT,KAAmB,MAA/B,CAAX;AACD,OALH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAOGL,UAPH,CADF;AAWD,GAjBD,MAiBO;AACLR,IAAAA,QAAQ,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAOO,YAAY,CAACZ,MAAM,CAACM,KAAD,CAAP,CAAnB,CAAX;AACD;;AAED,sBACE,oBAAC,KAAD;AACE,IAAA,KAAK,EAAE,OAAOC,KAAP,KAAiB,UAAjB,GAA8BA,KAAK,CAACP,MAAD,CAAnC,GAA8CO,KADvD;AAEE,IAAA,OAAO,EAAEC,OAFX;AAGE,IAAA,KAAK,EAAEJ,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAKGC,QALH,CADF;AASD,CA5CD","sourcesContent":["import React from 'react';\nimport Field from './Field';\n\nimport { swapKeysAndValues } from '../../utils/object';\n\nexport default ({\n  fieldSpec,\n  signal,\n  isExpanded,\n  signalEdited,\n  updateField,\n  valid\n}) => {\n  let valueCol;\n  const { field, title } = fieldSpec;\n  const htmlFor = `${signal.name}_${field}`;\n  const { options, optionValues } = fieldSpec.options;\n  const valueOptions = swapKeysAndValues(optionValues);\n\n  if (isExpanded) {\n    const optionEles = options.map((opt) => (\n      <option key={opt} value={optionValues[opt]}>\n        {opt}\n      </option>\n    ));\n    valueCol = (\n      <select\n        id={htmlFor}\n        defaultValue={signalEdited}\n        onChange={(e) => {\n          updateField(fieldSpec, e.target.value === 'true');\n        }}\n      >\n        {optionEles}\n      </select>\n    );\n  } else {\n    valueCol = <span>{valueOptions[signal[field]]}</span>;\n  }\n\n  return (\n    <Field\n      title={typeof title === 'function' ? title(signal) : title}\n      htmlFor={htmlFor}\n      valid={valid}\n    >\n      {valueCol}\n    </Field>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}