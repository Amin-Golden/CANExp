{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unpackCAN = unpackCAN;\nexports.packCAN = packCAN;\n/*\n  CAN UTILS\n*/\n\nvar CAN_TRANSMIT = exports.CAN_TRANSMIT = 1;\nvar CAN_EXTENDED = exports.CAN_EXTENDED = 4;\nvar CAN_MSG_LENGTH = 16;\n\nfunction unpackCAN(data) {\n  // Data must be a multiple of CAN_MSG_LENGTH\n  if (data.byteLength % CAN_MSG_LENGTH !== 0) {\n    var err = new Error('can-message.unpackCAN: byteLength must be a multiple of ' + CAN_MSG_LENGTH);\n    throw err;\n  }\n\n  var msgs = [];\n\n  for (var i = 0; i < data.byteLength; i += CAN_MSG_LENGTH) {\n    var dat = data.slice(i, i + CAN_MSG_LENGTH);\n    var datView = Buffer.from(dat);\n    var f1 = datView.readInt32LE(0),\n        f2 = datView.readInt32LE(4);\n    var address = void 0;\n\n    if ((f1 & CAN_EXTENDED) >>> 0) {\n      address = f1 >>> 3;\n    } else {\n      address = f1 >>> 21;\n    }\n\n    var busTime = f2 >>> 16;\n    var canMsgData = new Buffer(dat.slice(8, 8 + (f2 & 0xF)));\n    var bus = f2 >> 4 & 0xF & 0xFF;\n    var msg = {\n      address: address,\n      busTime: busTime,\n      data: canMsgData,\n      bus: bus\n    };\n    msgs.push(msg);\n  }\n\n  return msgs;\n}\n\nfunction packCAN(canMessage) {\n  var address = canMessage.address,\n      data = canMessage.data,\n      bus = canMessage.bus;\n\n  if (data.byteLength > 8) {\n    var err = new Error('can-message.packCAN: byteLength cannot be greater than 8');\n    throw err;\n  }\n\n  if (address >= 0x800) {\n    address = (address << 3 | CAN_TRANSMIT | CAN_EXTENDED) >>> 0;\n  } else {\n    address = (address << 21 | CAN_TRANSMIT) >>> 0;\n  }\n\n  var buf = Buffer.alloc(0x10);\n  buf.writeUInt32LE(address);\n  buf.writeUInt32LE((data.byteLength | bus << 4) >>> 0, 4);\n  data.copy(buf, 8);\n  return buf;\n}","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/can-message/dist.js"],"names":["Object","defineProperty","exports","value","unpackCAN","packCAN","CAN_TRANSMIT","CAN_EXTENDED","CAN_MSG_LENGTH","data","byteLength","err","Error","msgs","i","dat","slice","datView","Buffer","from","f1","readInt32LE","f2","address","busTime","canMsgData","bus","msg","push","canMessage","buf","alloc","writeUInt32LE","copy"],"mappings":"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","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.unpackCAN = unpackCAN;\nexports.packCAN = packCAN;\n/*\n  CAN UTILS\n*/\n\nvar CAN_TRANSMIT = exports.CAN_TRANSMIT = 1;\nvar CAN_EXTENDED = exports.CAN_EXTENDED = 4;\n\nvar CAN_MSG_LENGTH = 16;\n\nfunction unpackCAN(data) {\n  // Data must be a multiple of CAN_MSG_LENGTH\n  if (data.byteLength % CAN_MSG_LENGTH !== 0) {\n    var err = new Error('can-message.unpackCAN: byteLength must be a multiple of ' + CAN_MSG_LENGTH);\n    throw err;\n  }\n\n  var msgs = [];\n\n  for (var i = 0; i < data.byteLength; i += CAN_MSG_LENGTH) {\n    var dat = data.slice(i, i + CAN_MSG_LENGTH);\n\n    var datView = Buffer.from(dat);\n\n    var f1 = datView.readInt32LE(0),\n        f2 = datView.readInt32LE(4);\n    var address = void 0;\n    if ((f1 & CAN_EXTENDED) >>> 0) {\n      address = f1 >>> 3;\n    } else {\n      address = f1 >>> 21;\n    }\n\n    var busTime = f2 >>> 16;\n    var canMsgData = new Buffer(dat.slice(8, 8 + (f2 & 0xF)));\n    var bus = f2 >> 4 & 0xF & 0xFF;\n\n    var msg = { address: address, busTime: busTime, data: canMsgData, bus: bus };\n    msgs.push(msg);\n  }\n\n  return msgs;\n}\n\nfunction packCAN(canMessage) {\n  var address = canMessage.address,\n      data = canMessage.data,\n      bus = canMessage.bus;\n\n\n  if (data.byteLength > 8) {\n    var err = new Error('can-message.packCAN: byteLength cannot be greater than 8');\n    throw err;\n  }\n\n  if (address >= 0x800) {\n    address = (address << 3 | CAN_TRANSMIT | CAN_EXTENDED) >>> 0;\n  } else {\n    address = (address << 21 | CAN_TRANSMIT) >>> 0;\n  }\n\n  var buf = Buffer.alloc(0x10);\n\n  buf.writeUInt32LE(address);\n  buf.writeUInt32LE((data.byteLength | bus << 4) >>> 0, 4);\n  data.copy(buf, 8);\n\n  return buf;\n}\n"]},"metadata":{},"sourceType":"script"}