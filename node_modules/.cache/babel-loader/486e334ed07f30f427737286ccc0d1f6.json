{"ast":null,"code":"var _jsxFileName = \"/home/amax/Autoro/cabana/src/components/CanGraph.js\";\nimport React, { Component } from 'react';\nimport Measure from 'react-measure';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { Vega } from 'react-vega';\nimport Signal from '../models/can/signal';\nimport GraphData from '../models/graph-data';\nimport CanPlotSpec from '../vega/CanPlot';\nimport debounce from '../utils/debounce';\nconst DefaultPlotInnerStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0\n};\nexport default class CanGraph extends Component {\n  constructor(props) {\n    super(props);\n    this.updateBounds = debounce(() => {\n      this.view.signal('width', this.state.bounds.width - 90);\n      this.view.signal('height', 0.4 * (this.state.bounds.width - 40)); // 5:2 aspect ratio\n\n      this.view.run();\n    }, 100);\n    this.insertData = debounce(() => {\n      if (!this.view) {\n        console.log('Cannot insertData');\n        return;\n      } // adding plot points by diff isn't faster since it basically has to be n^2\n      // out-of-order events make it so that you can't just check the bounds\n\n\n      const {\n        series\n      } = this.state.data;\n      const changeset = this.view.changeset().remove(v => true).insert(series);\n      this.view.change('table', changeset);\n      this.view.run();\n    }, 250);\n    this.state = {\n      plotInnerStyle: null,\n      shiftX: 0,\n      shiftY: 0,\n      bounds: null,\n      isDataInserted: false,\n      data: this.getGraphData(props),\n      spec: this.getGraphSpec(props)\n    };\n    this.onNewView = this.onNewView.bind(this);\n    this.onSignalClickTime = this.onSignalClickTime.bind(this);\n    this.onSignalSegment = this.onSignalSegment.bind(this);\n    this.onDragAnchorMouseDown = this.onDragAnchorMouseDown.bind(this);\n    this.onDragAnchorMouseUp = this.onDragAnchorMouseUp.bind(this);\n    this.onDragStart = this.onDragStart.bind(this);\n    this.onPlotResize = this.onPlotResize.bind(this);\n    this.insertData = this.insertData.bind(this);\n  }\n\n  getGraphData(props) {\n    let firstRelTime = -1;\n    let lastRelTime = -1;\n    const series = props.plottedSignals.map(signals => {\n      const {\n        messageId,\n        signalUid\n      } = signals;\n      const {\n        entries\n      } = props.messages[messageId];\n\n      if (entries.length) {\n        let messageRelTime = entries[0].relTime;\n\n        if (firstRelTime === -1) {\n          firstRelTime = messageRelTime;\n        } else {\n          firstRelTime = Math.min(firstRelTime, messageRelTime);\n        }\n\n        messageRelTime = entries[entries.length - 1].relTime;\n        lastRelTime = Math.max(lastRelTime, messageRelTime);\n      }\n\n      return GraphData._calcGraphData(props.messages[messageId], signalUid, 0);\n    }).reduce((m, v) => m.concat(v), []);\n    return {\n      updated: Date.now(),\n      series,\n      firstRelTime,\n      lastRelTime\n    };\n  }\n\n  getGraphSpec(props) {\n    return { ...CanPlotSpec,\n      scales: [{ ...CanPlotSpec.scales[0],\n        domainMin: props.segment[0],\n        domainMax: props.segment[1]\n      }, ...CanPlotSpec.scales.slice(1)]\n    };\n  }\n\n  segmentIsNew(newSegment) {\n    return newSegment.length !== this.props.segment.length || !newSegment.every((val, idx) => this.props.segment[idx] === val);\n  }\n\n  visualChanged(prevProps, nextProps) {\n    return prevProps.canReceiveGraphDrop !== nextProps.canReceiveGraphDrop || JSON.stringify(prevProps.dragPos) !== JSON.stringify(nextProps.dragPos);\n  }\n\n  onPlotResize(options) {\n    if (!this.view) {\n      return;\n    }\n\n    let bounds = null; // eslint-disable-line no-unused-vars\n\n    if (options && options.bounds) {\n      this.setState({\n        bounds: options.bounds\n      });\n      bounds = options.bounds;\n    } else {\n      bounds = this.state.bounds;\n    }\n\n    this.view.runAfter(this.updateBounds);\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.dragPos && JSON.stringify(prevProps.dragPos) !== JSON.stringify(this.props.dragPos)) {\n      this.updateStyleFromDragPos(this.props.dragPos);\n    } else if (!this.props.dragPos && this.state.plotInnerStyle !== null) {\n      this.setState({\n        plotInnerStyle: null\n      });\n    }\n\n    if (prevProps.messages !== this.props.messages || prevProps.plottedSignal !== this.props.plottedSignal) {\n      const data = this.getGraphData(this.props);\n      this.setState({\n        data\n      });\n    }\n\n    if (this.segmentIsNew(this.props.segment)) {\n      this.setState({\n        spec: this.getGraphSpec(this.props)\n      });\n    }\n\n    if (this.view) {\n      if (this.props.segment.length > 0) {\n        // Set segmented domain\n        this.view.signal('segment', this.props.segment);\n      } else {\n        // Reset segment to full domain\n        this.view.signal('segment', 0);\n      }\n\n      this.view.signal('videoTime', this.props.currentTime);\n      this.view.runAsync();\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (!this.view) {\n      return true;\n    }\n\n    if (this.props.messages !== nextProps.messages || this.props.plottedSignal !== nextProps.plottedSignal || this.segmentIsNew(nextProps.segment) || this.state.spec !== nextState.spec) {\n      return true;\n    }\n\n    if (this.state.data !== nextState.data) {\n      this.insertData();\n    }\n\n    if (this.props.currentTime !== nextProps.currentTime) {\n      this.view.signal('videoTime', nextProps.currentTime);\n    }\n\n    if (this.segmentIsNew(nextProps.segment)) {\n      if (nextProps.segment.length > 0) {\n        // Set segmented domain\n        this.view.signal('segment', nextProps.segment);\n      } else {\n        // Reset segment to full domain\n        this.view.signal('segment', 0);\n      }\n    }\n\n    this.view.runAsync();\n    return false;\n  }\n\n  updateStyleFromDragPos(_ref) {\n    let {\n      left,\n      top\n    } = _ref;\n    const plotInnerStyle = { ...this.state.plotInnerStyle\n    };\n    plotInnerStyle.left = left;\n    plotInnerStyle.top = top;\n    this.setState({\n      plotInnerStyle\n    });\n  }\n\n  onNewView(view) {\n    this.view = view;\n\n    if (this.state.bounds) {\n      this.onPlotResize();\n    }\n\n    if (this.props.segment.length > 0) {\n      view.signal('segment', this.props.segment);\n    }\n\n    view.signal('videoTime', this.props.currentTime);\n    this.insertData();\n  }\n\n  onSignalClickTime(signal, clickTime) {\n    // console.log('onSignalClickTime', signal, clickTime);\n    if (clickTime !== undefined) {\n      this.props.onRelativeTimeClick(this.props.messageId, clickTime);\n    }\n  }\n\n  onSignalSegment(signal, segment) {\n    // console.log('onSignalSegment', signal, segment);\n    if (!Array.isArray(segment)) {\n      return;\n    }\n\n    this.props.onSegmentChanged(this.props.messageId, segment);\n\n    if (!this.view) {\n      return;\n    }\n\n    this.view.runAfter(() => {\n      const state = this.view.getState();\n      state.subcontext[0].signals.brush = 0;\n      this.view.setState(state);\n      this.insertData();\n    });\n  }\n\n  plotInnerStyleFromMouseEvent(e) {\n    const {\n      shiftX,\n      shiftY\n    } = this.state;\n    const plotInnerStyle = { ...DefaultPlotInnerStyle\n    };\n    const rect = this.props.container.getBoundingClientRect();\n    const x = e.clientX - rect.left - shiftX;\n    const y = e.clientY - rect.top - shiftY;\n    plotInnerStyle.left = x;\n    plotInnerStyle.top = y;\n    return plotInnerStyle;\n  }\n\n  onDragAnchorMouseDown(e) {\n    e.persist();\n    const shiftX = e.clientX - e.target.getBoundingClientRect().left;\n    const shiftY = e.clientY - e.target.getBoundingClientRect().top;\n    this.setState({\n      shiftX,\n      shiftY\n    }, () => {\n      this.setState({\n        plotInnerStyle: this.plotInnerStyleFromMouseEvent(e)\n      });\n    });\n    this.props.onDragStart(this.props.messageId, this.props.signalSpec.uid, shiftX, shiftY);\n  }\n\n  onDragAnchorMouseUp(e) {\n    this.props.onDragEnd();\n    this.setState({\n      plotInnerStyle: null,\n      shiftX: 0,\n      shiftY: 0\n    });\n  }\n\n  onDragStart(e) {\n    e.preventDefault();\n    return false;\n  }\n\n  render() {\n    const {\n      plotInnerStyle\n    } = this.state;\n    const canReceiveDropClass = this.props.canReceiveGraphDrop ? 'is-droppable' : null;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cabana-explorer-visuals-plot\",\n      ref: this.props.onGraphRefAvailable,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: cx('cabana-explorer-visuals-plot-inner', canReceiveDropClass),\n      style: plotInnerStyle || null,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"cabana-explorer-visuals-plot-draganchor\",\n      onMouseDown: this.onDragAnchorMouseDown,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 327,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      className: \"fa fa-bars\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 13\n      }\n    })), this.props.plottedSignals.map(_ref2 => {\n      let {\n        messageId,\n        signalUid,\n        messageName\n      } = _ref2;\n      const signal = Object.values(this.props.messages[messageId].frame.signals).find(s => s.uid === signalUid);\n      const colors = signal.getColors(messageId);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cabana-explorer-visuals-plot-header\",\n        key: `${messageId}_${signal.uid}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cabana-explorer-visuals-plot-header-toggle\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"button\", {\n        className: \"button--tiny\",\n        onClick: () => this.props.unplot(messageId, signalUid),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 350,\n          columnNumber: 23\n        }\n      }, \"Hide Plot\"))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cabana-explorer-visuals-plot-header-copy\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 19\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cabana-explorer-visuals-plot-message\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 23\n        }\n      }, messageName, ' ', messageId)), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cabana-explorer-visuals-plot-signal\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 361,\n          columnNumber: 21\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cabana-explorer-visuals-plot-signal-color\",\n        style: {\n          background: `rgb(${colors}`\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 362,\n          columnNumber: 23\n        }\n      }), /*#__PURE__*/React.createElement(\"strong\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 366,\n          columnNumber: 23\n        }\n      }, signal.name))));\n    }), /*#__PURE__*/React.createElement(Measure, {\n      bounds: true,\n      onResize: this.onPlotResize,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 11\n      }\n    }, _ref3 => {\n      let {\n        measureRef\n      } = _ref3;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: measureRef,\n        className: \"cabana-explorer-visuals-plot-container\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 375,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(Vega, {\n        onNewView: this.onNewView,\n        logLevel: 1,\n        signalListeners: {\n          clickTime: this.onSignalClickTime,\n          segment: this.onSignalSegment\n        },\n        renderer: \"canvas\",\n        spec: this.state.spec,\n        actions: false,\n        data: {\n          table: this.state.data.series\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 379,\n          columnNumber: 17\n        }\n      }));\n    })));\n  }\n\n}\nCanGraph.emptyTable = [];\nCanGraph.propTypes = {\n  plottedSignal: PropTypes.string,\n  messages: PropTypes.object,\n  messageId: PropTypes.string,\n  messageName: PropTypes.string,\n  signalSpec: PropTypes.instanceOf(Signal),\n  segment: PropTypes.array,\n  unplot: PropTypes.func,\n  onRelativeTimeClick: PropTypes.func,\n  currentTime: PropTypes.number,\n  onSegmentChanged: PropTypes.func,\n  onDragStart: PropTypes.func,\n  onDragEnd: PropTypes.func,\n  container: PropTypes.object,\n  dragPos: PropTypes.object,\n  canReceiveGraphDrop: PropTypes.bool,\n  onGraphRefAvailable: PropTypes.func,\n  plottedSignals: PropTypes.array\n};","map":{"version":3,"sources":["/home/amax/Autoro/cabana/src/components/CanGraph.js"],"names":["React","Component","Measure","PropTypes","cx","Vega","Signal","GraphData","CanPlotSpec","debounce","DefaultPlotInnerStyle","position","top","left","CanGraph","constructor","props","updateBounds","view","signal","state","bounds","width","run","insertData","console","log","series","data","changeset","remove","v","insert","change","plotInnerStyle","shiftX","shiftY","isDataInserted","getGraphData","spec","getGraphSpec","onNewView","bind","onSignalClickTime","onSignalSegment","onDragAnchorMouseDown","onDragAnchorMouseUp","onDragStart","onPlotResize","firstRelTime","lastRelTime","plottedSignals","map","signals","messageId","signalUid","entries","messages","length","messageRelTime","relTime","Math","min","max","_calcGraphData","reduce","m","concat","updated","Date","now","scales","domainMin","segment","domainMax","slice","segmentIsNew","newSegment","every","val","idx","visualChanged","prevProps","nextProps","canReceiveGraphDrop","JSON","stringify","dragPos","options","setState","runAfter","componentDidUpdate","updateStyleFromDragPos","plottedSignal","currentTime","runAsync","shouldComponentUpdate","nextState","clickTime","undefined","onRelativeTimeClick","Array","isArray","onSegmentChanged","getState","subcontext","brush","plotInnerStyleFromMouseEvent","e","rect","container","getBoundingClientRect","x","clientX","y","clientY","persist","target","signalSpec","uid","onDragEnd","preventDefault","render","canReceiveDropClass","onGraphRefAvailable","messageName","Object","values","frame","find","s","colors","getColors","unplot","background","name","measureRef","table","emptyTable","propTypes","string","object","instanceOf","array","func","number","bool"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,EAAP,MAAe,YAAf;AACA,SAASC,IAAT,QAAqB,YAArB;AAEA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,sBAAtB;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,QAAP,MAAqB,mBAArB;AAEA,MAAMC,qBAAqB,GAAG;AAC5BC,EAAAA,QAAQ,EAAE,UADkB;AAE5BC,EAAAA,GAAG,EAAE,CAFuB;AAG5BC,EAAAA,IAAI,EAAE;AAHsB,CAA9B;AAMA,eAAe,MAAMC,QAAN,SAAuBb,SAAvB,CAAiC;AAuB9Cc,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AADiB,SAmGnBC,YAnGmB,GAmGJR,QAAQ,CAAC,MAAM;AAC5B,WAAKS,IAAL,CAAUC,MAAV,CAAiB,OAAjB,EAA0B,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,KAAlB,GAA0B,EAApD;AACA,WAAKJ,IAAL,CAAUC,MAAV,CAAiB,QAAjB,EAA2B,OAAO,KAAKC,KAAL,CAAWC,MAAX,CAAkBC,KAAlB,GAA0B,EAAjC,CAA3B,EAF4B,CAEsC;;AAElE,WAAKJ,IAAL,CAAUK,GAAV;AACD,KALsB,EAKpB,GALoB,CAnGJ;AAAA,SA0GnBC,UA1GmB,GA0GNf,QAAQ,CAAC,MAAM;AAC1B,UAAI,CAAC,KAAKS,IAAV,EAAgB;AACdO,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA;AACD,OAJyB,CAM1B;AACA;;;AACA,YAAM;AAAEC,QAAAA;AAAF,UAAa,KAAKP,KAAL,CAAWQ,IAA9B;AACA,YAAMC,SAAS,GAAG,KAAKX,IAAL,CACfW,SADe,GAEfC,MAFe,CAEPC,CAAD,IAAO,IAFC,EAGfC,MAHe,CAGRL,MAHQ,CAAlB;AAIA,WAAKT,IAAL,CAAUe,MAAV,CAAiB,OAAjB,EAA0BJ,SAA1B;AACA,WAAKX,IAAL,CAAUK,GAAV;AACD,KAfoB,EAelB,GAfkB,CA1GF;AAGjB,SAAKH,KAAL,GAAa;AACXc,MAAAA,cAAc,EAAE,IADL;AAEXC,MAAAA,MAAM,EAAE,CAFG;AAGXC,MAAAA,MAAM,EAAE,CAHG;AAIXf,MAAAA,MAAM,EAAE,IAJG;AAKXgB,MAAAA,cAAc,EAAE,KALL;AAMXT,MAAAA,IAAI,EAAE,KAAKU,YAAL,CAAkBtB,KAAlB,CANK;AAOXuB,MAAAA,IAAI,EAAE,KAAKC,YAAL,CAAkBxB,KAAlB;AAPK,KAAb;AASA,SAAKyB,SAAL,GAAiB,KAAKA,SAAL,CAAeC,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKC,iBAAL,GAAyB,KAAKA,iBAAL,CAAuBD,IAAvB,CAA4B,IAA5B,CAAzB;AACA,SAAKE,eAAL,GAAuB,KAAKA,eAAL,CAAqBF,IAArB,CAA0B,IAA1B,CAAvB;AACA,SAAKG,qBAAL,GAA6B,KAAKA,qBAAL,CAA2BH,IAA3B,CAAgC,IAAhC,CAA7B;AACA,SAAKI,mBAAL,GAA2B,KAAKA,mBAAL,CAAyBJ,IAAzB,CAA8B,IAA9B,CAA3B;AACA,SAAKK,WAAL,GAAmB,KAAKA,WAAL,CAAiBL,IAAjB,CAAsB,IAAtB,CAAnB;AACA,SAAKM,YAAL,GAAoB,KAAKA,YAAL,CAAkBN,IAAlB,CAAuB,IAAvB,CAApB;AACA,SAAKlB,UAAL,GAAkB,KAAKA,UAAL,CAAgBkB,IAAhB,CAAqB,IAArB,CAAlB;AACD;;AAEDJ,EAAAA,YAAY,CAACtB,KAAD,EAAQ;AAClB,QAAIiC,YAAY,GAAG,CAAC,CAApB;AACA,QAAIC,WAAW,GAAG,CAAC,CAAnB;AACA,UAAMvB,MAAM,GAAGX,KAAK,CAACmC,cAAN,CACZC,GADY,CACPC,OAAD,IAAa;AAChB,YAAM;AAAEC,QAAAA,SAAF;AAAaC,QAAAA;AAAb,UAA2BF,OAAjC;AACA,YAAM;AAAEG,QAAAA;AAAF,UAAcxC,KAAK,CAACyC,QAAN,CAAeH,SAAf,CAApB;;AACA,UAAIE,OAAO,CAACE,MAAZ,EAAoB;AAClB,YAAIC,cAAc,GAAGH,OAAO,CAAC,CAAD,CAAP,CAAWI,OAAhC;;AACA,YAAIX,YAAY,KAAK,CAAC,CAAtB,EAAyB;AACvBA,UAAAA,YAAY,GAAGU,cAAf;AACD,SAFD,MAEO;AACLV,UAAAA,YAAY,GAAGY,IAAI,CAACC,GAAL,CAASb,YAAT,EAAuBU,cAAvB,CAAf;AACD;;AACDA,QAAAA,cAAc,GAAGH,OAAO,CAACA,OAAO,CAACE,MAAR,GAAiB,CAAlB,CAAP,CAA4BE,OAA7C;AACAV,QAAAA,WAAW,GAAGW,IAAI,CAACE,GAAL,CAASb,WAAT,EAAsBS,cAAtB,CAAd;AACD;;AACD,aAAOpD,SAAS,CAACyD,cAAV,CACLhD,KAAK,CAACyC,QAAN,CAAeH,SAAf,CADK,EAELC,SAFK,EAGL,CAHK,CAAP;AAKD,KAnBY,EAoBZU,MApBY,CAoBL,CAACC,CAAD,EAAInC,CAAJ,KAAUmC,CAAC,CAACC,MAAF,CAASpC,CAAT,CApBL,EAoBkB,EApBlB,CAAf;AAsBA,WAAO;AACLqC,MAAAA,OAAO,EAAEC,IAAI,CAACC,GAAL,EADJ;AAEL3C,MAAAA,MAFK;AAGLsB,MAAAA,YAHK;AAILC,MAAAA;AAJK,KAAP;AAMD;;AAEDV,EAAAA,YAAY,CAACxB,KAAD,EAAQ;AAClB,WAAO,EACL,GAAGR,WADE;AAEL+D,MAAAA,MAAM,EAAE,CACN,EACE,GAAG/D,WAAW,CAAC+D,MAAZ,CAAmB,CAAnB,CADL;AAEEC,QAAAA,SAAS,EAAExD,KAAK,CAACyD,OAAN,CAAc,CAAd,CAFb;AAGEC,QAAAA,SAAS,EAAE1D,KAAK,CAACyD,OAAN,CAAc,CAAd;AAHb,OADM,EAMN,GAAGjE,WAAW,CAAC+D,MAAZ,CAAmBI,KAAnB,CAAyB,CAAzB,CANG;AAFH,KAAP;AAWD;;AAEDC,EAAAA,YAAY,CAACC,UAAD,EAAa;AACvB,WACEA,UAAU,CAACnB,MAAX,KAAsB,KAAK1C,KAAL,CAAWyD,OAAX,CAAmBf,MAAzC,IACG,CAACmB,UAAU,CAACC,KAAX,CAAiB,CAACC,GAAD,EAAMC,GAAN,KAAc,KAAKhE,KAAL,CAAWyD,OAAX,CAAmBO,GAAnB,MAA4BD,GAA3D,CAFN;AAID;;AAEDE,EAAAA,aAAa,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AAClC,WACED,SAAS,CAACE,mBAAV,KAAkCD,SAAS,CAACC,mBAA5C,IACGC,IAAI,CAACC,SAAL,CAAeJ,SAAS,CAACK,OAAzB,MAAsCF,IAAI,CAACC,SAAL,CAAeH,SAAS,CAACI,OAAzB,CAF3C;AAID;;AAEDvC,EAAAA,YAAY,CAACwC,OAAD,EAAU;AACpB,QAAI,CAAC,KAAKtE,IAAV,EAAgB;AACd;AACD;;AAED,QAAIG,MAAM,GAAG,IAAb,CALoB,CAKD;;AACnB,QAAImE,OAAO,IAAIA,OAAO,CAACnE,MAAvB,EAA+B;AAC7B,WAAKoE,QAAL,CAAc;AAAEpE,QAAAA,MAAM,EAAEmE,OAAO,CAACnE;AAAlB,OAAd;AACAA,MAAAA,MAAM,GAAGmE,OAAO,CAACnE,MAAjB;AACD,KAHD,MAGO;AACLA,MAAAA,MAAM,GAAG,KAAKD,KAAL,CAAWC,MAApB;AACD;;AAED,SAAKH,IAAL,CAAUwE,QAAV,CAAmB,KAAKzE,YAAxB;AACD;;AA0BD0E,EAAAA,kBAAkB,CAACT,SAAD,EAAY;AAC5B,QAAI,KAAKlE,KAAL,CAAWuE,OAAX,IAAsBF,IAAI,CAACC,SAAL,CAAeJ,SAAS,CAACK,OAAzB,MAAsCF,IAAI,CAACC,SAAL,CAAe,KAAKtE,KAAL,CAAWuE,OAA1B,CAAhE,EAAoG;AAClG,WAAKK,sBAAL,CAA4B,KAAK5E,KAAL,CAAWuE,OAAvC;AACD,KAFD,MAEO,IAAI,CAAC,KAAKvE,KAAL,CAAWuE,OAAZ,IAAuB,KAAKnE,KAAL,CAAWc,cAAX,KAA8B,IAAzD,EAA+D;AACpE,WAAKuD,QAAL,CAAc;AAAEvD,QAAAA,cAAc,EAAE;AAAlB,OAAd;AACD;;AAED,QAAIgD,SAAS,CAACzB,QAAV,KAAuB,KAAKzC,KAAL,CAAWyC,QAAlC,IAA8CyB,SAAS,CAACW,aAAV,KAA4B,KAAK7E,KAAL,CAAW6E,aAAzF,EAAwG;AACtG,YAAMjE,IAAI,GAAG,KAAKU,YAAL,CAAkB,KAAKtB,KAAvB,CAAb;AACA,WAAKyE,QAAL,CAAc;AAAE7D,QAAAA;AAAF,OAAd;AACD;;AACD,QAAI,KAAKgD,YAAL,CAAkB,KAAK5D,KAAL,CAAWyD,OAA7B,CAAJ,EAA2C;AACzC,WAAKgB,QAAL,CAAc;AAAElD,QAAAA,IAAI,EAAE,KAAKC,YAAL,CAAkB,KAAKxB,KAAvB;AAAR,OAAd;AACD;;AAED,QAAI,KAAKE,IAAT,EAAe;AACb,UAAI,KAAKF,KAAL,CAAWyD,OAAX,CAAmBf,MAAnB,GAA4B,CAAhC,EAAmC;AACjC;AACA,aAAKxC,IAAL,CAAUC,MAAV,CAAiB,SAAjB,EAA4B,KAAKH,KAAL,CAAWyD,OAAvC;AACD,OAHD,MAGO;AACL;AACA,aAAKvD,IAAL,CAAUC,MAAV,CAAiB,SAAjB,EAA4B,CAA5B;AACD;;AACD,WAAKD,IAAL,CAAUC,MAAV,CAAiB,WAAjB,EAA8B,KAAKH,KAAL,CAAW8E,WAAzC;AACA,WAAK5E,IAAL,CAAU6E,QAAV;AACD;AACF;;AAEDC,EAAAA,qBAAqB,CAACb,SAAD,EAAYc,SAAZ,EAAuB;AAC1C,QAAI,CAAC,KAAK/E,IAAV,EAAgB;AACd,aAAO,IAAP;AACD;;AACD,QAAI,KAAKF,KAAL,CAAWyC,QAAX,KAAwB0B,SAAS,CAAC1B,QAAlC,IAA8C,KAAKzC,KAAL,CAAW6E,aAAX,KAA6BV,SAAS,CAACU,aAArF,IACF,KAAKjB,YAAL,CAAkBO,SAAS,CAACV,OAA5B,CADE,IACsC,KAAKrD,KAAL,CAAWmB,IAAX,KAAoB0D,SAAS,CAAC1D,IADxE,EAEA;AACE,aAAO,IAAP;AACD;;AACD,QAAI,KAAKnB,KAAL,CAAWQ,IAAX,KAAoBqE,SAAS,CAACrE,IAAlC,EAAwC;AACtC,WAAKJ,UAAL;AACD;;AACD,QAAI,KAAKR,KAAL,CAAW8E,WAAX,KAA2BX,SAAS,CAACW,WAAzC,EAAsD;AACpD,WAAK5E,IAAL,CAAUC,MAAV,CAAiB,WAAjB,EAA8BgE,SAAS,CAACW,WAAxC;AACD;;AACD,QAAI,KAAKlB,YAAL,CAAkBO,SAAS,CAACV,OAA5B,CAAJ,EAA0C;AACxC,UAAIU,SAAS,CAACV,OAAV,CAAkBf,MAAlB,GAA2B,CAA/B,EAAkC;AAChC;AACA,aAAKxC,IAAL,CAAUC,MAAV,CAAiB,SAAjB,EAA4BgE,SAAS,CAACV,OAAtC;AACD,OAHD,MAGO;AACL;AACA,aAAKvD,IAAL,CAAUC,MAAV,CAAiB,SAAjB,EAA4B,CAA5B;AACD;AACF;;AACD,SAAKD,IAAL,CAAU6E,QAAV;AACA,WAAO,KAAP;AACD;;AAEDH,EAAAA,sBAAsB,OAAgB;AAAA,QAAf;AAAE/E,MAAAA,IAAF;AAAQD,MAAAA;AAAR,KAAe;AACpC,UAAMsB,cAAc,GAAG,EAAE,GAAG,KAAKd,KAAL,CAAWc;AAAhB,KAAvB;AACAA,IAAAA,cAAc,CAACrB,IAAf,GAAsBA,IAAtB;AACAqB,IAAAA,cAAc,CAACtB,GAAf,GAAqBA,GAArB;AACA,SAAK6E,QAAL,CAAc;AAAEvD,MAAAA;AAAF,KAAd;AACD;;AAEDO,EAAAA,SAAS,CAACvB,IAAD,EAAO;AACd,SAAKA,IAAL,GAAYA,IAAZ;;AAEA,QAAI,KAAKE,KAAL,CAAWC,MAAf,EAAuB;AACrB,WAAK2B,YAAL;AACD;;AACD,QAAI,KAAKhC,KAAL,CAAWyD,OAAX,CAAmBf,MAAnB,GAA4B,CAAhC,EAAmC;AACjCxC,MAAAA,IAAI,CAACC,MAAL,CAAY,SAAZ,EAAuB,KAAKH,KAAL,CAAWyD,OAAlC;AACD;;AACDvD,IAAAA,IAAI,CAACC,MAAL,CAAY,WAAZ,EAAyB,KAAKH,KAAL,CAAW8E,WAApC;AAEA,SAAKtE,UAAL;AACD;;AAEDmB,EAAAA,iBAAiB,CAACxB,MAAD,EAAS+E,SAAT,EAAoB;AACnC;AACA,QAAIA,SAAS,KAAKC,SAAlB,EAA6B;AAC3B,WAAKnF,KAAL,CAAWoF,mBAAX,CAA+B,KAAKpF,KAAL,CAAWsC,SAA1C,EAAqD4C,SAArD;AACD;AACF;;AAEDtD,EAAAA,eAAe,CAACzB,MAAD,EAASsD,OAAT,EAAkB;AAC/B;AACA,QAAI,CAAC4B,KAAK,CAACC,OAAN,CAAc7B,OAAd,CAAL,EAA6B;AAC3B;AACD;;AAED,SAAKzD,KAAL,CAAWuF,gBAAX,CAA4B,KAAKvF,KAAL,CAAWsC,SAAvC,EAAkDmB,OAAlD;;AAEA,QAAI,CAAC,KAAKvD,IAAV,EAAgB;AACd;AACD;;AAED,SAAKA,IAAL,CAAUwE,QAAV,CAAmB,MAAM;AACvB,YAAMtE,KAAK,GAAG,KAAKF,IAAL,CAAUsF,QAAV,EAAd;AACApF,MAAAA,KAAK,CAACqF,UAAN,CAAiB,CAAjB,EAAoBpD,OAApB,CAA4BqD,KAA5B,GAAoC,CAApC;AACA,WAAKxF,IAAL,CAAUuE,QAAV,CAAmBrE,KAAnB;AACA,WAAKI,UAAL;AACD,KALD;AAMD;;AAEDmF,EAAAA,4BAA4B,CAACC,CAAD,EAAI;AAC9B,UAAM;AAAEzE,MAAAA,MAAF;AAAUC,MAAAA;AAAV,QAAqB,KAAKhB,KAAhC;AACA,UAAMc,cAAc,GAAG,EAAE,GAAGxB;AAAL,KAAvB;AACA,UAAMmG,IAAI,GAAG,KAAK7F,KAAL,CAAW8F,SAAX,CAAqBC,qBAArB,EAAb;AAEA,UAAMC,CAAC,GAAGJ,CAAC,CAACK,OAAF,GAAYJ,IAAI,CAAChG,IAAjB,GAAwBsB,MAAlC;AACA,UAAM+E,CAAC,GAAGN,CAAC,CAACO,OAAF,GAAYN,IAAI,CAACjG,GAAjB,GAAuBwB,MAAjC;AACAF,IAAAA,cAAc,CAACrB,IAAf,GAAsBmG,CAAtB;AACA9E,IAAAA,cAAc,CAACtB,GAAf,GAAqBsG,CAArB;AACA,WAAOhF,cAAP;AACD;;AAEDW,EAAAA,qBAAqB,CAAC+D,CAAD,EAAI;AACvBA,IAAAA,CAAC,CAACQ,OAAF;AACA,UAAMjF,MAAM,GAAGyE,CAAC,CAACK,OAAF,GAAYL,CAAC,CAACS,MAAF,CAASN,qBAAT,GAAiClG,IAA5D;AACA,UAAMuB,MAAM,GAAGwE,CAAC,CAACO,OAAF,GAAYP,CAAC,CAACS,MAAF,CAASN,qBAAT,GAAiCnG,GAA5D;AACA,SAAK6E,QAAL,CAAc;AAAEtD,MAAAA,MAAF;AAAUC,MAAAA;AAAV,KAAd,EAAkC,MAAM;AACtC,WAAKqD,QAAL,CAAc;AAAEvD,QAAAA,cAAc,EAAE,KAAKyE,4BAAL,CAAkCC,CAAlC;AAAlB,OAAd;AACD,KAFD;AAGA,SAAK5F,KAAL,CAAW+B,WAAX,CACE,KAAK/B,KAAL,CAAWsC,SADb,EAEE,KAAKtC,KAAL,CAAWsG,UAAX,CAAsBC,GAFxB,EAGEpF,MAHF,EAIEC,MAJF;AAMD;;AAEDU,EAAAA,mBAAmB,CAAC8D,CAAD,EAAI;AACrB,SAAK5F,KAAL,CAAWwG,SAAX;AACA,SAAK/B,QAAL,CAAc;AACZvD,MAAAA,cAAc,EAAE,IADJ;AAEZC,MAAAA,MAAM,EAAE,CAFI;AAGZC,MAAAA,MAAM,EAAE;AAHI,KAAd;AAKD;;AAEDW,EAAAA,WAAW,CAAC6D,CAAD,EAAI;AACbA,IAAAA,CAAC,CAACa,cAAF;AACA,WAAO,KAAP;AACD;;AAEDC,EAAAA,MAAM,GAAG;AACP,UAAM;AAAExF,MAAAA;AAAF,QAAqB,KAAKd,KAAhC;AACA,UAAMuG,mBAAmB,GAAG,KAAK3G,KAAL,CAAWoE,mBAAX,GACxB,cADwB,GAExB,IAFJ;AAIA,wBACE;AACE,MAAA,SAAS,EAAC,8BADZ;AAEE,MAAA,GAAG,EAAE,KAAKpE,KAAL,CAAW4G,mBAFlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIE;AACE,MAAA,SAAS,EAAExH,EAAE,CACX,oCADW,EAEXuH,mBAFW,CADf;AAKE,MAAA,KAAK,EAAEzF,cAAc,IAAI,IAL3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAOE;AACE,MAAA,SAAS,EAAC,yCADZ;AAEE,MAAA,WAAW,EAAE,KAAKW,qBAFpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAIE;AAAM,MAAA,SAAS,EAAC,YAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJF,CAPF,EAaG,KAAK7B,KAAL,CAAWmC,cAAX,CAA0BC,GAA1B,CACC,SAA2C;AAAA,UAA1C;AAAEE,QAAAA,SAAF;AAAaC,QAAAA,SAAb;AAAwBsE,QAAAA;AAAxB,OAA0C;AACzC,YAAM1G,MAAM,GAAG2G,MAAM,CAACC,MAAP,CACb,KAAK/G,KAAL,CAAWyC,QAAX,CAAoBH,SAApB,EAA+B0E,KAA/B,CAAqC3E,OADxB,EAEb4E,IAFa,CAEPC,CAAD,IAAOA,CAAC,CAACX,GAAF,KAAUhE,SAFT,CAAf;AAGA,YAAM4E,MAAM,GAAGhH,MAAM,CAACiH,SAAP,CAAiB9E,SAAjB,CAAf;AAEA,0BACE;AACE,QAAA,SAAS,EAAC,qCADZ;AAEE,QAAA,GAAG,EAAG,GAAEA,SAAU,IAAGnC,MAAM,CAACoG,GAAI,EAFlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAIE;AAAK,QAAA,SAAS,EAAC,4CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AACE,QAAA,SAAS,EAAC,cADZ;AAEE,QAAA,OAAO,EAAE,MAAM,KAAKvG,KAAL,CAAWqH,MAAX,CAAkB/E,SAAlB,EAA6BC,SAA7B,CAFjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAIE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAJF,CADF,CAJF,eAYE;AAAK,QAAA,SAAS,EAAC,0CAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAK,QAAA,SAAS,EAAC,sCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGsE,WADH,EAEG,GAFH,EAGGvE,SAHH,CADF,CADF,eAQE;AAAK,QAAA,SAAS,EAAC,qCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBACE;AACE,QAAA,SAAS,EAAC,2CADZ;AAEE,QAAA,KAAK,EAAE;AAAEgF,UAAAA,UAAU,EAAG,OAAMH,MAAO;AAA5B,SAFT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,eAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAShH,MAAM,CAACoH,IAAhB,CALF,CARF,CAZF,CADF;AA+BD,KAtCF,CAbH,eAqDE,oBAAC,OAAD;AAAS,MAAA,MAAM,MAAf;AAAgB,MAAA,QAAQ,EAAE,KAAKvF,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG;AAAA,UAAC;AAAEwF,QAAAA;AAAF,OAAD;AAAA,0BACC;AACE,QAAA,GAAG,EAAEA,UADP;AAEE,QAAA,SAAS,EAAC,wCAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAIE,oBAAC,IAAD;AACE,QAAA,SAAS,EAAE,KAAK/F,SADlB;AAEE,QAAA,QAAQ,EAAE,CAFZ;AAGE,QAAA,eAAe,EAAE;AACfyD,UAAAA,SAAS,EAAE,KAAKvD,iBADD;AAEf8B,UAAAA,OAAO,EAAE,KAAK7B;AAFC,SAHnB;AAOE,QAAA,QAAQ,EAAC,QAPX;AAQE,QAAA,IAAI,EAAE,KAAKxB,KAAL,CAAWmB,IARnB;AASE,QAAA,OAAO,EAAE,KATX;AAUE,QAAA,IAAI,EAAE;AACJkG,UAAAA,KAAK,EAAE,KAAKrH,KAAL,CAAWQ,IAAX,CAAgBD;AADnB,SAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,CADD;AAAA,KADH,CArDF,CAJF,CADF;AAoFD;;AA7X6C;AAA3Bb,Q,CACZ4H,U,GAAa,E;AADD5H,Q,CAGZ6H,S,GAAY;AACjB9C,EAAAA,aAAa,EAAE1F,SAAS,CAACyI,MADR;AAEjBnF,EAAAA,QAAQ,EAAEtD,SAAS,CAAC0I,MAFH;AAGjBvF,EAAAA,SAAS,EAAEnD,SAAS,CAACyI,MAHJ;AAIjBf,EAAAA,WAAW,EAAE1H,SAAS,CAACyI,MAJN;AAKjBtB,EAAAA,UAAU,EAAEnH,SAAS,CAAC2I,UAAV,CAAqBxI,MAArB,CALK;AAMjBmE,EAAAA,OAAO,EAAEtE,SAAS,CAAC4I,KANF;AAOjBV,EAAAA,MAAM,EAAElI,SAAS,CAAC6I,IAPD;AAQjB5C,EAAAA,mBAAmB,EAAEjG,SAAS,CAAC6I,IARd;AASjBlD,EAAAA,WAAW,EAAE3F,SAAS,CAAC8I,MATN;AAUjB1C,EAAAA,gBAAgB,EAAEpG,SAAS,CAAC6I,IAVX;AAWjBjG,EAAAA,WAAW,EAAE5C,SAAS,CAAC6I,IAXN;AAYjBxB,EAAAA,SAAS,EAAErH,SAAS,CAAC6I,IAZJ;AAajBlC,EAAAA,SAAS,EAAE3G,SAAS,CAAC0I,MAbJ;AAcjBtD,EAAAA,OAAO,EAAEpF,SAAS,CAAC0I,MAdF;AAejBzD,EAAAA,mBAAmB,EAAEjF,SAAS,CAAC+I,IAfd;AAgBjBtB,EAAAA,mBAAmB,EAAEzH,SAAS,CAAC6I,IAhBd;AAiBjB7F,EAAAA,cAAc,EAAEhD,SAAS,CAAC4I;AAjBT,C","sourcesContent":["import React, { Component } from 'react';\nimport Measure from 'react-measure';\nimport PropTypes from 'prop-types';\nimport cx from 'classnames';\nimport { Vega } from 'react-vega';\n\nimport Signal from '../models/can/signal';\nimport GraphData from '../models/graph-data';\nimport CanPlotSpec from '../vega/CanPlot';\nimport debounce from '../utils/debounce';\n\nconst DefaultPlotInnerStyle = {\n  position: 'absolute',\n  top: 0,\n  left: 0\n};\n\nexport default class CanGraph extends Component {\n  static emptyTable = [];\n\n  static propTypes = {\n    plottedSignal: PropTypes.string,\n    messages: PropTypes.object,\n    messageId: PropTypes.string,\n    messageName: PropTypes.string,\n    signalSpec: PropTypes.instanceOf(Signal),\n    segment: PropTypes.array,\n    unplot: PropTypes.func,\n    onRelativeTimeClick: PropTypes.func,\n    currentTime: PropTypes.number,\n    onSegmentChanged: PropTypes.func,\n    onDragStart: PropTypes.func,\n    onDragEnd: PropTypes.func,\n    container: PropTypes.object,\n    dragPos: PropTypes.object,\n    canReceiveGraphDrop: PropTypes.bool,\n    onGraphRefAvailable: PropTypes.func,\n    plottedSignals: PropTypes.array\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      plotInnerStyle: null,\n      shiftX: 0,\n      shiftY: 0,\n      bounds: null,\n      isDataInserted: false,\n      data: this.getGraphData(props),\n      spec: this.getGraphSpec(props)\n    };\n    this.onNewView = this.onNewView.bind(this);\n    this.onSignalClickTime = this.onSignalClickTime.bind(this);\n    this.onSignalSegment = this.onSignalSegment.bind(this);\n    this.onDragAnchorMouseDown = this.onDragAnchorMouseDown.bind(this);\n    this.onDragAnchorMouseUp = this.onDragAnchorMouseUp.bind(this);\n    this.onDragStart = this.onDragStart.bind(this);\n    this.onPlotResize = this.onPlotResize.bind(this);\n    this.insertData = this.insertData.bind(this);\n  }\n\n  getGraphData(props) {\n    let firstRelTime = -1;\n    let lastRelTime = -1;\n    const series = props.plottedSignals\n      .map((signals) => {\n        const { messageId, signalUid } = signals;\n        const { entries } = props.messages[messageId];\n        if (entries.length) {\n          let messageRelTime = entries[0].relTime;\n          if (firstRelTime === -1) {\n            firstRelTime = messageRelTime;\n          } else {\n            firstRelTime = Math.min(firstRelTime, messageRelTime);\n          }\n          messageRelTime = entries[entries.length - 1].relTime;\n          lastRelTime = Math.max(lastRelTime, messageRelTime);\n        }\n        return GraphData._calcGraphData(\n          props.messages[messageId],\n          signalUid,\n          0\n        );\n      })\n      .reduce((m, v) => m.concat(v), []);\n\n    return {\n      updated: Date.now(),\n      series,\n      firstRelTime,\n      lastRelTime\n    };\n  }\n\n  getGraphSpec(props) {\n    return {\n      ...CanPlotSpec,\n      scales: [\n        {\n          ...CanPlotSpec.scales[0],\n          domainMin: props.segment[0],\n          domainMax: props.segment[1]\n        },\n        ...CanPlotSpec.scales.slice(1)\n      ]\n    };\n  }\n\n  segmentIsNew(newSegment) {\n    return (\n      newSegment.length !== this.props.segment.length\n      || !newSegment.every((val, idx) => this.props.segment[idx] === val)\n    );\n  }\n\n  visualChanged(prevProps, nextProps) {\n    return (\n      prevProps.canReceiveGraphDrop !== nextProps.canReceiveGraphDrop\n      || JSON.stringify(prevProps.dragPos) !== JSON.stringify(nextProps.dragPos)\n    );\n  }\n\n  onPlotResize(options) {\n    if (!this.view) {\n      return;\n    }\n\n    let bounds = null; // eslint-disable-line no-unused-vars\n    if (options && options.bounds) {\n      this.setState({ bounds: options.bounds });\n      bounds = options.bounds;\n    } else {\n      bounds = this.state.bounds;\n    }\n\n    this.view.runAfter(this.updateBounds);\n  }\n\n  updateBounds = debounce(() => {\n    this.view.signal('width', this.state.bounds.width - 90);\n    this.view.signal('height', 0.4 * (this.state.bounds.width - 40)); // 5:2 aspect ratio\n\n    this.view.run();\n  }, 100);\n\n  insertData = debounce(() => {\n    if (!this.view) {\n      console.log('Cannot insertData');\n      return;\n    }\n\n    // adding plot points by diff isn't faster since it basically has to be n^2\n    // out-of-order events make it so that you can't just check the bounds\n    const { series } = this.state.data;\n    const changeset = this.view\n      .changeset()\n      .remove((v) => true)\n      .insert(series);\n    this.view.change('table', changeset);\n    this.view.run();\n  }, 250);\n\n  componentDidUpdate(prevProps) {\n    if (this.props.dragPos && JSON.stringify(prevProps.dragPos) !== JSON.stringify(this.props.dragPos)) {\n      this.updateStyleFromDragPos(this.props.dragPos);\n    } else if (!this.props.dragPos && this.state.plotInnerStyle !== null) {\n      this.setState({ plotInnerStyle: null });\n    }\n\n    if (prevProps.messages !== this.props.messages || prevProps.plottedSignal !== this.props.plottedSignal) {\n      const data = this.getGraphData(this.props);\n      this.setState({ data });\n    }\n    if (this.segmentIsNew(this.props.segment)) {\n      this.setState({ spec: this.getGraphSpec(this.props) });\n    }\n\n    if (this.view) {\n      if (this.props.segment.length > 0) {\n        // Set segmented domain\n        this.view.signal('segment', this.props.segment);\n      } else {\n        // Reset segment to full domain\n        this.view.signal('segment', 0);\n      }\n      this.view.signal('videoTime', this.props.currentTime);\n      this.view.runAsync();\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (!this.view) {\n      return true;\n    }\n    if (this.props.messages !== nextProps.messages || this.props.plottedSignal !== nextProps.plottedSignal ||\n      this.segmentIsNew(nextProps.segment) || this.state.spec !== nextState.spec)\n    {\n      return true;\n    }\n    if (this.state.data !== nextState.data) {\n      this.insertData();\n    }\n    if (this.props.currentTime !== nextProps.currentTime) {\n      this.view.signal('videoTime', nextProps.currentTime);\n    }\n    if (this.segmentIsNew(nextProps.segment)) {\n      if (nextProps.segment.length > 0) {\n        // Set segmented domain\n        this.view.signal('segment', nextProps.segment);\n      } else {\n        // Reset segment to full domain\n        this.view.signal('segment', 0);\n      }\n    }\n    this.view.runAsync();\n    return false;\n  }\n\n  updateStyleFromDragPos({ left, top }) {\n    const plotInnerStyle = { ...this.state.plotInnerStyle };\n    plotInnerStyle.left = left;\n    plotInnerStyle.top = top;\n    this.setState({ plotInnerStyle });\n  }\n\n  onNewView(view) {\n    this.view = view;\n\n    if (this.state.bounds) {\n      this.onPlotResize();\n    }\n    if (this.props.segment.length > 0) {\n      view.signal('segment', this.props.segment);\n    }\n    view.signal('videoTime', this.props.currentTime);\n\n    this.insertData();\n  }\n\n  onSignalClickTime(signal, clickTime) {\n    // console.log('onSignalClickTime', signal, clickTime);\n    if (clickTime !== undefined) {\n      this.props.onRelativeTimeClick(this.props.messageId, clickTime);\n    }\n  }\n\n  onSignalSegment(signal, segment) {\n    // console.log('onSignalSegment', signal, segment);\n    if (!Array.isArray(segment)) {\n      return;\n    }\n\n    this.props.onSegmentChanged(this.props.messageId, segment);\n\n    if (!this.view) {\n      return;\n    }\n\n    this.view.runAfter(() => {\n      const state = this.view.getState();\n      state.subcontext[0].signals.brush = 0;\n      this.view.setState(state);\n      this.insertData();\n    });\n  }\n\n  plotInnerStyleFromMouseEvent(e) {\n    const { shiftX, shiftY } = this.state;\n    const plotInnerStyle = { ...DefaultPlotInnerStyle };\n    const rect = this.props.container.getBoundingClientRect();\n\n    const x = e.clientX - rect.left - shiftX;\n    const y = e.clientY - rect.top - shiftY;\n    plotInnerStyle.left = x;\n    plotInnerStyle.top = y;\n    return plotInnerStyle;\n  }\n\n  onDragAnchorMouseDown(e) {\n    e.persist();\n    const shiftX = e.clientX - e.target.getBoundingClientRect().left;\n    const shiftY = e.clientY - e.target.getBoundingClientRect().top;\n    this.setState({ shiftX, shiftY }, () => {\n      this.setState({ plotInnerStyle: this.plotInnerStyleFromMouseEvent(e) });\n    });\n    this.props.onDragStart(\n      this.props.messageId,\n      this.props.signalSpec.uid,\n      shiftX,\n      shiftY\n    );\n  }\n\n  onDragAnchorMouseUp(e) {\n    this.props.onDragEnd();\n    this.setState({\n      plotInnerStyle: null,\n      shiftX: 0,\n      shiftY: 0\n    });\n  }\n\n  onDragStart(e) {\n    e.preventDefault();\n    return false;\n  }\n\n  render() {\n    const { plotInnerStyle } = this.state;\n    const canReceiveDropClass = this.props.canReceiveGraphDrop\n      ? 'is-droppable'\n      : null;\n\n    return (\n      <div\n        className=\"cabana-explorer-visuals-plot\"\n        ref={this.props.onGraphRefAvailable}\n      >\n        <div\n          className={cx(\n            'cabana-explorer-visuals-plot-inner',\n            canReceiveDropClass\n          )}\n          style={plotInnerStyle || null}\n        >\n          <div\n            className=\"cabana-explorer-visuals-plot-draganchor\"\n            onMouseDown={this.onDragAnchorMouseDown}\n          >\n            <span className=\"fa fa-bars\" />\n          </div>\n          {this.props.plottedSignals.map(\n            ({ messageId, signalUid, messageName }) => {\n              const signal = Object.values(\n                this.props.messages[messageId].frame.signals\n              ).find((s) => s.uid === signalUid);\n              const colors = signal.getColors(messageId);\n\n              return (\n                <div\n                  className=\"cabana-explorer-visuals-plot-header\"\n                  key={`${messageId}_${signal.uid}`}\n                >\n                  <div className=\"cabana-explorer-visuals-plot-header-toggle\">\n                    <button\n                      className=\"button--tiny\"\n                      onClick={() => this.props.unplot(messageId, signalUid)}\n                    >\n                      <span>Hide Plot</span>\n                    </button>\n                  </div>\n                  <div className=\"cabana-explorer-visuals-plot-header-copy\">\n                    <div className=\"cabana-explorer-visuals-plot-message\">\n                      <span>\n                        {messageName}\n                        {' '}\n                        {messageId}\n                      </span>\n                    </div>\n                    <div className=\"cabana-explorer-visuals-plot-signal\">\n                      <div\n                        className=\"cabana-explorer-visuals-plot-signal-color\"\n                        style={{ background: `rgb(${colors}` }}\n                      />\n                      <strong>{signal.name}</strong>\n                    </div>\n                  </div>\n                </div>\n              );\n            }\n          )}\n          <Measure bounds onResize={this.onPlotResize}>\n            {({ measureRef }) => (\n              <div\n                ref={measureRef}\n                className=\"cabana-explorer-visuals-plot-container\"\n              >\n                <Vega\n                  onNewView={this.onNewView}\n                  logLevel={1}\n                  signalListeners={{\n                    clickTime: this.onSignalClickTime,\n                    segment: this.onSignalSegment\n                  }}\n                  renderer=\"canvas\"\n                  spec={this.state.spec}\n                  actions={false}\n                  data={{\n                    table: this.state.data.series\n                  }}\n                />\n              </div>\n            )}\n          </Measure>\n        </div>\n      </div>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}