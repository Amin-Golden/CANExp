{"ast":null,"code":"'use strict';\n\nvar stream = require('stream');\n\nvar util = require('util');\n\nvar buffUtil = require('./buffer');\n\nmodule.exports = CapnpStream;\nutil.inherits(CapnpStream, stream.Writable);\n\nfunction CapnpStream() {\n  stream.Writable.call(this);\n  this.curBuffer = null;\n}\n\nCapnpStream.prototype.readNextMessage = function () {\n  if (this.curBuffer.byteLength < 8) {\n    return false;\n  }\n\n  var size = buffUtil.readSize(this.curBuffer);\n\n  if (!size || size > this.curBuffer.byteLength) {\n    return false;\n  }\n\n  this.emit('message', this.curBuffer.slice(0, size));\n  this.curBuffer = this.curBuffer.slice(size);\n  return true;\n};\n\nCapnpStream.prototype._write = function (chunk, encoding, done) {\n  if (!this.curBuffer) {\n    this.curBuffer = chunk;\n  } else if (chunk.byteLength || chunk.length) {\n    this.curBuffer = Buffer.concat([this.curBuffer, chunk]);\n  }\n\n  while (this.readNextMessage()) {}\n\n  done();\n};","map":{"version":3,"sources":["/home/amax/Autoro/cabana/node_modules/capnp-split/dist/stream.js"],"names":["stream","require","util","buffUtil","module","exports","CapnpStream","inherits","Writable","call","curBuffer","prototype","readNextMessage","byteLength","size","readSize","emit","slice","_write","chunk","encoding","done","length","Buffer","concat"],"mappings":"AAAA;;AAEA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIE,QAAQ,GAAGF,OAAO,CAAC,UAAD,CAAtB;;AAEAG,MAAM,CAACC,OAAP,GAAiBC,WAAjB;AAEAJ,IAAI,CAACK,QAAL,CAAcD,WAAd,EAA2BN,MAAM,CAACQ,QAAlC;;AAEA,SAASF,WAAT,GAAuB;AACrBN,EAAAA,MAAM,CAACQ,QAAP,CAAgBC,IAAhB,CAAqB,IAArB;AACA,OAAKC,SAAL,GAAiB,IAAjB;AACD;;AAEDJ,WAAW,CAACK,SAAZ,CAAsBC,eAAtB,GAAwC,YAAY;AAClD,MAAI,KAAKF,SAAL,CAAeG,UAAf,GAA4B,CAAhC,EAAmC;AACjC,WAAO,KAAP;AACD;;AACD,MAAIC,IAAI,GAAGX,QAAQ,CAACY,QAAT,CAAkB,KAAKL,SAAvB,CAAX;;AACA,MAAI,CAACI,IAAD,IAASA,IAAI,GAAG,KAAKJ,SAAL,CAAeG,UAAnC,EAA+C;AAC7C,WAAO,KAAP;AACD;;AACD,OAAKG,IAAL,CAAU,SAAV,EAAqB,KAAKN,SAAL,CAAeO,KAAf,CAAqB,CAArB,EAAwBH,IAAxB,CAArB;AACA,OAAKJ,SAAL,GAAiB,KAAKA,SAAL,CAAeO,KAAf,CAAqBH,IAArB,CAAjB;AAEA,SAAO,IAAP;AACD,CAZD;;AAcAR,WAAW,CAACK,SAAZ,CAAsBO,MAAtB,GAA+B,UAAUC,KAAV,EAAiBC,QAAjB,EAA2BC,IAA3B,EAAiC;AAC9D,MAAI,CAAC,KAAKX,SAAV,EAAqB;AACnB,SAAKA,SAAL,GAAiBS,KAAjB;AACD,GAFD,MAEO,IAAIA,KAAK,CAACN,UAAN,IAAoBM,KAAK,CAACG,MAA9B,EAAsC;AAC3C,SAAKZ,SAAL,GAAiBa,MAAM,CAACC,MAAP,CAAc,CAAC,KAAKd,SAAN,EAAiBS,KAAjB,CAAd,CAAjB;AACD;;AACD,SAAO,KAAKP,eAAL,EAAP,EAA+B,CAAE;;AAEjCS,EAAAA,IAAI;AACL,CATD","sourcesContent":["'use strict';\n\nvar stream = require('stream');\nvar util = require('util');\nvar buffUtil = require('./buffer');\n\nmodule.exports = CapnpStream;\n\nutil.inherits(CapnpStream, stream.Writable);\n\nfunction CapnpStream() {\n  stream.Writable.call(this);\n  this.curBuffer = null;\n}\n\nCapnpStream.prototype.readNextMessage = function () {\n  if (this.curBuffer.byteLength < 8) {\n    return false;\n  }\n  var size = buffUtil.readSize(this.curBuffer);\n  if (!size || size > this.curBuffer.byteLength) {\n    return false;\n  }\n  this.emit('message', this.curBuffer.slice(0, size));\n  this.curBuffer = this.curBuffer.slice(size);\n\n  return true;\n};\n\nCapnpStream.prototype._write = function (chunk, encoding, done) {\n  if (!this.curBuffer) {\n    this.curBuffer = chunk;\n  } else if (chunk.byteLength || chunk.length) {\n    this.curBuffer = Buffer.concat([this.curBuffer, chunk]);\n  }\n  while (this.readNextMessage()) {}\n\n  done();\n};"]},"metadata":{},"sourceType":"script"}